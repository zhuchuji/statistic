{"version":3,"sources":["components/DataForm.js","constants.js","components/ChartView.js","components/AreaTable.js","components/AreaView.js","components/CityTable.js","components/CityView.js","components/ProjectTable.js","utils.js","components/ProjectView.js","App.js","serviceWorker.js","index.js"],"names":["DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startDate","Date","set","hour","minute","second","endDate","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","toConsumableArray","concat","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","React","Component","defaultPorps","onExport","WrapDataForm","create","TICKET_SYSTEM_COUNT","TICKET_ACCEPT","TICKET_OPEN","TICKET_VALIDATE","TICKET_PAUSE","TICKET_INVALID","TICKET_CLOSE","TICKET_CLOSE_NORMAL","TICKET_CLOSE_ABNORMAL","TICKET_CLOSE_ON_TIME","TICKET_RESPONSE_IN_30_MIN","TICKET_RESPONSE_IN_30_HOUR","TICKET_CLOSE_PROCESS_TIME","TICKET_OPEN_PROCESS_TIME","DEFAULT_STATISTIC_ITEMS","KEY_REPORT_TIME","KEY_PROJECT_NAME","KEY_SECOND_CATEGORY","KEY_TICKET_STATUS","KEY_IS_PROCESS_EXCCED","KEY_FIRST_RESPONSE_TIME","KEY_PROCESS_TIME","KEY_CLOSE_TIME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","KEY_CITY_NAME","DEFAULT_SECOND_CATEGORIES","NEW_ADD_CLOSE_RATE","REMAIN_CLOSE_RATE","OVERALL_CLOSE_RATE","RESPONSE_IN_30_MIN_RATE","RESPONSE_IN_30_HOUR_RATE","CLOSE_ON_TIME_RATE","TOTAL_OVERALL_CLOSE_RATE","RATE_STATISTIC_ITEMS","STAGES","ChartView","titleConfig","left","top","textStyle","color","toolboxConfig","feature","saveAsImage","show","right","legendConfig","styles","height","citySecondCategoryCloseAverageHandleTimeSeries","newAddedCities","cityName","citySecondCategoryCloseAverageHandleTimeData","name","barMaxWidth","position","formatter","data","style","margin","core_default","echarts","option","title","objectSpread","text","tooltip","trigger","axisPointer","crossStyle","toolbox","xAxis","cities","yAxis","min","max","series","cityTotalAcceptData","yAxisIndex","cityOverallCloseRateData","projects","interval","axisLabel","rotate","projectTotalAcceptData","projectOverallCloseRateData","stages","stageTotalAcceptData","stageOverallCloseRateData","radius","cityOpenData","secondCategoryOpenData","cityNewAddedAcceptData","cityNewAddedCloseRateData","newAddedProjects","projectNewAddedAcceptData","projectNewAddedCloseRateData","newAddedStages","stageNewAddedAcceptData","stageNewAddedCloseRateData","secondCategoryNewAddedAcceptData","legend","cityNeedHandleAcceptData","cityNeedHandleCloseOnTimeRateData","cityNeedHandleCloseRateData","needHandleProjects","projectNeedHandleAcceptData","projectNeedHandleCloseOnTimeRateData","projectNeedHandleCloseRateData","cityCloseAverageHandleTimeData","cityOpenAverageHandleTimeData","AreaTable","otherColumns","map","item","es_table","Column","dataIndex","key","width","currentPageData","dataSource","pagination","pageSize","scroll","y","size","AreaView","components_AreaTable","periodNewAddedData","thisYearBeforePeriodData","thisYearBeforePeriodTotalData","thisYearTotalData","lastYearBeforePeriodData","lastYearBeforePeriodTotalData","beforePeriodNeedHandleData","periodTotalData","rateData","CityTable","cityColumn","filteredCities","length","filter","defaultProps","CityView","filterCities","es_select","mode","onChange","city","Option","components_CityTable","ProjectTable","projectColumn","filteredProjects","filterProjectName","projectName","sub","match","substring","parseTime","timeString","time","day","window","parseInt","filterProjectStage","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","stage","return","formatToTable","tableData","rowKey","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","statisticItem","rowData","_arr","_i","secondCategory","push","formatToAreaTable","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_arr2","_i2","formatToRateTable","_arr3","_i3","_arr4","_i4","formatToAreaTateTable","_arr5","_i5","_arr6","_i6","ProjectView","filterProjects","project","components_ProjectTable","periodNewAddedResult","thisYearBeforePeriodResult","thisYearBeforePeriodTotalResult","thisYearTotalResult","lastYearBeforePeriodResult","lastYearBeforePeriodTotalResult","beforePeriodNeedHandleResult","periodTotalResult","rateResult","TICKET_STATUS_IN_PROGRESS","TICKET_STATUS_PAUSE","TICKET_STATUS_VALIDATE","TICKET_STATUS_CLOSE","TICKET_STATUS_ABNORMAL_CLOSE","TICKET_STATUS_INVALID","NO","initProjectRate","itemName","initProject","isInProgress","ticketStatus","statisticRate","statisticMap","rateMap","toFixed","statisticCityRate","globalRowKey","formatCityData","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","formatToCityRateTable","_arr7","_i7","mergeStageResult","resultArray","filterFunc","mergeResult","forEach","result","filteredProjectName","_arr8","_i8","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","ticketCloseCount","ticketCloseProcessTime","ticketOpenProcessTime","ticketOpenCount","Number","mergeProjectResult","_arr9","_i9","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","statisticCity","closeTimeStart","closeTimeEnd","dataMap","ticket","ticketStatistic","ticketCloseTime","moment","_parseTime","_parseTime2","_parseTime3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","statistic","reportTime","yearStartDate","month","date","thisYearbeforePeriodTickets","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_parseTime4","_parseTime5","_parseTime6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","statisticThisYearBeforePeriodTickets","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","statisticThisYearBeforeStartDateTotalTickets","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_parseTime13","_parseTime14","_parseTime15","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","statisticThisYearTotalTickets","lastYearBeforePeriodTickets","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_parseTime7","_parseTime8","_parseTime9","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","statisticLastYearBeforePeriodTickets","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","_parseTime10","_parseTime11","_parseTime12","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","statisticLastYearBeforePeriodTotalTickets","_arr10","_i10","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","_arr11","_i11","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","stageRateResult","stageResult","projectResult","projectRateResult","cityResult","cityRateResult","App","start","fileReader","FileReader","readFile","onload","event","workbook","XLSX","read","target","sheet","Sheets","SheetNames","utils","sheet_to_json","blankrows","readAsBinaryString","readExcels","cityData","projectData","allCities","allCityResult","allProjectResult","allStageResult","table","areaResult","areaRateResult","areaData","_loop","stageData","console","log","_iteratorNormalCompletion26","_didIteratorError26","_iteratorError26","_step26","_iterator26","secondCategoryCloseAverageHandleTimeData","secondCategoryOpenAverageHandleTimeData","_iteratorNormalCompletion27","_didIteratorError27","_iteratorError27","_step27","_iterator27","ticketAccept","stageName","tabChart","components_ChartView","tabArea","components_AreaView","tabCity","components_CityView","tabProject","components_ProjectView","tabStage","locale_provider","locale","zh_CN","className","components_DataForm","exportExcel","tabs","TabPane","tab","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bdaf51dd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {},\n    onExport: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func,\n    onExport: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startDate = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endDate = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startDate, endDate);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              { \n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }   \n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在统计...': '开始统计'\n              }\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '判定无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关平均处理时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '剩余未关平均处理时长（天）';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\nexport const KEY_CITY_NAME = '城市';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const NEW_ADD_CLOSE_RATE = '新增关闭率';\r\nexport const REMAIN_CLOSE_RATE = '遗留关闭率';\r\nexport const OVERALL_CLOSE_RATE = '总体关闭率';\r\nexport const RESPONSE_IN_30_MIN_RATE = '响应及时率（0.5h）'\r\nexport const RESPONSE_IN_30_HOUR_RATE = '响应及时率（30h）';\r\nexport const CLOSE_ON_TIME_RATE = '及时关闭率';\r\nexport const TOTAL_OVERALL_CLOSE_RATE = '累计总体关闭率';\r\n\r\nexport const RATE_STATISTIC_ITEMS = [\r\n  REMAIN_CLOSE_RATE,\r\n  NEW_ADD_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_RATE = '本年度统计周期内';\r\n\r\nexport const STAGES = [\r\n  '一期',\r\n  '二期',\r\n  '三期',\r\n  '四期',\r\n  '五期',\r\n  '六期',\r\n  '七期',\r\n  '八期',\r\n  '九期',\r\n  '十期'\r\n];","import React from 'react';\r\nimport { Row } from 'antd';\r\n// import the core library.\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\n\r\n// then import echarts modules those you have used manually.\r\nimport echarts from 'echarts/lib/echarts';\r\nimport 'echarts/lib/chart/line';\r\nimport 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/chart/pie';\r\n// import 'echarts/lib/chart/scatter';\r\n// import 'echarts/lib/chart/radar';\r\n\r\n// import 'echarts/lib/chart/map';\r\n// import 'echarts/lib/chart/treemap';\r\n// import 'echarts/lib/chart/graph';\r\n// import 'echarts/lib/chart/gauge';\r\n// import 'echarts/lib/chart/funnel';\r\n// import 'echarts/lib/chart/parallel';\r\n// import 'echarts/lib/chart/sankey';\r\n// import 'echarts/lib/chart/boxplot';\r\n// import 'echarts/lib/chart/candlestick';\r\n// import 'echarts/lib/chart/effectScatter';\r\n// import 'echarts/lib/chart/lines';\r\n// import 'echarts/lib/chart/heatmap';\r\n\r\n// import 'echarts/lib/component/graphic';\r\n// import 'echarts/lib/component/grid';\r\nimport 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/tooltip';\r\n// import 'echarts/lib/component/polar';\r\n// import 'echarts/lib/component/geo';\r\n// import 'echarts/lib/component/parallel';\r\n// import 'echarts/lib/component/singleAxis';\r\n// import 'echarts/lib/component/brush';\r\n\r\nimport 'echarts/lib/component/title';\r\n\r\n// import 'echarts/lib/component/dataZoom';\r\n// import 'echarts/lib/component/visualMap';\r\n\r\n// import 'echarts/lib/component/markPoint';\r\n// import 'echarts/lib/component/markLine';\r\n// import 'echarts/lib/component/markArea';\r\n\r\n// import 'echarts/lib/component/timeline';\r\nimport 'echarts/lib/component/toolbox';\r\n// import { Rect } from 'echarts/lib/util/graphic';\r\n\r\n// import 'zrender/lib/vml/vml';\r\n\r\nimport  { DEFAULT_SECOND_CATEGORIES } from '../constants';\r\n\r\nfunction ChartView(props) {\r\n  const titleConfig = {\r\n    left: 'center',\r\n    top: 0,\r\n    textStyle: {\r\n      color: '#000000'\r\n    }\r\n  };\r\n  const toolboxConfig = {\r\n    feature: {\r\n      saveAsImage: { show: true }\r\n    },\r\n    right: 40\r\n  };\r\n  const legendConfig = {\r\n    left: 40\r\n  };\r\n  const styles = {\r\n    height: '500px',\r\n  };\r\n\r\n  let citySecondCategoryCloseAverageHandleTimeSeries = [];\r\n  let newAddedCities = [];\r\n  for (let cityName in props.citySecondCategoryCloseAverageHandleTimeData) {\r\n    newAddedCities = [\r\n      ...newAddedCities, cityName\r\n    ];\r\n    citySecondCategoryCloseAverageHandleTimeSeries = [\r\n      ...citySecondCategoryCloseAverageHandleTimeSeries,\r\n      {\r\n        name: cityName,\r\n        type: 'bar',\r\n        barMaxWidth: 20,\r\n        label: {\r\n          position: 'top',\r\n          color: '#333',\r\n          show: true,\r\n          formatter: '{c}'\r\n        },\r\n        data: props.citySecondCategoryCloseAverageHandleTimeData[cityName]\r\n      }\r\n    ];\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各城市日常维修总体关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityTotalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityOverallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各项目日常维修总体关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.projects,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectTotalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectOverallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各项目分期日常维修总体关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.stages,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageTotalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageOverallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关城市分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '城市剩余未关',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.cityOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关二级分类分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '二级分类',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.secondCategoryOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各城市新增维修关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNewAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNewAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '项目新增关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.newAddedProjects,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNewAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNewAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '分期新增关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.newAddedStages,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageNewAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageNewAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '新增维修城市分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.cityNewAddedAcceptData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '新增维修二级分类分布图',\r\n              left: 'center',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.secondCategoryNewAddedAcceptData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各城市需处理关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            legend: {\r\n              data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n              ...legendConfig\r\n            },\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '需处理受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '比率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '需处理受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNeedHandleAcceptData\r\n              },\r\n              {\r\n                name: '及时关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNeedHandleCloseOnTimeRateData\r\n              },\r\n              {\r\n                name: '总体关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNeedHandleCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各项目需处理关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            legend: {\r\n              data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n              ...legendConfig\r\n            },\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.needHandleProjects,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '需处理受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '比率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '需处理受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNeedHandleAcceptData\r\n              },\r\n              {\r\n                name: '及时关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNeedHandleCloseOnTimeRateData\r\n              },\r\n              {\r\n                name: '总体关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNeedHandleCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '平均处理时长城市分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            legend: {\r\n              data: ['已关闭', '剩余未关'],\r\n              ...legendConfig\r\n            },\r\n            series: [\r\n              {\r\n                name: '已关闭',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityCloseAverageHandleTimeData\r\n              },\r\n              {\r\n                name: '剩余未关',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityOpenAverageHandleTimeData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '已关闭维修分类平均处理时长',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: DEFAULT_SECOND_CATEGORIES,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            legend: {\r\n              data: props.newAddedCities,\r\n              ...legendConfig\r\n            },\r\n            series: citySecondCategoryCloseAverageHandleTimeSeries\r\n          }}\r\n        />\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChartView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction AreaTable(props) {\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default AreaTable;\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\nimport AreaTable from './AreaTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass AreaView extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_PERIOD_ADD}\r\n            data={this.props.periodNewAddedData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n            data={this.props.thisYearBeforePeriodData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n            data={this.props.thisYearBeforePeriodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_THIS_YEAR_TOTAL}\r\n            data={this.props.thisYearTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n            data={this.props.lastYearBeforePeriodData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n            data={this.props.lastYearBeforePeriodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n            data={this.props.beforePeriodNeedHandleData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n            data={this.props.periodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_PERIOD_RATE}\r\n            data={this.props.rateData}\r\n          />\r\n        </div>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AreaView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_CITY_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction CityTable(props) {\r\n  const cityColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_CITY_NAME}\r\n      title={KEY_CITY_NAME}\r\n      key={KEY_CITY_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredCities.length > 0 ?\r\n        props.data.filter(item => props.filteredCities.indexOf(item[KEY_CITY_NAME]) != -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {cityColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nCityTable.defaultProps = {\r\n  filteredCities: []\r\n}\r\n\r\nexport default CityTable;\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport CityTable from './CityTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass CityView extends React.Component {\r\n  static defaultProps = {\r\n    cities: []\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredCities: []\r\n    }\r\n  }\r\n\r\n  filterCities = (filteredCities) => {\r\n    if (filteredCities != null && filteredCities.length > 0) {\r\n      this.setState({\r\n        filteredCities: filteredCities\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredCities: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的城市'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterCities}\r\n                >\r\n                  {\r\n                    this.props.cities.map((city) => (\r\n                      <Select.Option key={city}>{city}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={this.props.periodNewAddedData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.thisYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.thisYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={this.props.thisYearTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.lastYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.lastYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={this.props.beforePeriodNeedHandleData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={this.props.periodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={this.props.rateData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CityView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ProjectTable(props) {\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title={KEY_PROJECT_NAME}\r\n      key={KEY_PROJECT_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredProjects.length > 0 ?\r\n        props.data.filter(item => props.filteredProjects.indexOf(item[KEY_PROJECT_NAME]) !== -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nProjectTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ProjectTable;\r\n","import {\r\n  DEFAULT_STATISTIC_ITEMS,\r\n  KEY_TICKET_TOTAL,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  STAGES,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES\r\n} from './constants';\r\n\r\nexport function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|（.*?）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}\r\n\r\nexport function filterProject(projectName, reg) {\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function filterProjectStage(projectName) {\r\n  let filteredName = null;\r\n  for (let stage of STAGES) {\r\n    if (projectName.indexOf(stage) != -1) {\r\n      filteredName = projectName.substring(0, projectName.indexOf(stage));\r\n      return filteredName;\r\n    }\r\n  }\r\n  return projectName;\r\n}\r\n\r\nexport function formatToTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let projectName in data) {\r\n    for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = projectName;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[secondCategory] = data[secondCategory][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToRateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let projectName in data) {\r\n    for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n      RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = projectName;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[secondCategory] = data[secondCategory][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport ProjectTable from './ProjectTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\nimport {\r\n  formatToTable,\r\n  formatToRateTable\r\n} from '../utils';\r\n\r\nclass ProjectView extends React.Component {\r\n  static defaultProps = {\r\n    data: {}\r\n  }\r\n\r\n  // static getDirevedStateFromProps() {\r\n\r\n  // }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredProjects: []\r\n    }\r\n  }\r\n\r\n  filterProjects = (projects) => {\r\n    if (projects.length > 0) {\r\n      this.setState({\r\n        filteredProjects: projects\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredProjects: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let projects = [];\r\n    for (let item in this.props.data) {\r\n      for (let projectName in this.props.data[item]) {\r\n        if (projects.indexOf(projectName) === -1) {\r\n          projects = [...projects, projectName];\r\n        }\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的项目'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterProjects}\r\n                >\r\n                  {\r\n                    projects.map((project) => (\r\n                      <Select.Option key={project}>{project}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={formatToTable(this.props.data.periodNewAddedResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.thisYearBeforePeriodResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearBeforePeriodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={formatToTable(this.props.data.beforePeriodNeedHandleResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={formatToTable(this.props.data.periodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={formatToRateTable(this.props.data.rateResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectView;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport DataForm from './components/DataForm';\nimport ChartView from './components/ChartView';\nimport AreaView from './components/AreaView';\nimport CityView from './components/CityView';\nimport ProjectView from './components/ProjectView';\nimport XLSX from 'xlsx';\nimport { Row, Col, message, LocaleProvider, Tabs } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  TICKET_SYSTEM_COUNT,\n  TICKET_ACCEPT,\n  TICKET_OPEN,\n  TICKET_VALIDATE,\n  TICKET_PAUSE,\n  TICKET_INVALID,\n  TICKET_CLOSE,\n  TICKET_CLOSE_NORMAL,\n  TICKET_CLOSE_ABNORMAL,\n  TICKET_CLOSE_ON_TIME,\n  TICKET_RESPONSE_IN_30_MIN,\n  TICKET_RESPONSE_IN_30_HOUR,\n  TICKET_CLOSE_PROCESS_TIME,\n  TICKET_OPEN_PROCESS_TIME,\n  DEFAULT_STATISTIC_ITEMS,\n  KEY_REPORT_TIME,\n  KEY_PROJECT_NAME,\n  KEY_SECOND_CATEGORY,\n  KEY_TICKET_STATUS,\n  KEY_IS_PROCESS_EXCCED,\n  KEY_FIRST_RESPONSE_TIME,\n  KEY_PROCESS_TIME,\n  KEY_CLOSE_TIME,\n  DEFAULT_SECOND_CATEGORIES,\n  KEY_STATISTIC_ITEM,\n  KEY_TICKET_TOTAL,\n  KEY_CITY_NAME,\n  STATISTIC_PERIOD_ADD,\n  STATISTIC_BEFORE_PERIOD_REMAIN,\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_THIS_YEAR_TOTAL,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\n  STATISTIC_BEFORE_PERIOD_TOTAL,\n  STATISTIC_PERIOD_RATE,\n  STAGES,\n  NEW_ADD_CLOSE_RATE,\n  REMAIN_CLOSE_RATE,\n  OVERALL_CLOSE_RATE,\n  RESPONSE_IN_30_MIN_RATE,\n  RESPONSE_IN_30_HOUR_RATE,\n  CLOSE_ON_TIME_RATE,\n  TOTAL_OVERALL_CLOSE_RATE,\n  RATE_STATISTIC_ITEMS\n} from './constants';\n\nimport {\n  filterProjectName,\n  parseTime,\n  filterProjectStage,\n  formatToAreaTable,\n  formatToAreaTateTable\n} from './utils';\n\n// ticket status\nconst TICKET_STATUS_IN_PROGRESS = '处理中';\nconst TICKET_STATUS_PAUSE = '暂停处理';\nconst TICKET_STATUS_VALIDATE = '待复验';\nconst TICKET_STATUS_CLOSE = '已关闭';\nconst TICKET_STATUS_ABNORMAL_CLOSE = '非正常关闭';\nconst TICKET_STATUS_INVALID = '判定无效';\n\nconst YES = '是';\nconst NO = '否';\n\nfunction initProjectRate() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of RATE_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction initProject() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of DEFAULT_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction isInProgress(ticketStatus) {\n  return ticketStatus.indexOf(TICKET_STATUS_IN_PROGRESS) === 0;\n}\n\n// 统计周期内新增\nfunction statistic(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 统计周期前遗留\nfunction statisticThisYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 本年度统计周期前遗留累计\nfunction statisticThisYearBeforeStartDateTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n  }\n\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticThisYearTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if (((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) &&\n      ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticRate(statisticMap, statisticItem, rateMap) {\n  for (let projectName in statisticMap) {\n    if (rateMap[projectName] == null) {\n      rateMap[projectName] = initProjectRate();\n    }\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      if (statisticItem === NEW_ADD_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === REMAIN_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE_ON_TIME] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      }\n    }\n  }\n}\n\nfunction statisticCityRate(statisticMap, statisticItem, rateMap) {\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    if ( rateMap[secondCategory] == null) {\n      rateMap[secondCategory] = {};\n    }\n    if (statisticItem === NEW_ADD_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === REMAIN_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE_ON_TIME] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    }\n  }\n}\n\nfunction readExcels(fileList) {\n  return new Promise((resolve, reject) => {\n    let fileReader = new FileReader();\n    let data = {};\n\n    let readFile = (index) => {\n      if (index < fileList.length) {\n        fileReader.onload = (event) => {\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\n          let cityName = fileList[index].name.substring(0, fileList[index].name.indexOf('.'));\n          data[cityName] = XLSX.utils.sheet_to_json(sheet, { blankrows: false });\n          readFile(index + 1);\n        }\n        fileReader.readAsBinaryString(fileList[index]);\n      } else {\n        resolve(data);\n      }\n    };\n    readFile(0);\n  });\n}\n\nlet globalRowKey = 0;\n\nfunction formatCityData(data, city) {\n  let tableData = [];\n  for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction formatToCityRateTable(data, city) {\n  let tableData = [];\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction mergeStageResult(resultArray, filterFunc) {\n  let mergeResult = {};\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      let filteredProjectName = filterFunc(projectName);\n      if (mergeResult[filteredProjectName] == null) {\n        mergeResult[filteredProjectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[filteredProjectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[filteredProjectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[filteredProjectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in mergeResult) {\n    for (let secondCategory in mergeResult[projectName]) {\n      let ticketCloseProcessTime = mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = mergeResult[projectName][secondCategory][TICKET_CLOSE];\n      mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = mergeResult[projectName][secondCategory][TICKET_OPEN];\n      mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return mergeResult;\n}\n\nfunction mergeProjectResult(resultArray) {\n  let mergeResult = initProject();\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let secondCategory in mergeResult) {\n    let ticketCloseProcessTime = mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME];\n    let ticketCloseCount = mergeResult[secondCategory][TICKET_CLOSE];\n    mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n      ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n    let ticketOpenProcessTime = mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME];\n    let ticketOpenCount = mergeResult[secondCategory][TICKET_OPEN];\n    mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] =\n      ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n  }\n\n  return mergeResult;\n}\n\n\nfunction statisticCity(data, startDate, endDate) {\n  // 统计分期\n  let periodNewAddedTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime >= startDate && reportTime <= endDate;\n  });\n  let periodNewAddedResult = statistic(periodNewAddedTickets, startDate, endDate);\n\n  let yearStartDate = moment(startDate).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n  let thisYearbeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < startDate && reportTime >= yearStartDate;\n  });\n\n  let thisYearBeforePeriodResult = statisticThisYearBeforePeriodTickets(thisYearbeforePeriodTickets,\n    startDate, endDate);\n\n  let thisYearBeforePeriodTotalResult = statisticThisYearBeforeStartDateTotalTickets(\n    thisYearbeforePeriodTickets, yearStartDate, endDate);\n\n  let thisYearTotalTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime <= endDate && reportTime >= yearStartDate;\n  });\n  let thisYearTotalResult = statisticThisYearTotalTickets(thisYearTotalTickets,\n    yearStartDate, endDate);\n\n  let lastYearBeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < yearStartDate;\n  });\n  let lastYearBeforePeriodResult = statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\n    startDate, endDate);\n  \n  let lastYearBeforePeriodTotalResult = statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\n    yearStartDate, endDate);\n\n  let beforePeriodNeedHandleResult = {};\n  [periodNewAddedResult, thisYearBeforePeriodResult, lastYearBeforePeriodResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (beforePeriodNeedHandleResult[projectName] == null) {\n        beforePeriodNeedHandleResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            beforePeriodNeedHandleResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in beforePeriodNeedHandleResult) {\n    for (let secondCategory in beforePeriodNeedHandleResult[projectName]) {\n      let ticketCloseProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let periodTotalResult = {};\n  [lastYearBeforePeriodTotalResult, thisYearTotalResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (periodTotalResult[projectName] == null) {\n        periodTotalResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            periodTotalResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in periodTotalResult) {\n    for (let secondCategory in periodTotalResult[projectName]) {\n      let ticketCloseProcessTime = periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = periodTotalResult[projectName][secondCategory][TICKET_CLOSE];\n      periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = periodTotalResult[projectName][secondCategory][TICKET_OPEN];\n      periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let stageRateResult = {};\n  statisticRate(periodNewAddedResult, NEW_ADD_CLOSE_RATE, stageRateResult);\n  statisticRate(thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, stageRateResult);\n  statisticRate(periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, stageRateResult);\n  \n  let stageResult = {\n    periodNewAddedResult: periodNewAddedResult,\n    thisYearBeforePeriodResult: thisYearBeforePeriodResult,\n    thisYearBeforePeriodTotalResult: thisYearBeforePeriodTotalResult,\n    lastYearBeforePeriodResult: lastYearBeforePeriodResult,\n    lastYearBeforePeriodTotalResult: lastYearBeforePeriodTotalResult,\n    beforePeriodNeedHandleResult: beforePeriodNeedHandleResult,\n    thisYearTotalResult: thisYearTotalResult,\n    periodTotalResult: periodTotalResult,\n    rateResult: stageRateResult\n  };\n\n  // 统计项目\n  let projectResult = {\n    periodNewAddedResult:  mergeStageResult([periodNewAddedResult], filterProjectStage),\n    thisYearBeforePeriodResult: mergeStageResult([thisYearBeforePeriodResult], filterProjectStage),\n    thisYearBeforePeriodTotalResult: mergeStageResult([thisYearBeforePeriodTotalResult], filterProjectStage),\n    thisYearTotalResult: mergeStageResult([thisYearTotalResult], filterProjectStage),\n    lastYearBeforePeriodResult: mergeStageResult([lastYearBeforePeriodResult], filterProjectStage),\n    lastYearBeforePeriodTotalResult: mergeStageResult([lastYearBeforePeriodTotalResult], filterProjectStage),\n    beforePeriodNeedHandleResult: mergeStageResult([beforePeriodNeedHandleResult], filterProjectStage),\n    periodTotalResult: mergeStageResult([periodTotalResult], filterProjectStage)\n  };\n  let projectRateResult = {}\n  statisticRate(projectResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, projectRateResult);\n  statisticRate(projectResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, projectRateResult);\n  projectResult.rateResult = projectRateResult;\n\n  let cityResult = {\n    periodNewAddedResult:  mergeProjectResult([projectResult.periodNewAddedResult]),\n    thisYearBeforePeriodResult: mergeProjectResult([projectResult.thisYearBeforePeriodResult]),\n    thisYearBeforePeriodTotalResult: mergeProjectResult([projectResult.thisYearBeforePeriodTotalResult]),\n    thisYearTotalResult: mergeProjectResult([projectResult.thisYearTotalResult]),\n    lastYearBeforePeriodResult: mergeProjectResult([projectResult.lastYearBeforePeriodResult]),\n    lastYearBeforePeriodTotalResult: mergeProjectResult([projectResult.lastYearBeforePeriodTotalResult]),\n    beforePeriodNeedHandleResult: mergeProjectResult([projectResult.beforePeriodNeedHandleResult]),\n    periodTotalResult: mergeProjectResult([projectResult.periodTotalResult])\n  };\n  let cityRateResult = {}\n  statisticCityRate(cityResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, cityRateResult);\n  cityResult.rateResult = cityRateResult;\n\n  let result = {\n    stageResult,\n    projectResult,\n    cityResult\n  };\n  return result;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityData: {\n        periodNewAddedData: [],\n        thisYearBeforePeriodData: [],\n        thisYearBeforePeriodTotalData: [],\n        thisYearTotalData: [],\n        lastYearBeforePeriodData: [],\n        lastYearBeforePeriodTotalData: [],\n        beforePeriodNeedHandleData: [],\n        periodTotalData: [],\n        rateData: [],\n        cities: []\n      },\n      areaData: {\n        periodNewAddedData: [],\n        thisYearBeforePeriodData: [],\n        thisYearBeforePeriodTotalData: [],\n        thisYearTotalData: [],\n        lastYearBeforePeriodData: [],\n        lastYearBeforePeriodTotalData: [],\n        beforePeriodNeedHandleData: [],\n        periodTotalData: [],\n        rateData: []\n      },\n      loading: false\n    };\n  }\n\n  start = (fileList, startDate, endDate) => {\n    this.setState({ loading: true });\n    readExcels(fileList).then((data) => {\n      // clear previous data\n      this.setState({\n        cityData: {\n          periodNewAddedData: [],\n          thisYearBeforePeriodData: [],\n          thisYearBeforePeriodTotalData: [],\n          thisYearTotalData: [],\n          lastYearBeforePeriodData: [],\n          lastYearBeforePeriodTotalData: [],\n          beforePeriodNeedHandleData: [],\n          periodTotalData: [],\n          rateData: [],\n          cities: [],\n          cityOpenData: []\n        },\n        projectData: {},\n        stageResult: {}\n      });\n      let allCities = [];\n      let allCityResult = {};\n      let allProjectResult = {};\n      let allStageResult = {};\n      for (let cityName in data) {\n        allCities.push(cityName);\n        let result = statisticCity(data[cityName], startDate, endDate);\n        allCityResult[cityName] = result.cityResult;\n        for (let table in result.projectResult) {\n          allProjectResult[table] = {\n            ...allProjectResult[table],\n            ...result.projectResult[table]\n          }\n        }\n        for (let table in result.stageResult) {\n          allStageResult[table] = {\n            ...allStageResult[table],\n            ...result.stageResult[table]\n          }\n        }\n      }\n\n      // 统计大区\n      let areaResult = {\n        periodNewAddedResult: initProject(),\n        thisYearBeforePeriodResult: initProject(),\n        thisYearBeforePeriodTotalResult: initProject(),\n        thisYearTotalResult: initProject(),\n        lastYearBeforePeriodResult: initProject(),\n        lastYearBeforePeriodTotalResult: initProject(),\n        beforePeriodNeedHandleResult: initProject(),\n        periodTotalResult: initProject()\n      };\n      // statistic area result\n      for (let table in areaResult) {\n        for (let cityName in allCityResult) {\n          for (let secondCategory in areaResult[table]) {\n            let result = allCityResult[cityName][table][secondCategory];\n            for (let item in result) {\n              if (item === TICKET_CLOSE_PROCESS_TIME) {\n                let ticketCloseCount = result[TICKET_CLOSE];\n                let ticketCloseProcessTime = result[TICKET_CLOSE_PROCESS_TIME];\n                areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n                  ticketCloseCount * ticketCloseProcessTime;\n              } else if (item === TICKET_OPEN_PROCESS_TIME) {\n                let ticketOpenProcessTime = result[TICKET_OPEN_PROCESS_TIME];\n                let ticketOpenCount = result[TICKET_OPEN];\n                areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n                  ticketOpenCount * ticketOpenProcessTime;\n              }\n              else {\n                areaResult[table][secondCategory][item] += result[item];\n              }\n            }\n          }\n        }\n      }\n      // get average process time\n      for (let table in areaResult) {\n        for (let secondCategory in areaResult[table]) {\n          let ticketCloseProcessTime = areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n          let ticketCloseCount = areaResult[table][secondCategory][TICKET_CLOSE];\n          areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n            ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n          let ticketOpenProcessTime = areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME];\n          let ticketOpenCount = areaResult[table][secondCategory][TICKET_OPEN];\n          areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n            ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n        }\n      }\n      let areaRateResult = {}\n      statisticCityRate(areaResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, areaRateResult);\n      statisticCityRate(areaResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, areaRateResult);\n      statisticCityRate(areaResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, areaRateResult);\n      statisticCityRate(areaResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, areaRateResult);\n      statisticCityRate(areaResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, areaRateResult);\n      statisticCityRate(areaResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, areaRateResult);\n      statisticCityRate(areaResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, areaRateResult);\n      areaResult.rateResult = areaRateResult;\n      this.setState({\n        areaData: {\n          periodNewAddedData: formatToAreaTable(areaResult.periodNewAddedResult),\n          thisYearBeforePeriodData: formatToAreaTable(areaResult.thisYearBeforePeriodResult),\n          thisYearBeforePeriodTotalData: formatToAreaTable(areaResult.thisYearBeforePeriodTotalResult),\n          thisYearTotalData: formatToAreaTable(areaResult.thisYearTotalResult),\n          lastYearBeforePeriodData: formatToAreaTable(areaResult.lastYearBeforePeriodResult),\n          lastYearBeforePeriodTotalData: formatToAreaTable(areaResult.lastYearBeforePeriodTotalResult),\n          beforePeriodNeedHandleData: formatToAreaTable(areaResult.beforePeriodNeedHandleResult),\n          periodTotalData: formatToAreaTable(areaResult.periodTotalResult),\n          rateData: formatToAreaTateTable(areaResult.rateResult)\n        }\n      });\n\n      // 统计城市\n      for (let cityName in allCityResult) {\n        this.setState((state) => ({\n          cityData: {\n            periodNewAddedData:  [...state.cityData.periodNewAddedData,\n              ...formatCityData(allCityResult[cityName].periodNewAddedResult, cityName)],\n            thisYearBeforePeriodData: [...state.cityData.thisYearBeforePeriodData,\n              ...formatCityData(allCityResult[cityName].thisYearBeforePeriodResult, cityName)],\n            thisYearBeforePeriodTotalData: [...state.cityData.thisYearBeforePeriodTotalData,\n              ...formatCityData(allCityResult[cityName].thisYearBeforePeriodTotalResult, cityName)],\n            thisYearTotalData: [...state.cityData.thisYearTotalData,\n              ...formatCityData(allCityResult[cityName].thisYearTotalResult, cityName)],\n            lastYearBeforePeriodData: [...state.cityData.lastYearBeforePeriodData,\n              ...formatCityData(allCityResult[cityName].lastYearBeforePeriodResult, cityName)],\n            lastYearBeforePeriodTotalData: [...state.cityData.lastYearBeforePeriodTotalData,\n              ...formatCityData(allCityResult[cityName].lastYearBeforePeriodTotalResult, cityName)],\n            beforePeriodNeedHandleData: [...state.cityData.beforePeriodNeedHandleData,\n              ...formatCityData(allCityResult[cityName].beforePeriodNeedHandleResult, cityName)],\n            periodTotalData: [...state.cityData.periodTotalData,\n              ...formatCityData(allCityResult[cityName].periodTotalResult, cityName)],\n            rateData: [...state.cityData.rateData,\n              ...formatToCityRateTable(allCityResult[cityName].rateResult, cityName)],\n            cities: [...state.cityData.cities, cityName]\n          }\n        }));\n      }\n\n      // 统计项目\n      this.setState({\n        projectData: allProjectResult\n      });\n\n      // 统计分期\n      this.setState( {\n        stageData: allStageResult\n      });\n\n      // 画图\n      // 截至本年度统计周期受理累计\n      let cityTotalAcceptData = [];\n      // 城市总体关闭率\n      let cityOverallCloseRateData = [];\n      // 城市剩余未关\n      let cityOpenData = [];\n      // 城市新增受理\n      let cityNewAddedAcceptData = [];\n      // 城市新增关闭率\n      let cityNewAddedCloseRateData = [];\n      // 各城市需处理受理\n      let cityNeedHandleAcceptData = [];\n      // 各城市需处理及时关闭率\n      let cityNeedHandleCloseOnTimeRateData = [];\n      // 各城市需处理总体关闭率\n      let cityNeedHandleCloseRateData = [];\n      // 城市已关平均处理时长\n      let cityCloseAverageHandleTimeData = [];\n      // 城市剩余未关平均处理时长\n      let cityOpenAverageHandleTimeData = [];\n\n      console.log(allCityResult);\n      // 各城市分类已关闭平均处理时长\n      let citySecondCategoryCloseAverageHandleTimeData = {};\n      let newAddedCities = [];\n      for (let cityName in allCityResult) {\n        cityTotalAcceptData = [\n          ...cityTotalAcceptData,\n          {\n            name: cityName,\n            value: allCityResult[cityName].periodTotalResult[KEY_TICKET_TOTAL][TICKET_ACCEPT] \n          }\n        ];\n        cityOverallCloseRateData = [\n          ...cityOverallCloseRateData,\n          {\n            name: cityName,\n            value: allCityResult[cityName].rateResult[KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n          }\n        ];\n        cityOpenData = [\n          ...cityOpenData,\n          { \n            name: cityName,\n            value: allCityResult[cityName].periodTotalResult[KEY_TICKET_TOTAL][TICKET_OPEN] \n          }\n        ];\n\n        cityNewAddedAcceptData = [\n          ...cityNewAddedAcceptData, {\n            name: cityName,\n            value: allCityResult[cityName].periodNewAddedResult[KEY_TICKET_TOTAL][TICKET_ACCEPT]\n          }\n        ];\n        cityNewAddedCloseRateData = [\n          ...cityNewAddedCloseRateData, {\n            name: cityName,\n            value: allCityResult[cityName].rateResult[KEY_TICKET_TOTAL][NEW_ADD_CLOSE_RATE]\n          }\n        ];\n        cityNeedHandleAcceptData = [\n          ...cityNeedHandleAcceptData, {\n            name: cityName,\n            value: allCityResult[cityName].beforePeriodNeedHandleResult[KEY_TICKET_TOTAL][TICKET_ACCEPT]\n          }\n        ];\n        cityNeedHandleCloseOnTimeRateData = [\n          ...cityNeedHandleCloseOnTimeRateData, {\n            name: cityName,\n            value: allCityResult[cityName].rateResult[KEY_TICKET_TOTAL][CLOSE_ON_TIME_RATE]\n          }\n        ];\n        cityNeedHandleCloseRateData = [\n          ...cityNeedHandleCloseRateData, {\n            name: cityName,\n            value: allCityResult[cityName].rateResult[KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n          }\n        ];\n        cityCloseAverageHandleTimeData = [\n          ...cityCloseAverageHandleTimeData,\n          {\n            name: cityName,\n            value: allCityResult[cityName].periodNewAddedResult[KEY_TICKET_TOTAL][TICKET_CLOSE_PROCESS_TIME]\n          }\n        ];\n        cityOpenAverageHandleTimeData = [\n          ...cityOpenAverageHandleTimeData,\n          {\n            name: cityName,\n            value:  allCityResult[cityName].beforePeriodNeedHandleResult[KEY_TICKET_TOTAL][TICKET_OPEN_PROCESS_TIME]\n          }\n        ];\n        newAddedCities = [...newAddedCities, cityName];\n        citySecondCategoryCloseAverageHandleTimeData[cityName] = [];\n        for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n          citySecondCategoryCloseAverageHandleTimeData[cityName] = [\n            ...citySecondCategoryCloseAverageHandleTimeData[cityName], {\n              name: secondCategory,\n              value: allCityResult[cityName].periodNewAddedResult[secondCategory][TICKET_CLOSE_PROCESS_TIME]\n            }\n          ];\n        }\n      }\n      this.setState({\n        cityTotalAcceptData,\n        cityOverallCloseRateData,\n        cityOpenData,\n        cityNewAddedAcceptData,\n        cityNewAddedCloseRateData,\n        cityNeedHandleAcceptData,\n        cityNeedHandleCloseOnTimeRateData,\n        cityNeedHandleCloseRateData,\n        cityCloseAverageHandleTimeData,\n        cityOpenAverageHandleTimeData,\n        citySecondCategoryCloseAverageHandleTimeData,\n        newAddedCities\n      });\n\n      // 二级分类剩余未关\n      let secondCategoryOpenData = [];\n      // 二级分类新增受理\n      let secondCategoryNewAddedAcceptData = [];\n      // 二级分类已关闭平均处理时长\n      let secondCategoryCloseAverageHandleTimeData = [];\n      // 二级分类剩余未关平均处理时长\n      let secondCategoryOpenAverageHandleTimeData = [];\n      for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n        secondCategoryOpenData = [...secondCategoryOpenData, {\n          name: secondCategory,\n          value: areaResult.periodTotalResult[secondCategory][TICKET_OPEN]\n        }];\n        secondCategoryNewAddedAcceptData = [\n          ...secondCategoryNewAddedAcceptData,\n          {\n            name: secondCategory,\n            value: areaResult.periodNewAddedResult[secondCategory][TICKET_ACCEPT]\n          }\n        ];\n        secondCategoryCloseAverageHandleTimeData = [\n          ...secondCategoryCloseAverageHandleTimeData,\n          {\n            name: secondCategory,\n            value: areaResult.periodNewAddedResult[secondCategory][TICKET_CLOSE_PROCESS_TIME]\n          }\n        ];\n        secondCategoryOpenAverageHandleTimeData = [\n          ...secondCategoryOpenAverageHandleTimeData,\n          {\n            name: secondCategory,\n            value: areaResult.periodNewAddedResult[secondCategory][TICKET_OPEN_PROCESS_TIME]\n          }\n        ]\n      }\n      this.setState({\n        secondCategoryOpenData,\n        secondCategoryNewAddedAcceptData,\n        secondCategoryCloseAverageHandleTimeData,\n        secondCategoryOpenAverageHandleTimeData\n      });\n\n      // 项目受理累计\n      let projectTotalAcceptData = [];\n      // 项目总体关闭率\n      let projectOverallCloseRateData = [];\n      // 项目新增受理\n      let projectNewAddedAcceptData = [];\n      // 项目新增关闭率\n      let projectNewAddedCloseRateData = [];\n      let projects = [];\n      for (let projectName in allProjectResult.periodTotalResult) {\n        projects = [...projects, projectName];\n        let ticketAccept = allProjectResult.periodTotalResult[projectName][KEY_TICKET_TOTAL][TICKET_ACCEPT];\n        projectTotalAcceptData = [\n          ...projectTotalAcceptData,\n          { name: projectName, value: ticketAccept }\n        ];\n        projectOverallCloseRateData = [\n          ...projectOverallCloseRateData,\n          {\n            name: projectName,\n            value: allProjectResult.rateResult[projectName][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n          }\n        ];\n       \n      }\n\n      // 项目需处理受理\n      let projectNeedHandleAcceptData = [];\n      let projectNeedHandleCloseRateData = [];\n      let projectNeedHandleCloseOnTimeRateData = [];\n      let needHandleProjects = [];\n      for (let projectName in allProjectResult.beforePeriodNeedHandleResult) {\n        projectNeedHandleAcceptData = [\n          ...projectNeedHandleAcceptData, {\n            name: projectName,\n            value: allProjectResult.beforePeriodNeedHandleResult[projectName][KEY_TICKET_TOTAL][TICKET_ACCEPT]\n          }\n        ];\n        projectNeedHandleCloseRateData = [\n          ...projectNeedHandleCloseRateData, {\n            name: projectName,\n            value: allProjectResult.rateResult[projectName][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n          }\n        ];\n        projectNeedHandleCloseOnTimeRateData = [\n          ...projectNeedHandleCloseOnTimeRateData, {\n            name: projectName,\n            value: allProjectResult.rateResult[projectName][KEY_TICKET_TOTAL][CLOSE_ON_TIME_RATE]\n          }\n        ];\n        needHandleProjects = [\n          ...needHandleProjects,\n          projectName\n        ];\n      }\n      this.setState({\n        projectNeedHandleAcceptData,\n        projectNeedHandleCloseRateData,\n        projectNeedHandleCloseOnTimeRateData,\n        needHandleProjects\n      })\n\n      let newAddedProjects = [];\n      for (let projectName in allProjectResult.periodNewAddedResult) {\n        newAddedProjects = [...newAddedProjects, projectName];\n        let ticketAccept = allProjectResult.periodNewAddedResult[projectName][KEY_TICKET_TOTAL][TICKET_ACCEPT];\n        projectNewAddedAcceptData = [\n          ...projectNewAddedAcceptData,\n          {\n            name: projectName,\n            value: ticketAccept\n          }\n        ];\n        projectNewAddedCloseRateData = [\n          ...projectNewAddedCloseRateData,\n          {\n            name: projectName,\n            value: allProjectResult.rateResult[projectName][KEY_TICKET_TOTAL][NEW_ADD_CLOSE_RATE]\n          }\n        ];\n      }\n\n      this.setState({\n        projectTotalAcceptData,\n        projectOverallCloseRateData,\n        projects,\n        projectNewAddedAcceptData,\n        projectNewAddedCloseRateData,\n        newAddedProjects\n      });\n\n      // 分期累计\n      let stageTotalAcceptData = [];\n      // 分期总体关闭率\n      let stageOverallCloseRateData = [];\n      let stages = [];\n      for (let stageName in allStageResult.periodTotalResult) {\n        stages = [...stages, stageName];\n        let ticketAccept = allStageResult.periodTotalResult[stageName][KEY_TICKET_TOTAL][TICKET_ACCEPT];\n        stageTotalAcceptData = [\n          ...stageTotalAcceptData,\n          { name: stageName, value: ticketAccept }\n        ];\n        stageOverallCloseRateData = [\n          ...stageOverallCloseRateData,\n          {\n            name: stageName,\n            value: allStageResult.rateResult[stageName][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n          }\n        ];\n      }\n      this.setState({\n        stageTotalAcceptData,\n        stageOverallCloseRateData,\n        stages\n      });\n\n      // 分期新增受理\n      let stageNewAddedAcceptData = [];\n      // 分期新增关闭率\n      let stageNewAddedCloseRateData = [];\n      let newAddedStages = [];\n      for (let stageName in allStageResult.periodNewAddedResult) {\n        newAddedStages = [...newAddedStages, stageName];\n        let ticketAccept = allStageResult.periodNewAddedResult[stageName][KEY_TICKET_TOTAL][TICKET_ACCEPT];\n        stageNewAddedAcceptData = [\n          ...stageNewAddedAcceptData,\n          { name: stageName, value: ticketAccept }\n        ];\n        stageNewAddedCloseRateData = [\n          ...stageNewAddedCloseRateData,\n          {\n            name: stageName,\n            value: allStageResult.rateResult[stageName][KEY_TICKET_TOTAL][NEW_ADD_CLOSE_RATE]\n          }\n        ];\n      }\n      this.setState({\n        stageNewAddedAcceptData,\n        stageNewAddedCloseRateData,\n        newAddedStages\n      });\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  // exportExcel = () => {\n  //   let header = [KEY_PROJECT_NAME, KEY_STATISTIC_ITEM, ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL];\n  //   if (this.state.newAddedData.length > 0 || this.state.thisYearBeforeStartData.length > 0 ||\n  //     this.state.thisYearBeforePeriodTotalData.length > 0 || this.state.thisYearTotalData.length > 0 ||\n  //     this.state.lastYearBeforePeriodData.length > 0 ||\n  //     this.state.lastYearBeforePeriodTotalData.length > 0 ||\n  //     this.state.beforePeriodNeedHandleData.length > 0 ||\n  //     this.state.periodTotalData.length > 0) {\n  //     let sheet1 = XLSX.utils.json_to_sheet(this.state.periodNewAddedData, {\n  //       header: header\n  //     });\n  //     let sheet2 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodData, {\n  //       header: header\n  //     });\n  //     let sheet3 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodTotalData, {\n  //       header: header\n  //     });\n  //     let sheet4 = XLSX.utils.json_to_sheet(this.state.thisYearTotalData, {\n  //       header: header\n  //     });\n  //     let sheet5 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodData, {\n  //       header: header\n  //     });\n  //     let sheet6 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodTotalData, {\n  //       header: header\n  //     });\n  //     let sheet7 = XLSX.utils.json_to_sheet(this.state.beforePeriodNeedHandleData, {\n  //       header: header\n  //     });\n  //     let sheet8 = XLSX.utils.json_to_sheet(this.state.periodTotalData, {\n  //       header: header\n  //     });\n  //     let sheet9 = XLSX.utils.json_to_sheet(this.state.rateData, {\n  //       header: header\n  //     });\n  //     let workbook = XLSX.utils.book_new();\n  //     XLSX.utils.book_append_sheet(workbook, sheet1, STATISTIC_PERIOD_ADD);\n  //     XLSX.utils.book_append_sheet(workbook, sheet2, STATISTIC_BEFORE_PERIOD_REMAIN);\n  //     XLSX.utils.book_append_sheet(workbook, sheet3, STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL);\n  //     XLSX.utils.book_append_sheet(workbook, sheet4, STATISTIC_THIS_YEAR_TOTAL);\n  //     XLSX.utils.book_append_sheet(workbook, sheet5, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN);\n  //     XLSX.utils.book_append_sheet(workbook, sheet6, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL);\n  //     XLSX.utils.book_append_sheet(workbook, sheet7, STATISTIC_BEFORE_PERIOD_NEED_HANDLE);\n  //     XLSX.utils.book_append_sheet(workbook, sheet8, STATISTIC_BEFORE_PERIOD_TOTAL);\n  //     XLSX.utils.book_append_sheet(workbook, sheet9, STATISTIC_PERIOD_RATE)\n  //     XLSX.writeFile(workbook, 'statistic-' + moment(Date.now()).format('YYYY-MM-DD-HH-MM-SS') + '.xlsx')\n  //   } else {\n  //     message.error('请先点击“开始统计”按钮进行统计！');\n  //   }\n  // }\n\n  render() {\n    const tabChart = (\n      <ChartView\n        cityTotalAcceptData={this.state.cityTotalAcceptData}\n        cityOverallCloseRateData={this.state.cityOverallCloseRateData}\n        projectTotalAcceptData={this.state.projectTotalAcceptData}\n        projectOverallCloseRateData={this.state.projectOverallCloseRateData}\n        stageTotalAcceptData={this.state.stageTotalAcceptData}\n        stageOverallCloseRateData={this.state.stageOverallCloseRateData}\n        cityOpenData={this.state.cityOpenData}\n        secondCategoryOpenData={this.state.secondCategoryOpenData}\n        cityNewAddedAcceptData={this.state.cityNewAddedAcceptData}\n        cityNewAddedCloseRateData={this.state.cityNewAddedCloseRateData}\n        secondCategoryNewAddedAcceptData={this.state.secondCategoryNewAddedAcceptData}\n        projectNewAddedAcceptData={this.state.projectNewAddedAcceptData}\n        projectNewAddedCloseRateData={this.state.projectNewAddedCloseRateData}\n        newAddedProjects={this.state.newAddedProjects}\n        stageNewAddedAcceptData={this.state.stageNewAddedAcceptData}\n        stageNewAddedCloseRateData={this.state.stageNewAddedCloseRateData}\n        newAddedStages={this.state.newAddedStages}\n        cityNeedHandleAcceptData={this.state.cityNeedHandleAcceptData}\n        cityNeedHandleCloseOnTimeRateData={this.state.cityNeedHandleCloseOnTimeRateData}\n        cityNeedHandleCloseRateData={this.state.cityNeedHandleCloseRateData}\n        projectNeedHandleAcceptData={this.state.projectNeedHandleAcceptData}\n        projectNeedHandleCloseRateData={this.state.projectNeedHandleCloseRateData}\n        projectNeedHandleCloseOnTimeRateData={this.state.projectNeedHandleCloseOnTimeRateData}\n        needHandleProjects={this.state.needHandleProjects}\n        cityCloseAverageHandleTimeData={this.state.cityCloseAverageHandleTimeData}\n        cityOpenAverageHandleTimeData={this.state.cityOpenAverageHandleTimeData}\n        citySecondCategoryCloseAverageHandleTimeData={this.state.citySecondCategoryCloseAverageHandleTimeData}\n        secondCategoryOpenAverageHandleTimeData={this.state.secondCategoryOpenAverageHandleTimeData}\n        newAddedCities={this.state.newAddedCities}\n        cities={this.state.cityData.cities}\n        projects={this.state.projects}\n        stages={this.state.stages}\n      />\n    );\n\n    const tabArea = (\n      <AreaView\n        periodNewAddedData={this.state.areaData.periodNewAddedData}\n        thisYearBeforePeriodData={this.state.areaData.thisYearBeforePeriodData}\n        thisYearBeforePeriodTotalData={this.state.areaData.thisYearBeforePeriodTotalData}\n        thisYearTotalData={this.state.areaData.thisYearTotalData}\n        lastYearBeforePeriodData={this.state.areaData.lastYearBeforePeriodData}\n        lastYearBeforePeriodTotalData={this.state.areaData.lastYearBeforePeriodTotalData}\n        beforePeriodNeedHandleData={this.state.areaData.beforePeriodNeedHandleData}\n        periodTotalData={this.state.areaData.periodTotalData}\n        rateData={this.state.areaData.rateData}\n      />\n    );\n\n    const tabCity = (\n      <CityView\n        periodNewAddedData={this.state.cityData.periodNewAddedData}\n        thisYearBeforePeriodData={this.state.cityData.thisYearBeforePeriodData}\n        thisYearBeforePeriodTotalData={this.state.cityData.thisYearBeforePeriodTotalData}\n        thisYearTotalData={this.state.cityData.thisYearTotalData}\n        lastYearBeforePeriodData={this.state.cityData.lastYearBeforePeriodData}\n        lastYearBeforePeriodTotalData={this.state.cityData.lastYearBeforePeriodTotalData}\n        beforePeriodNeedHandleData={this.state.cityData.beforePeriodNeedHandleData}\n        periodTotalData={this.state.cityData.periodTotalData}\n        rateData={this.state.cityData.rateData}\n        cities={this.state.cityData.cities}\n        cityOpenData={this.state.cityData.cityOpenData}\n        secondCategoryOpenData={this.state.secondCategoryOpenData}\n      />\n    );\n\n    const tabProject = (\n      <ProjectView\n        data={this.state.projectData}\n      />\n    );\n\n    const tabStage = (\n      <ProjectView\n        data={this.state.stageData}\n      />\n    );\n \n    return (\n      <LocaleProvider locale={zh_CN}>\n        <div>\n          <h2 className=\"text--center heading\">统计辅助工具</h2>\n          <DataForm\n            onStart={this.start}\n            onExport={this.exportExcel}\n            loading={this.state.loading}\n          />\n          <Row style={{ margin: '40px 0' }}>\n            <Col span={22} offset={1}>\n              <Tabs type=\"card\">\n                <Tabs.TabPane tab=\"统计图\" key=\"统计图\">{tabChart}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"大区\" key=\"大区\">{tabArea}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"城市\" key=\"城市\">{tabCity}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"项目\" key=\"项目\">{tabProject}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"分期\" key=\"分期\">{tabStage}</Tabs.TabPane>\n              </Tabs>\n            </Col>\n          </Row>\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}