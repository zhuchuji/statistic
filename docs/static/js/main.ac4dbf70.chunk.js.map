{"version":3,"sources":["components/DataForm.js","constants.js","components/ResultTable.js","components/ResultChart.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startDate","Date","set","hour","minute","second","endDate","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","toConsumableArray","concat","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","style","margin","onExport","React","Component","defaultPorps","WrapDataForm","create","TICKET_SYSTEM_COUNT","TICKET_ACCEPT","TICKET_OPEN","TICKET_VALIDATE","TICKET_PAUSE","TICKET_INVALID","TICKET_CLOSE","TICKET_CLOSE_NORMAL","TICKET_CLOSE_ABNORMAL","TICKET_CLOSE_ON_TIME","TICKET_RESPONSE_IN_30_MIN","TICKET_RESPONSE_IN_30_HOUR","TICKET_CLOSE_PROCESS_TIME","TICKET_OPEN_PROCESS_TIME","DEFAULT_STATISTIC_ITEMS","KEY_REPORT_TIME","KEY_PROJECT_NAME","KEY_SECOND_CATEGORY","KEY_TICKET_STATUS","KEY_IS_PROCESS_EXCCED","KEY_FIRST_RESPONSE_TIME","KEY_PROCESS_TIME","KEY_CLOSE_TIME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","DEFAULT_SECOND_CATEGORIES","STATISTIC_PERIOD_ADD","STATISTIC_BEFORE_PERIOD_REMAIN","STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_THIS_YEAR_TOTAL","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_BEFORE_PERIOD_NEED_HANDLE","STATISTIC_BEFORE_PERIOD_TOTAL","ResultTable","data","filteredProjects","projectColumn","table","Column","dataIndex","title","width","key","otherColumns","map","item","currentPageData","dataSource","filter","length","pagination","pageSize","scroll","y","size","defaultProps","ResultChart","filterProjectName","projectName","sub","match","substring","parseTime","timeString","time","day","min","window","parseInt","TICKET_STATUS_IN_PROGRESS","TICKET_STATUS_PAUSE","TICKET_STATUS_VALIDATE","TICKET_STATUS_CLOSE","TICKET_STATUS_ABNORMAL_CLOSE","TICKET_STATUS_INVALID","NO","RATE_STATISTIC_ITEMS","NEW_ADD_CLOSE_RATE","REMAIN_CLOSE_RATE","OVERALL_CLOSE_RATE","RESPONSE_ON_TIME_RATE","CLOSE_ON_TIME_RATE","TOTAL_OVERALL_CLOSE_RATE","initProjectRate","_arr","_i","secondCategory","_i2","itemName","initProject","_arr2","_i3","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","return","isInProgress","ticketStatus","statisticRate","statisticMap","statisticItem","rateMap","_arr3","_i4","toFixed","formatToTable","tableData","rowKey","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","rowData","_arr4","_i5","push","formatToRateTable","_arr5","_i6","_arr6","_i7","App","start","fileReader","FileReader","readFile","onload","event","workbook","XLSX","read","target","result","sheet","Sheets","SheetNames","utils","sheet_to_json","blankrows","readAsBinaryString","readExcels","allProjects","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","projects","newAddedResult","closeTimeStart","closeTimeEnd","dataMap","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","ticket","ticketStatistic","ticketCloseTime","moment","_parseTime","_parseTime2","_parseTime3","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","ticketCloseProcessTime","ticketCloseCount","Number","ticketOpenProcessTime","ticketOpenCount","statistic","reportTime","newAddedData","yearStartDate","month","date","thisYearbeforeStartDateTickets","thisYearBeforeStartDateResult","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_parseTime4","_parseTime5","_parseTime6","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","statisticThisYearBeforeStartDateTickets","thisYearBeforeStartData","thisYearBeforeStartDateTotalResult","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","statisticThisYearBeforeStartDateTotalTickets","thisYearBeforeStartTotalData","thisYearTotalResult","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_parseTime13","_parseTime14","_parseTime15","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","statisticThisYearTotalTickets","thisYearTotalData","lastYearBeforePeriodTickets","lastYearBeforePeriodResult","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_parseTime7","_parseTime8","_parseTime9","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","statisticLastYearBeforePeriodTickets","lastYearBeforePeriodData","lastYearBeforePeriodTotalResult","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","_parseTime10","_parseTime11","_parseTime12","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","statisticLastYearBeforePeriodTotalTickets","lastYearBeforePeriodTotalData","beforePeriodNeedHandleResult","forEach","_arr7","_i8","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","beforePeriodNeedHandleData","periodTotal","_arr8","_i9","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","periodTotalData","periodPercentResult","rateResult","rateData","exportExcel","header","sheet1","json_to_sheet","sheet2","sheet3","sheet4","sheet5","sheet6","sheet7","sheet8","book_new","book_append_sheet","writeFile","now","error","changeProjects","options","locale_provider","locale","zh_CN","className","components_DataForm","es_select","mode","placeholder","onChange","Option","components_ResultTable","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ac4dbf70.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {},\n    onExport: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func,\n    onExport: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startDate = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endDate = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startDate, endDate);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              { \n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }   \n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在统计...': '开始统计'\n              }\n            </Button>\n            <Button style={{ margin: '0 20px' }} onClick={this.props.onExport}>导出Excel表格</Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '判定无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关平均处理时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '剩余未关平均处理时长（天）';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_PERCENT = '本年度统计周期内';","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ResultTable(props) {\r\n  const { data, filteredProjects } = props;\r\n\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title={KEY_PROJECT_NAME}\r\n      width={150}\r\n      key={KEY_PROJECT_NAME}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      width={150}\r\n      key={item}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={data.filter(item => {\r\n        return filteredProjects.length > 0 ? filteredProjects.indexOf(item[KEY_PROJECT_NAME]) != -1 : true;\r\n      })}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nResultTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ResultTable;","import React from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\n\r\nfunction ResultChart(props) {\r\n  const data = [\r\n    {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\r\n    {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\r\n    {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\r\n    {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\r\n    {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\r\n    {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\r\n    {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\r\n  ];\r\n  return (\r\n    <BarChart width={600} height={300} data={data}>\r\n       <CartesianGrid strokeDasharray=\"3 3\"/>\r\n       <XAxis dataKey=\"name\"/>\r\n       <YAxis/>\r\n       <Tooltip/>\r\n       <Legend />\r\n       <Bar dataKey=\"pv\" fill=\"#8884d8\" />\r\n       <Bar dataKey=\"uv\" fill=\"#82ca9d\" />\r\n    </BarChart>\r\n  );\r\n}\r\n\r\nexport default ResultChart;\r\n","export function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|\\（.*?\\）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport DataForm from './components/DataForm';\nimport ResultTable from './components/ResultTable';\nimport ResultChart from './components/ResultChart';\nimport XLSX from 'xlsx';\nimport { Row, Col, message, LocaleProvider, Select } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  TICKET_SYSTEM_COUNT,\n  TICKET_ACCEPT,\n  TICKET_OPEN,\n  TICKET_VALIDATE,\n  TICKET_PAUSE,\n  TICKET_INVALID,\n  TICKET_CLOSE,\n  TICKET_CLOSE_NORMAL,\n  TICKET_CLOSE_ABNORMAL,\n  TICKET_CLOSE_ON_TIME,\n  TICKET_RESPONSE_IN_30_MIN,\n  TICKET_RESPONSE_IN_30_HOUR,\n  TICKET_CLOSE_PROCESS_TIME,\n  TICKET_OPEN_PROCESS_TIME,\n  DEFAULT_STATISTIC_ITEMS,\n  KEY_REPORT_TIME,\n  KEY_PROJECT_NAME,\n  KEY_SECOND_CATEGORY,\n  KEY_TICKET_STATUS,\n  KEY_IS_PROCESS_EXCCED,\n  KEY_FIRST_RESPONSE_TIME,\n  KEY_PROCESS_TIME,\n  KEY_CLOSE_TIME,\n  DEFAULT_SECOND_CATEGORIES,\n  KEY_STATISTIC_ITEM,\n  KEY_TICKET_TOTAL,\n  STATISTIC_PERIOD_ADD,\n  STATISTIC_BEFORE_PERIOD_REMAIN,\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_THIS_YEAR_TOTAL,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\n  STATISTIC_BEFORE_PERIOD_TOTAL,\n  STATISTIC_PERIOD_PERCENT\n} from './constants';\n\nimport {\n  filterProjectName,\n  parseTime\n} from './utils';\n\n// ticket status\nconst TICKET_STATUS_IN_PROGRESS = '处理中';\nconst TICKET_STATUS_PAUSE = '暂停处理';\nconst TICKET_STATUS_VALIDATE = '待复验';\nconst TICKET_STATUS_CLOSE = '已关闭';\nconst TICKET_STATUS_ABNORMAL_CLOSE = '非正常关闭';\nconst TICKET_STATUS_INVALID = '判定无效';\n\nconst IN_PROGRESS_TICKET_TOTAL_HANDLE_TIME = '未关闭处理时长总数';\n\nconst YES = '是';\nconst NO = '否';\n\nconst RATE_STATISTIC_ITEMS = [\n  '遗留关闭率',\n  '新增关闭率',\n  '总体关闭率',\n  '响应及时率',\n  '响应及时率',\n  '累计总体关闭率'\n];\n\nconst NEW_ADD_CLOSE_RATE = '新增关闭率';\nconst REMAIN_CLOSE_RATE = '遗留关闭率';\nconst OVERALL_CLOSE_RATE = '总体关闭率';\nconst RESPONSE_ON_TIME_RATE = '响应及时率';\nconst CLOSE_ON_TIME_RATE = '响应及时率';\nconst TOTAL_OVERALL_CLOSE_RATE = '累计总体关闭率';\n\nfunction initProjectRate() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of RATE_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction initProject() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of DEFAULT_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction isInProgress(ticketStatus) {\n  return ticketStatus.indexOf(TICKET_STATUS_IN_PROGRESS) === 0;\n}\n\n// 统计周期内新增\nfunction statistic(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 统计周期前遗留\nfunction statisticThisYearBeforeStartDateTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 本年度统计周期前遗留累计\nfunction statisticThisYearBeforeStartDateTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n  }\n\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticThisYearTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if (((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) &&\n      ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticRate(statisticMap, statisticItem, rateMap) {\n  for (let projectName in statisticMap) {\n    if (rateMap[projectName] == null) {\n      rateMap[projectName] = initProjectRate();\n    }\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      if (statisticItem === NEW_ADD_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n          statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === REMAIN_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n          statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n          statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE_ON_TIME] /\n          statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n          statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      }\n    }\n  }\n}\n\nfunction readExcels(fileList) {\n  return new Promise((resolve, reject) => {\n    let fileReader = new FileReader();\n    let data = [];\n\n    let readFile = (index) => {\n      if (index < fileList.length) {\n        fileReader.onload = (event) => {\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\n          data = data.concat(XLSX.utils.sheet_to_json(sheet, { blankrows: false }));\n          readFile(index + 1);\n        }\n        fileReader.readAsBinaryString(fileList[index]);\n      } else {\n        resolve(data);\n      }\n    };\n    readFile(0);\n  });\n}\n\nfunction formatToTable(data) {\n  let tableData = [];\n  var rowKey = 0;\n  for (let projectName in data) {\n    for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n      let rowData = {};\n      rowKey++;\n      rowData.key = rowKey;\n      rowData[KEY_PROJECT_NAME] = projectName;\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\n      }\n      tableData.push(rowData);\n    }\n  }\n  return tableData;\n}\n\nfunction formatToRateTable(data) {\n  let tableData = [];\n  var rowKey = 0;\n  for (let projectName in data) {\n    for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\n      RESPONSE_ON_TIME_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\n      let rowData = {};\n      rowKey++;\n      rowData.key = rowKey;\n      rowData[KEY_PROJECT_NAME] = projectName;\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\n      }\n      tableData.push(rowData);\n    }\n  }\n  return tableData;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newAddedData: [],\n      thisYearBeforeStartData: [],\n      thisYearBeforeStartTotalData: [],\n      lastYearBeforePeriodData: [],\n      lastYearBeforePeriodTotalData: [],\n      beforePeriodNeedHandleData: [],\n      thisYearTotalData: [],\n      periodTotalData: [],\n      rateData: [],\n      projects: [],\n      filteredProjects: [],\n      loading: false\n    };\n  }\n\n  start = (fileList, startDate, endDate) => {\n    this.setState({ loading: true });\n    readExcels(fileList).then((data) => {\n      // get all projects\n      let allProjects = [];\n      for (let item of data) {\n        let projectName = filterProjectName(item[KEY_PROJECT_NAME]);\n        if (allProjects.indexOf(projectName) === -1) {\n          allProjects.push(projectName);\n        }\n      }\n      this.setState({\n        projects: allProjects\n      });\n\n      let newAddedTickets = data.filter((item) => {\n        let reportTime = moment(item[KEY_REPORT_TIME]);\n        let secondCategory = item[KEY_SECOND_CATEGORY];\n        return secondCategory != null && reportTime >= startDate && reportTime <= endDate;\n      });\n\n      let newAddedResult = statistic(newAddedTickets, startDate, endDate);\n\n      this.setState({\n        newAddedData: formatToTable(newAddedResult)\n      });\n\n      let yearStartDate = moment(startDate).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n      let thisYearbeforeStartDateTickets = data.filter((item) => {\n        let reportTime = moment(item[KEY_REPORT_TIME]);\n        let secondCategory = item[KEY_SECOND_CATEGORY];\n        return secondCategory != null && reportTime < startDate && reportTime >= yearStartDate;\n      });\n\n      let thisYearBeforeStartDateResult = statisticThisYearBeforeStartDateTickets(thisYearbeforeStartDateTickets, startDate, endDate);\n      this.setState({\n        thisYearBeforeStartData: formatToTable(thisYearBeforeStartDateResult)\n      });\n\n      let thisYearBeforeStartDateTotalResult = statisticThisYearBeforeStartDateTotalTickets(thisYearbeforeStartDateTickets);\n      this.setState({\n        thisYearBeforeStartTotalData: formatToTable(thisYearBeforeStartDateTotalResult)\n      });\n\n      let thisYearTotalTickets = data.filter((item) => {\n        let reportTime = moment(item[KEY_REPORT_TIME]);\n        let secondCategory = item[KEY_SECOND_CATEGORY];\n        return secondCategory != null && reportTime <= endDate && reportTime >= yearStartDate;\n      });\n      let thisYearTotalResult = statisticThisYearTotalTickets(thisYearTotalTickets, yearStartDate, endDate);\n      this.setState({\n        thisYearTotalData: formatToTable(thisYearTotalResult)\n      });\n\n      let lastYearBeforePeriodTickets = data.filter((item) => {\n        let reportTime = moment(item[KEY_REPORT_TIME]);\n        let secondCategory = item[KEY_SECOND_CATEGORY];\n        return secondCategory != null && reportTime < yearStartDate;\n      });\n      let lastYearBeforePeriodResult = statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets, startDate, endDate);\n      this.setState({\n        lastYearBeforePeriodData: formatToTable(lastYearBeforePeriodResult)\n      });\n\n      let lastYearBeforePeriodTotalResult = statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets, yearStartDate, endDate);\n      this.setState({\n        lastYearBeforePeriodTotalData: formatToTable(lastYearBeforePeriodTotalResult)\n      });\n\n      let beforePeriodNeedHandleResult = {};\n      [newAddedResult, thisYearBeforeStartDateResult, lastYearBeforePeriodResult].forEach(function (result) {\n        for (let projectName in result) {\n          if (beforePeriodNeedHandleResult[projectName] == null) {\n            beforePeriodNeedHandleResult[projectName] = initProject();\n          }\n          for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n            for (let item of DEFAULT_STATISTIC_ITEMS) {\n              if (item === TICKET_CLOSE_PROCESS_TIME) {\n                let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n                let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n                beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n                  ticketCloseCount * ticketCloseProcessTime;\n              } else if (item === TICKET_OPEN_PROCESS_TIME) {\n                let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n                let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n                beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n                  ticketOpenCount * ticketOpenProcessTime;\n              }\n              else {\n                beforePeriodNeedHandleResult[projectName][secondCategory][item] +=\n                  result[projectName][secondCategory][item];\n              }\n            }\n          }\n        }\n      });\n      // get average process time\n      for (let projectName in beforePeriodNeedHandleResult) {\n        for (let secondCategory in beforePeriodNeedHandleResult[projectName]) {\n          let ticketCloseProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n          let ticketCloseCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE];\n          beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n            ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n          let ticketOpenProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n          let ticketOpenCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN];\n          beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n            ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n        }\n      }\n      this.setState({\n        beforePeriodNeedHandleData: formatToTable(beforePeriodNeedHandleResult)\n      });\n\n      let periodTotal = {};\n      [lastYearBeforePeriodTotalResult, thisYearTotalResult].forEach(function (result) {\n        for (let projectName in result) {\n          if (periodTotal[projectName] == null) {\n            periodTotal[projectName] = initProject();\n          }\n          for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n            for (let item of DEFAULT_STATISTIC_ITEMS) {\n              if (item === TICKET_CLOSE_PROCESS_TIME) {\n                let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n                let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n                periodTotal[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n                  ticketCloseCount * ticketCloseProcessTime;\n              } else if (item === TICKET_OPEN_PROCESS_TIME) {\n                let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n                let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n                periodTotal[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n                  ticketOpenCount * ticketOpenProcessTime;\n              }\n              else {\n                periodTotal[projectName][secondCategory][item] +=\n                  result[projectName][secondCategory][item];\n              }\n            }\n          }\n        }\n      });\n      // get average process time\n      for (let projectName in periodTotal) {\n        for (let secondCategory in periodTotal[projectName]) {\n          let ticketCloseProcessTime = periodTotal[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n          let ticketCloseCount = periodTotal[projectName][secondCategory][TICKET_CLOSE];\n          periodTotal[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n            ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n          let ticketOpenProcessTime = periodTotal[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n          let ticketOpenCount = periodTotal[projectName][secondCategory][TICKET_OPEN];\n          periodTotal[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n            ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n        }\n      }\n      this.setState({\n        periodTotalData: formatToTable(periodTotal)\n      });\n\n      let periodPercentResult = {};\n      [thisYearBeforeStartDateResult].forEach(function(result) {\n        for (let projectName in result) {\n          if (periodPercentResult[projectName] == null) {\n            periodPercentResult[projectName] = initProject();\n          }\n        }\n      });\n\n      let rateResult = {};\n      statisticRate(newAddedResult, NEW_ADD_CLOSE_RATE, rateResult);\n      statisticRate(thisYearBeforeStartDateResult, REMAIN_CLOSE_RATE, rateResult);\n      statisticRate(beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, rateResult);\n      statisticRate(thisYearBeforeStartDateResult, CLOSE_ON_TIME_RATE, rateResult);\n      statisticRate(periodTotal, TOTAL_OVERALL_CLOSE_RATE, rateResult);\n      this.setState({\n        rateData: formatToRateTable(rateResult)\n      });\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  exportExcel = () => {\n    let header = [KEY_PROJECT_NAME, KEY_STATISTIC_ITEM, ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL];\n    if (this.state.newAddedData.length > 0 || this.state.thisYearBeforeStartData.length > 0 ||\n      this.state.thisYearBeforeStartTotalData.length > 0 || this.state.thisYearTotalData.length > 0 ||\n      this.state.lastYearBeforePeriodData.length > 0 ||\n      this.state.lastYearBeforePeriodTotalData.length > 0 ||\n      this.state.beforePeriodNeedHandleData.length > 0 ||\n      this.state.periodTotalData.length > 0) {\n      let sheet1 = XLSX.utils.json_to_sheet(this.state.newAddedData, {\n        header: header\n      });\n      let sheet2 = XLSX.utils.json_to_sheet(this.state.thisYearBeforeStartData, {\n        header: header\n      });\n      let sheet3 = XLSX.utils.json_to_sheet(this.state.thisYearBeforeStartTotalData, {\n        header: header\n      });\n      let sheet4 = XLSX.utils.json_to_sheet(this.state.thisYearTotalData, {\n        header: header\n      });\n      let sheet5 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodData, {\n        header: header\n      });\n      let sheet6 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodTotalData, {\n        header: header\n      });\n      let sheet7 = XLSX.utils.json_to_sheet(this.state.beforePeriodNeedHandleData, {\n        header: header\n      });\n      let sheet8 = XLSX.utils.json_to_sheet(this.state.periodTotalData, {\n        header: header\n      });\n      let workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, sheet1, STATISTIC_PERIOD_ADD);\n      XLSX.utils.book_append_sheet(workbook, sheet2, STATISTIC_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet3, STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet4, STATISTIC_THIS_YEAR_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet5, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet6, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet7, STATISTIC_BEFORE_PERIOD_NEED_HANDLE);\n      XLSX.utils.book_append_sheet(workbook, sheet8, STATISTIC_BEFORE_PERIOD_TOTAL);\n      XLSX.writeFile(workbook, 'statistic-' + Date.now() + '.xlsx')\n    } else {\n      message.error('请先点击“开始统计”按钮进行统计！');\n    }\n  }\n\n  changeProjects = (projects, options) => {\n    this.setState({\n      filteredProjects: projects\n    })\n  }\n\n  render() {\n    return (\n      <LocaleProvider locale={zh_CN}>\n        <div>\n          <h2 className=\"text--center heading\">统计辅助工具</h2>\n          <DataForm\n            onStart={this.start}\n            onExport={this.exportExcel}\n            loading={this.state.loading}\n          />\n          <div style={{ margin: '40px 0' }}>\n            <Row>\n              <Col span={10} offset={12}>\n                <Select\n                  mode=\"multiple\"\n                  style={{ width: '100%' }}\n                  placeholder='请选择要显示的项目名称'\n                  onChange={this.changeProjects}\n                >\n                  {\n                    this.state.projects.map((projectName) => (\n                      <Select.Option key={projectName}>{projectName}</Select.Option>\n                    ))\n                  }\n                </Select>\n              </Col>\n            </Row>\n            <Row>\n              <Col span={22} offset={1}>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_PERIOD_ADD}\n                    data={this.state.newAddedData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_BEFORE_PERIOD_REMAIN}\n                    data={this.state.thisYearBeforeStartData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\n                    data={this.state.thisYearBeforeStartTotalData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_THIS_YEAR_TOTAL}\n                    data={this.state.thisYearTotalData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\n                    data={this.state.lastYearBeforePeriodData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\n                    data={this.state.lastYearBeforePeriodTotalData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\n                    data={this.state.beforePeriodNeedHandleData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_BEFORE_PERIOD_TOTAL}\n                    data={this.state.periodTotalData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_PERIOD_PERCENT}\n                    data={this.state.rateData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n              </Col>\n            </Row>\n          </div>\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}