{"version":3,"sources":["components/DataForm.js","constants.js","components/ChartView.js","components/AreaTable.js","components/AreaView.js","components/CityTable.js","components/CityView.js","components/ProjectTable.js","utils.js","components/ProjectView.js","functions/utils.js","functions/stage.js","App.js","store/actions/index.js","store/action-types.js","store/reducers/index.js","store/reducers/category.js","store/reducers/ticket-state.js","store/index.js","index.js"],"names":["DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startTime","Date","set","hour","minute","second","endTime","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","toConsumableArray","concat","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","React","Component","defaultPorps","onExport","WrapDataForm","create","TICKET_ACCEPT","TICKET_OPEN","TICKET_PAUSE","TICKET_INVALID","TICKET_CLOSE","TICKET_CLOSE_NORMAL","TICKET_CLOSE_ABNORMAL","TICKET_CLOSE_ON_TIME","TICKET_CLOSE_PROCESS_TIME","TICKET_OPEN_PROCESS_TIME","KEY_PROJECT_NAME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","KEY_CITY_NAME","DEFAULT_SECOND_CATEGORIES","NEW_ADD_CLOSE_RATE","REMAIN_CLOSE_RATE","OVERALL_CLOSE_RATE","RESPONSE_IN_30_MIN_RATE","RESPONSE_IN_30_HOUR_RATE","CLOSE_ON_TIME_RATE","TOTAL_OVERALL_CLOSE_RATE","COL_CURRENT_STATUS","COL_FIRST_CLASS","CATEGORY_UNCLASSIFY","TICKET_STATUS","CATEGORIES","STATISTIC_ITEMS","ChartView","titleConfig","left","top","textStyle","color","toolboxConfig","feature","saveAsImage","show","right","legendConfig","styles","height","citySecondCategoryCloseAverageHandleTimeSeries","newAddedCities","cityName","citySecondCategoryCloseAverageHandleTimeData","name","barMaxWidth","position","formatter","data","citySecondCategoryOpenAverageHandleTimeSeries","openAverageHandleTimeCities","citySecondCategoryOpenAverageHandleTimeData","style","margin","core_default","echarts","option","title","objectSpread","text","tooltip","trigger","axisPointer","crossStyle","toolbox","xAxis","cities","yAxis","min","max","series","cityTotalAcceptData","yAxisIndex","cityOverallCloseRateData","projects","interval","axisLabel","rotate","projectTotalAcceptData","projectOverallCloseRateData","stages","stageTotalAcceptData","stageOverallCloseRateData","radius","cityOpenData","secondCategoryOpenData","cityNewAddedAcceptData","cityNewAddedCloseRateData","newAddedProjects","projectNewAddedAcceptData","projectNewAddedCloseRateData","newAddedStages","stageNewAddedAcceptData","stageNewAddedCloseRateData","secondCategoryNewAddedAcceptData","legend","cityNeedHandleAcceptData","cityNeedHandleCloseOnTimeRateData","cityNeedHandleCloseRateData","needHandleProjects","projectNeedHandleAcceptData","projectNeedHandleCloseOnTimeRateData","projectNeedHandleCloseRateData","cityCloseAverageHandleTimeData","cityOpenAverageHandleTimeData","AreaTable","otherColumns","map","item","table","Column","dataIndex","key","width","currentPageData","dataSource","pagination","pageSize","scroll","y","size","AreaView","components_AreaTable","periodNewAddedData","thisYearBeforePeriodData","thisYearBeforePeriodTotalData","thisYearTotalData","lastYearBeforePeriodData","lastYearBeforePeriodTotalData","beforePeriodNeedHandleData","periodTotalData","rateData","CityTable","cityColumn","filteredCities","length","filter","defaultProps","CityView","filterCities","es_select","mode","onChange","city","Option","components_CityTable","ProjectTable","projectColumn","filteredProjects","formatToTable","tableData","rowKey","projectName","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","statisticItem","rowData","_arr","_i","secondCategory","push","return","formatToRateTable","_arr3","_i3","_arr4","_i4","ProjectView","filterProjects","project","components_ProjectTable","periodNewAddedResult","thisYearbeforePeriodResult","thisYearBeforePeriodTotalResult","thisYearTotalResult","lastYearBeforePeriodResult","lastYearBeforePeriodTotalResult","beforePeriodNeedHandleResult","periodTotalResult","rateResult","initStatisticItem","category","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","itemName","getCategory","ticket","statisticPeriodNewAddedTickets","tickets","closeStartTime","closeEndTime","dataMap","periodNewAddedTickets","ticketReportTime","moment","ticketCategory","ticketStatistic","ticketStatus","ticketPauseDuration","Number","ticketCloseTime","duration","diff","subtract","as","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","ticketCloseCount","ticketCloseProcessTime","toFixed","ticketOpenProcessTime","ticketOpenCount","statisticThisYearBeforePeriodTickets","thisYearbeforePeriodTickets","reportTime","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","allCategory","allTicketState","App","start","startDate","endDate","_this$props","addCategories","addTicketStates","fileReader","FileReader","readFile","onload","event","workbook","XLSX","read","target","result","sheet","Sheets","SheetNames","utils","sheet_to_json","blankrows","readAsBinaryString","readExcelData","_iteratorNormalCompletion26","_didIteratorError26","_iteratorError26","_step26","_iterator26","yearStartDate","month","date","stageData","Stage","console","log","cityData","areaData","tabChart","components_ChartView","secondCategoryOpenAverageHandleTimeData","tabArea","components_AreaView","tabCity","components_CityView","tabProject","components_ProjectView","projectData","tabStage","locale_provider","locale","zh_CN","className","components_DataForm","exportExcel","tabs","TabPane","tab","mapDispatchToProps","categories","payload","ticketStates","ConnectedApp","connect","reducer","combineReducers","arguments","action","ticketState","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e51cb1b2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {},\n    onExport: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func,\n    onExport: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startTime = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endTime = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startTime, endTime);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              {\n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在统计...': '开始统计'\n              }\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '未关时长（天）';\r\nexport const TICKET_NOT_RESPONSED = '未响应';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\nexport const KEY_CITY_NAME = '城市';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const NEW_ADD_CLOSE_RATE = '新增关闭率';\r\nexport const REMAIN_CLOSE_RATE = '遗留关闭率';\r\nexport const OVERALL_CLOSE_RATE = '总体关闭率';\r\nexport const RESPONSE_IN_30_MIN_RATE = '响应及时率（0.5h）'\r\nexport const RESPONSE_IN_30_HOUR_RATE = '响应及时率（30h）';\r\nexport const CLOSE_ON_TIME_RATE = '及时关闭率';\r\nexport const TOTAL_OVERALL_CLOSE_RATE = '累计总体关闭率';\r\n\r\nexport const RATE_STATISTIC_ITEMS = [\r\n  REMAIN_CLOSE_RATE,\r\n  NEW_ADD_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_RATE = '本年度统计周期内';\r\n\r\nexport const STAGES = [\r\n  '一期',\r\n  '二期',\r\n  '三期',\r\n  '四期',\r\n  '五期',\r\n  '六期',\r\n  '七期',\r\n  '八期',\r\n  '九期',\r\n  '十期'\r\n];\r\n\r\n\r\n// new data key\r\nexport const COL_AREA = '大区';\r\nexport const COL_CITY_COMPANY = '城市公司';\r\nexport const COL_PROJECT = '项目';\r\nexport const COL_PROJECT_STAGE = '项目分期';\r\nexport const COL_CURRENT_STATUS = '当前工单状态';\r\nexport const COL_FIRST_CLASS = '一级报事分类';\r\nexport const COL_REPORT_TIME = '报事时间';\r\nexport const COL_RESPONSE_TIME = '响应时间';\r\nexport const COL_FINISH_TIME = '实际完成时间';\r\nexport const COL_TOTAL_HANDLE_TIME = '工单总处理时长(天）';\r\nexport const COL_EXPIRE = '总时长超时预警';\r\nexport const COL_CLOSE_TIME_1 = '业主关闭时间';\r\nexport const COL_CLOSE_TIME_2 = '非正常关闭时间';\r\nexport const COL_CLOSE_TIME_3 = '强制关闭时间';\r\nexport const COL_PAUSE = '累计暂停时长';\r\nexport const COL_OVERTIME_WARN = '总时长超时预警';\r\n\r\nexport const CATEGORY_UNCLASSIFY = '未分类';\r\n\r\nexport const TICKET_STATUS = {\r\n  RESPONSED: '已响应',\r\n  SOLUTION_PREPARE: '方案制定中',\r\n  SOLUTION_APPROVE: '方案已批准',\r\n  INVALID: '无效',\r\n  CLOSED: '已关闭',\r\n  FORCE_CLOSE: '强制关闭',\r\n  CLOSE_ABNORMAL: '非正常关闭',\r\n  DISPATCHED: '已分派',\r\n  WORK_DOING: '施工中',\r\n  WORK_FINISHED: '施工完成',\r\n  DROP_IN: '已上门',\r\n  COMMENTED: '已评价',\r\n  NEW: '新建'\r\n};\r\n\r\nexport const CATEGORIES = [\r\n  '土建',\r\n  '维修-其他类',\r\n  '机电',\r\n  '室内精装',\r\n  '室内门窗及入户门',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '渗漏',\r\n  '室内电器',\r\n  '公区部分',\r\n  CATEGORY_UNCLASSIFY\r\n];\r\n\r\n// statistic items\r\nexport const STATISTIC_ITEMS = [\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_NOT_RESPONSED,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n]\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\n// import the core library.\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\n\r\n// then import echarts modules those you have used manually.\r\nimport echarts from 'echarts/lib/echarts';\r\nimport 'echarts/lib/chart/line';\r\nimport 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/chart/pie';\r\n// import 'echarts/lib/chart/scatter';\r\n// import 'echarts/lib/chart/radar';\r\n\r\n// import 'echarts/lib/chart/map';\r\n// import 'echarts/lib/chart/treemap';\r\n// import 'echarts/lib/chart/graph';\r\n// import 'echarts/lib/chart/gauge';\r\n// import 'echarts/lib/chart/funnel';\r\n// import 'echarts/lib/chart/parallel';\r\n// import 'echarts/lib/chart/sankey';\r\n// import 'echarts/lib/chart/boxplot';\r\n// import 'echarts/lib/chart/candlestick';\r\n// import 'echarts/lib/chart/effectScatter';\r\n// import 'echarts/lib/chart/lines';\r\n// import 'echarts/lib/chart/heatmap';\r\n\r\n// import 'echarts/lib/component/graphic';\r\n// import 'echarts/lib/component/grid';\r\nimport 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/tooltip';\r\n// import 'echarts/lib/component/polar';\r\n// import 'echarts/lib/component/geo';\r\n// import 'echarts/lib/component/parallel';\r\n// import 'echarts/lib/component/singleAxis';\r\n// import 'echarts/lib/component/brush';\r\n\r\nimport 'echarts/lib/component/title';\r\n\r\n// import 'echarts/lib/component/dataZoom';\r\n// import 'echarts/lib/component/visualMap';\r\n\r\n// import 'echarts/lib/component/markPoint';\r\n// import 'echarts/lib/component/markLine';\r\n// import 'echarts/lib/component/markArea';\r\n\r\n// import 'echarts/lib/component/timeline';\r\nimport 'echarts/lib/component/toolbox';\r\n// import { Rect } from 'echarts/lib/util/graphic';\r\n\r\n// import 'zrender/lib/vml/vml';\r\n\r\nimport  { DEFAULT_SECOND_CATEGORIES } from '../constants';\r\n\r\nfunction ChartView(props) {\r\n  const titleConfig = {\r\n    left: 'center',\r\n    top: 0,\r\n    textStyle: {\r\n      color: '#000000'\r\n    }\r\n  };\r\n  const toolboxConfig = {\r\n    feature: {\r\n      saveAsImage: { show: true }\r\n    },\r\n    right: 40\r\n  };\r\n  const legendConfig = {\r\n    left: 40\r\n  };\r\n  const styles = {\r\n    height: '500px',\r\n  };\r\n\r\n  let citySecondCategoryCloseAverageHandleTimeSeries = [];\r\n  let newAddedCities = [];\r\n  for (let cityName in props.citySecondCategoryCloseAverageHandleTimeData) {\r\n    newAddedCities = [\r\n      ...newAddedCities, cityName\r\n    ];\r\n    citySecondCategoryCloseAverageHandleTimeSeries = [\r\n      ...citySecondCategoryCloseAverageHandleTimeSeries,\r\n      {\r\n        name: cityName,\r\n        type: 'bar',\r\n        barMaxWidth: 20,\r\n        label: {\r\n          position: 'top',\r\n          color: '#333',\r\n          show: true,\r\n          formatter: '{c}'\r\n        },\r\n        data: props.citySecondCategoryCloseAverageHandleTimeData[cityName]\r\n      }\r\n    ];\r\n  }\r\n\r\n  let citySecondCategoryOpenAverageHandleTimeSeries = [];\r\n  let openAverageHandleTimeCities = [];\r\n  for (let cityName in props.citySecondCategoryOpenAverageHandleTimeData) {\r\n    openAverageHandleTimeCities = [\r\n      ...openAverageHandleTimeCities, cityName\r\n    ];\r\n    citySecondCategoryOpenAverageHandleTimeSeries = [\r\n      ...citySecondCategoryOpenAverageHandleTimeSeries,\r\n      {\r\n        name: cityName,\r\n        type: 'bar',\r\n        barMaxWidth: 20,\r\n        label: {\r\n          position: 'top',\r\n          color: '#333',\r\n          show: true,\r\n          formatter: '{c}'\r\n        },\r\n        data: props.citySecondCategoryOpenAverageHandleTimeData[cityName]\r\n      }\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各城市日常维修总体关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityTotalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityOverallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各项目日常维修总体关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.projects,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectTotalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectOverallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各项目分期日常维修总体关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.stages,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageTotalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageOverallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关城市分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '城市剩余未关',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.cityOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关二级分类分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '二级分类',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.secondCategoryOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各城市新增维修关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNewAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNewAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '项目新增关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.newAddedProjects,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNewAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNewAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '分期新增关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.newAddedStages,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageNewAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageNewAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '新增维修城市分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.cityNewAddedAcceptData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '新增维修二级分类分布图',\r\n              left: 'center',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.secondCategoryNewAddedAcceptData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各城市需处理关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            legend: {\r\n              data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n              ...legendConfig\r\n            },\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '需处理受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '比率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '需处理受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNeedHandleAcceptData\r\n              },\r\n              {\r\n                name: '及时关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNeedHandleCloseOnTimeRateData\r\n              },\r\n              {\r\n                name: '总体关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNeedHandleCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各项目需处理关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            legend: {\r\n              data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n              ...legendConfig\r\n            },\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.needHandleProjects,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '需处理受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '比率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '需处理受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNeedHandleAcceptData\r\n              },\r\n              {\r\n                name: '及时关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNeedHandleCloseOnTimeRateData\r\n              },\r\n              {\r\n                name: '总体关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNeedHandleCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '平均处理时长城市分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            legend: {\r\n              data: ['已关闭', '剩余未关'],\r\n              ...legendConfig\r\n            },\r\n            series: [\r\n              {\r\n                name: '已关闭',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityCloseAverageHandleTimeData\r\n              },\r\n              {\r\n                name: '剩余未关',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityOpenAverageHandleTimeData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '已关闭维修分类平均处理时长',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: DEFAULT_SECOND_CATEGORIES,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            legend: {\r\n              data: newAddedCities,\r\n              ...legendConfig\r\n            },\r\n            series: citySecondCategoryCloseAverageHandleTimeSeries\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关维修分类平均处理时长',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: DEFAULT_SECOND_CATEGORIES,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            legend: {\r\n              data: openAverageHandleTimeCities,\r\n              ...legendConfig\r\n            },\r\n            series: citySecondCategoryOpenAverageHandleTimeSeries\r\n          }}\r\n        />\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChartView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction AreaTable(props) {\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default AreaTable;\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\nimport AreaTable from './AreaTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass AreaView extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_PERIOD_ADD}\r\n            data={this.props.periodNewAddedData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n            data={this.props.thisYearBeforePeriodData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n            data={this.props.thisYearBeforePeriodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_THIS_YEAR_TOTAL}\r\n            data={this.props.thisYearTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n            data={this.props.lastYearBeforePeriodData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n            data={this.props.lastYearBeforePeriodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n            data={this.props.beforePeriodNeedHandleData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n            data={this.props.periodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_PERIOD_RATE}\r\n            data={this.props.rateData}\r\n          />\r\n        </div>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AreaView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_CITY_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction CityTable(props) {\r\n  const cityColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_CITY_NAME}\r\n      title={KEY_CITY_NAME}\r\n      key={KEY_CITY_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredCities.length > 0 ?\r\n        props.data.filter(item => props.filteredCities.indexOf(item[KEY_CITY_NAME]) != -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {cityColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nCityTable.defaultProps = {\r\n  filteredCities: []\r\n}\r\n\r\nexport default CityTable;\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport CityTable from './CityTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass CityView extends React.Component {\r\n  static defaultProps = {\r\n    cities: []\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredCities: []\r\n    }\r\n  }\r\n\r\n  filterCities = (filteredCities) => {\r\n    if (filteredCities != null && filteredCities.length > 0) {\r\n      this.setState({\r\n        filteredCities: filteredCities\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredCities: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的城市'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterCities}\r\n                >\r\n                  {\r\n                    this.props.cities.map((city) => (\r\n                      <Select.Option key={city}>{city}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={this.props.periodNewAddedData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.thisYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.thisYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={this.props.thisYearTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.lastYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.lastYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={this.props.beforePeriodNeedHandleData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={this.props.periodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={this.props.rateData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CityView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ProjectTable(props) {\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title={KEY_PROJECT_NAME}\r\n      key={KEY_PROJECT_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredProjects.length > 0 ?\r\n        props.data.filter(item => props.filteredProjects.indexOf(item[KEY_PROJECT_NAME]) !== -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nProjectTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ProjectTable;\r\n","import {\r\n  DEFAULT_STATISTIC_ITEMS,\r\n  KEY_TICKET_TOTAL,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  STAGES,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  STATISTIC_ITEMS,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  CATEGORIES\r\n} from './constants';\r\n\r\nimport XLSX from 'xlsx';\r\n\r\nexport function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|（.*?）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}\r\n\r\nexport function filterProject(projectName, reg) {\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function filterProjectStage(projectName) {\r\n  let filteredName = null;\r\n  for (let stage of STAGES) {\r\n    if (projectName.indexOf(stage) != -1) {\r\n      filteredName = projectName.substring(0, projectName.indexOf(stage));\r\n      return filteredName;\r\n    }\r\n  }\r\n  return projectName;\r\n}\r\n\r\nexport function formatToTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let projectName in data) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = projectName;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let secondCategory of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[secondCategory] = data[secondCategory][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToRateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let projectName in data) {\r\n    for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n      RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = projectName;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[secondCategory] = data[secondCategory][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function readExcelData (fileList) {\r\n  return new Promise((resolve, reject) => {\r\n    let fileReader = new FileReader();\r\n    let data = [];\r\n\r\n    let readFile = (index) => {\r\n      if (index < fileList.length) {\r\n        fileReader.onload = (event) => {\r\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\r\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\r\n          data = [...data, ...XLSX.utils.sheet_to_json(sheet, { blankrows: false })];\r\n          readFile(index + 1);\r\n        }\r\n        fileReader.readAsBinaryString(fileList[index]);\r\n      } else {\r\n        resolve(data);\r\n      }\r\n    };\r\n    readFile(0);\r\n  });\r\n}\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport ProjectTable from './ProjectTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\nimport {\r\n  formatToTable,\r\n  formatToRateTable\r\n} from '../utils';\r\n\r\nclass ProjectView extends React.Component {\r\n  static defaultProps = {\r\n    data: {}\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredProjects: []\r\n    }\r\n  }\r\n\r\n  filterProjects = (projects) => {\r\n    if (projects.length > 0) {\r\n      this.setState({\r\n        filteredProjects: projects\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredProjects: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let projects = [];\r\n    for (let item in this.props.data) {\r\n      for (let projectName in this.props.data[item]) {\r\n        if (projects.indexOf(projectName) === -1) {\r\n          projects = [...projects, projectName];\r\n        }\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的项目'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterProjects}\r\n                >\r\n                  {\r\n                    projects.map((project) => (\r\n                      <Select.Option key={project}>{project}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={formatToTable(this.props.data.periodNewAddedResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.thisYearbeforePeriodResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearBeforePeriodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={formatToTable(this.props.data.beforePeriodNeedHandleResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={formatToTable(this.props.data.periodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={formatToRateTable(this.props.data.rateResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectView;\r\n","import {\r\n  CATEGORIES,\r\n  KEY_TICKET_TOTAL,\r\n  STATISTIC_ITEMS,\r\n  COL_FIRST_CLASS,\r\n  CATEGORY_UNCLASSIFY,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM\r\n} from '../constants';\r\n\r\nexport const initStatisticItem = () => {\r\n  let map = {};\r\n  for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n    map[category] = {};\r\n    for (let itemName of STATISTIC_ITEMS) {\r\n      map[category][itemName] = 0;\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\nexport const getCategory = ticket => ticket[COL_FIRST_CLASS] || CATEGORY_UNCLASSIFY;\r\n\r\nexport const formatStageToTable = (data) => {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n","import {\r\n  COL_REPORT_TIME,\r\n  COL_OVERTIME_WARN,\r\n  COL_PROJECT_STAGE,\r\n  COL_FIRST_CLASS,\r\n  COL_CURRENT_STATUS,\r\n  COL_PAUSE,\r\n  COL_CLOSE_TIME_1,\r\n  COL_CLOSE_TIME_2,\r\n  COL_CLOSE_TIME_3,\r\n  TICKET_NOT_RESPONSED,\r\n  KEY_TICKET_TOTAL,\r\n  TICKET_STATUS,\r\n  CATEGORIES,\r\n  STATISTIC_ITEMS,\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n} from '../constants';\r\n\r\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\r\nimport moment from 'moment';\r\n\r\nimport {\r\n  initStatisticItem,\r\n  getCategory\r\n} from './utils';\r\n\r\n// 统计周期内新增\r\nexport const statisticPeriodNewAddedTickets = (tickets, startTime, endTime, closeStartTime, closeEndTime) => {\r\n  let dataMap = {};\r\n  let periodNewAddedTickets = tickets.filter(ticket => {\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    return ticketReportTime >= startTime && ticketReportTime <= endTime;\r\n  });\r\n  for (let ticket of periodNewAddedTickets) {\r\n    let name = ticket[COL_PROJECT_STAGE];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 关闭 + 剩余未关\r\n    if (ticketStatus == TICKET_STATUS.RESPONSED || ticketStatus == TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus == TICKET_STATUS.CLOSED || ticketStatus == TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus == TICKET_STATUS.DROP_IN || ticketStatus == TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus == TICKET_STATUS.SOLUTION_APPROVE || ticketStatus == TICKET_STATUS.COMMENTED ||\r\n      ticketStatus == TICKET_STATUS.WORK_DOING || ticketStatus == TICKET_STATUS.CLOSE_ABNORMAL ||\r\n      ticketStatus == TICKET_STATUS.DISPATCHED || ticketStatus == TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus == TICKET_STATUS.CLOSED || ticketStatus == TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus == TICKET_STATUS.COMMENTED || ticketStatus == TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus == TICKET_STATUS.RESPONSED || ticketStatus == TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus == TICKET_STATUS.WORK_FINISHED || ticketStatus == TICKET_STATUS.DROP_IN ||\r\n      ticketStatus == TICKET_STATUS.SOLUTION_APPROVE || ticketStatus == TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus == TICKET_STATUS.NEW) && ((ticketStatus == TICKET_STATUS.CLOSED || ticketStatus == TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus == TICKET_STATUS.COMMENTED || ticketStatus == TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(endTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus == TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus == TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus == TICKET_STATUS.DISPATCHED || TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus == TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 统计周期前遗留\r\nexport const statisticThisYearBeforePeriodTickets = (tickets, startTime, endTime, closeStartTime, closeEndTime) => {\r\n  let thisYearbeforePeriodTickets = tickets.filter((item) => {\r\n    let reportTime = moment(item[COL_REPORT_TIME]);\r\n    return reportTime >= startTime && reportTime <= endTime;\r\n  });\r\n  let dataMap = {};\r\n  for (let ticket of thisYearbeforePeriodTickets) {\r\n    let name = ticket[COL_PROJECT_STAGE];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus == TICKET_STATUS.RESPONSED || ticketStatus == TICKET_STATUS.SOLUTION_PREPARE ||\r\n       ticketStatus == TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus == TICKET_STATUS.DROP_IN ||\r\n      ticketStatus == TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus == TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus == TICKET_STATUS.DISPATCHED || ticketStatus == TICKET_STATUS.NEW) &&\r\n      ((ticketStatus == TICKET_STATUS.CLOSED ||\r\n      ticketStatus == TICKET_STATUS.FORCE_CLOSE || ticketStatus == TICKET_STATUS.CLOSE_ABNORMAL ||\r\n      ticketStatus == TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus == TICKET_STATUS.CLOSED || ticketStatus == TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus == TICKET_STATUS.COMMENTED || ticketStatus == TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus == TICKET_STATUS.RESPONSED || ticketStatus == TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus == TICKET_STATUS.WORK_FINISHED || ticketStatus == TICKET_STATUS.DROP_IN ||\r\n      ticketStatus == TICKET_STATUS.SOLUTION_APPROVE || ticketStatus == TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus == TICKET_STATUS.NEW) && ((ticketStatus == TICKET_STATUS.CLOSED || ticketStatus == TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus == TICKET_STATUS.COMMENTED || ticketStatus == TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(endTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus == TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus == TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus == TICKET_STATUS.DISPATCHED || TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus == TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 统计周期前遗留累计\r\nexport const statisticThisYearBeforePeriodTotalTickets = (tickets, startTime, endTime, closeStartTime, closeEndTime) => {\r\n  let thisYearbeforePeriodTickets = tickets.filter((item) => {\r\n    let reportTime = moment(item[COL_REPORT_TIME]);\r\n    return reportTime >= startTime && reportTime < endTime;\r\n  });\r\n  let dataMap = {};\r\n  for (let ticket of thisYearbeforePeriodTickets) {\r\n    let name = ticket[COL_PROJECT_STAGE];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus == TICKET_STATUS.RESPONSED || ticketStatus == TICKET_STATUS.SOLUTION_PREPARE ||\r\n       ticketStatus == TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus == TICKET_STATUS.DROP_IN ||\r\n      ticketStatus == TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus == TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus == TICKET_STATUS.DISPATCHED || ticketStatus == TICKET_STATUS.NEW) &&\r\n      ((ticketStatus == TICKET_STATUS.CLOSED ||\r\n      ticketStatus == TICKET_STATUS.FORCE_CLOSE || ticketStatus == TICKET_STATUS.CLOSE_ABNORMAL ||\r\n      ticketStatus == TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus == TICKET_STATUS.CLOSED || ticketStatus == TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus == TICKET_STATUS.COMMENTED || ticketStatus == TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus == TICKET_STATUS.RESPONSED || ticketStatus == TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus == TICKET_STATUS.WORK_FINISHED || ticketStatus == TICKET_STATUS.DROP_IN ||\r\n      ticketStatus == TICKET_STATUS.SOLUTION_APPROVE || ticketStatus == TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus == TICKET_STATUS.NEW) && ((ticketStatus == TICKET_STATUS.CLOSED || ticketStatus == TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus == TICKET_STATUS.COMMENTED || ticketStatus == TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(endTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus == TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus == TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus == TICKET_STATUS.DISPATCHED || TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus == TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport DataForm from './components/DataForm';\nimport ChartView from './components/ChartView';\nimport AreaView from './components/AreaView';\nimport CityView from './components/CityView';\nimport ProjectView from './components/ProjectView';\nimport { Row, Col, message, LocaleProvider, Tabs } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  TICKET_SYSTEM_COUNT,\n  TICKET_ACCEPT,\n  TICKET_OPEN,\n  TICKET_VALIDATE,\n  TICKET_PAUSE,\n  TICKET_INVALID,\n  TICKET_CLOSE,\n  TICKET_CLOSE_NORMAL,\n  TICKET_CLOSE_ABNORMAL,\n  TICKET_CLOSE_ON_TIME,\n  TICKET_RESPONSE_IN_30_MIN,\n  TICKET_RESPONSE_IN_30_HOUR,\n  TICKET_CLOSE_PROCESS_TIME,\n  TICKET_OPEN_PROCESS_TIME,\n  DEFAULT_STATISTIC_ITEMS,\n  KEY_REPORT_TIME,\n  KEY_PROJECT_NAME,\n  KEY_SECOND_CATEGORY,\n  KEY_TICKET_STATUS,\n  KEY_IS_PROCESS_EXCCED,\n  KEY_FIRST_RESPONSE_TIME,\n  KEY_PROCESS_TIME,\n  KEY_CLOSE_TIME,\n  DEFAULT_SECOND_CATEGORIES,\n  KEY_STATISTIC_ITEM,\n  KEY_TICKET_TOTAL,\n  KEY_CITY_NAME,\n  STATISTIC_PERIOD_ADD,\n  STATISTIC_BEFORE_PERIOD_REMAIN,\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_THIS_YEAR_TOTAL,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\n  STATISTIC_BEFORE_PERIOD_TOTAL,\n  STATISTIC_PERIOD_RATE,\n  STAGES,\n  NEW_ADD_CLOSE_RATE,\n  REMAIN_CLOSE_RATE,\n  OVERALL_CLOSE_RATE,\n  RESPONSE_IN_30_MIN_RATE,\n  RESPONSE_IN_30_HOUR_RATE,\n  CLOSE_ON_TIME_RATE,\n  TOTAL_OVERALL_CLOSE_RATE,\n  RATE_STATISTIC_ITEMS,\n  CATEGORY_UNCLASSIFY,\n  COL_FIRST_CLASS,\n  COL_CURRENT_STATUS\n} from './constants';\n\nimport {\n  filterProjectName,\n  parseTime,\n  filterProjectStage,\n  formatToAreaTable,\n  formatToAreaTateTable,\n  readExcelData\n} from './utils';\n\nimport { connect } from 'react-redux';\nimport { addCategories, addTicketStates } from './store/actions';\n\n// import * as Area from './functions/area';\nimport * as Stage from './functions/stage';\n\n// eslint-disable-next-line\n// import Worker from 'worker-loader!./workers/file.worker';\n\n// const worker = new Worker();\n// worker.postMessage('test');\n\n// ticket status\nconst TICKET_STATUS_IN_PROGRESS = '处理中';\nconst TICKET_STATUS_PAUSE = '暂停处理';\nconst TICKET_STATUS_VALIDATE = '待复验';\nconst TICKET_STATUS_CLOSE = '已关闭';\nconst TICKET_STATUS_ABNORMAL_CLOSE = '非正常关闭';\nconst TICKET_STATUS_INVALID = '判定无效';\n\nconst YES = '是';\nconst NO = '否';\n\nfunction initProjectRate() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of RATE_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction initProject() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of DEFAULT_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction isInProgress(ticketStatus) {\n  return ticketStatus.indexOf(TICKET_STATUS_IN_PROGRESS) === 0;\n}\n\n// 统计周期内新增\nfunction statistic(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非正常关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 统计周期前遗留\nfunction statisticThisYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 本年度统计周期前遗留累计\nfunction statisticThisYearBeforeStartDateTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n  }\n\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticThisYearTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if (((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) &&\n      ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticRate(statisticMap, statisticItem, rateMap) {\n  for (let projectName in statisticMap) {\n    if (rateMap[projectName] == null) {\n      rateMap[projectName] = initProjectRate();\n    }\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      if (statisticItem === NEW_ADD_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === REMAIN_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE_ON_TIME] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      }\n    }\n  }\n}\n\nfunction statisticCityRate(statisticMap, statisticItem, rateMap) {\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    if ( rateMap[secondCategory] == null) {\n      rateMap[secondCategory] = {};\n    }\n    if (statisticItem === NEW_ADD_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === REMAIN_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE_ON_TIME] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    }\n  }\n}\n\nlet globalRowKey = 0;\n\nfunction formatCityData(data, city) {\n  let tableData = [];\n  for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction formatToCityRateTable(data, city) {\n  let tableData = [];\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction mergeStageResult(resultArray, filterFunc) {\n  let mergeResult = {};\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      let filteredProjectName = filterFunc(projectName);\n      if (mergeResult[filteredProjectName] == null) {\n        mergeResult[filteredProjectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[filteredProjectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[filteredProjectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[filteredProjectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in mergeResult) {\n    for (let secondCategory in mergeResult[projectName]) {\n      let ticketCloseProcessTime = mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = mergeResult[projectName][secondCategory][TICKET_CLOSE];\n      mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = mergeResult[projectName][secondCategory][TICKET_OPEN];\n      mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return mergeResult;\n}\n\nfunction mergeProjectResult(resultArray) {\n  let mergeResult = initProject();\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let secondCategory in mergeResult) {\n    let ticketCloseProcessTime = mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME];\n    let ticketCloseCount = mergeResult[secondCategory][TICKET_CLOSE];\n    mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n      ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n    let ticketOpenProcessTime = mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME];\n    let ticketOpenCount = mergeResult[secondCategory][TICKET_OPEN];\n    mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] =\n      ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n  }\n\n  return mergeResult;\n}\n\n\nfunction statisticCity(data, startDate, endDate) {\n  // 统计分期\n  let periodNewAddedTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime >= startDate && reportTime <= endDate;\n  });\n  let periodNewAddedResult = statistic(periodNewAddedTickets, startDate, endDate);\n\n  let yearStartDate = moment(startDate).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n  let thisYearbeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < startDate && reportTime >= yearStartDate;\n  });\n\n  let thisYearBeforePeriodResult = statisticThisYearBeforePeriodTickets(thisYearbeforePeriodTickets,\n    startDate, endDate);\n\n  let thisYearBeforePeriodTotalResult = statisticThisYearBeforeStartDateTotalTickets(\n    thisYearbeforePeriodTickets, yearStartDate, endDate);\n\n  let thisYearTotalTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime <= endDate && reportTime >= yearStartDate;\n  });\n  let thisYearTotalResult = statisticThisYearTotalTickets(thisYearTotalTickets,\n    yearStartDate, endDate);\n\n  let lastYearBeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < yearStartDate;\n  });\n  let lastYearBeforePeriodResult = statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\n    startDate, endDate);\n\n  let lastYearBeforePeriodTotalResult = statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\n    yearStartDate, endDate);\n\n  let beforePeriodNeedHandleResult = {};\n  [periodNewAddedResult, thisYearBeforePeriodResult, lastYearBeforePeriodResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (beforePeriodNeedHandleResult[projectName] == null) {\n        beforePeriodNeedHandleResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            beforePeriodNeedHandleResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in beforePeriodNeedHandleResult) {\n    for (let secondCategory in beforePeriodNeedHandleResult[projectName]) {\n      let ticketCloseProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let periodTotalResult = {};\n  [lastYearBeforePeriodTotalResult, thisYearTotalResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (periodTotalResult[projectName] == null) {\n        periodTotalResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            periodTotalResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in periodTotalResult) {\n    for (let secondCategory in periodTotalResult[projectName]) {\n      let ticketCloseProcessTime = periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = periodTotalResult[projectName][secondCategory][TICKET_CLOSE];\n      periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = periodTotalResult[projectName][secondCategory][TICKET_OPEN];\n      periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let stageRateResult = {};\n  statisticRate(periodNewAddedResult, NEW_ADD_CLOSE_RATE, stageRateResult);\n  statisticRate(thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, stageRateResult);\n  statisticRate(periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, stageRateResult);\n\n  let stageResult = {\n    periodNewAddedResult: periodNewAddedResult,\n    thisYearBeforePeriodResult: thisYearBeforePeriodResult,\n    thisYearBeforePeriodTotalResult: thisYearBeforePeriodTotalResult,\n    lastYearBeforePeriodResult: lastYearBeforePeriodResult,\n    lastYearBeforePeriodTotalResult: lastYearBeforePeriodTotalResult,\n    beforePeriodNeedHandleResult: beforePeriodNeedHandleResult,\n    thisYearTotalResult: thisYearTotalResult,\n    periodTotalResult: periodTotalResult,\n    rateResult: stageRateResult\n  };\n\n  // 统计项目\n  let projectResult = {\n    periodNewAddedResult:  mergeStageResult([periodNewAddedResult], filterProjectStage),\n    thisYearBeforePeriodResult: mergeStageResult([thisYearBeforePeriodResult], filterProjectStage),\n    thisYearBeforePeriodTotalResult: mergeStageResult([thisYearBeforePeriodTotalResult], filterProjectStage),\n    thisYearTotalResult: mergeStageResult([thisYearTotalResult], filterProjectStage),\n    lastYearBeforePeriodResult: mergeStageResult([lastYearBeforePeriodResult], filterProjectStage),\n    lastYearBeforePeriodTotalResult: mergeStageResult([lastYearBeforePeriodTotalResult], filterProjectStage),\n    beforePeriodNeedHandleResult: mergeStageResult([beforePeriodNeedHandleResult], filterProjectStage),\n    periodTotalResult: mergeStageResult([periodTotalResult], filterProjectStage)\n  };\n  let projectRateResult = {}\n  statisticRate(projectResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, projectRateResult);\n  statisticRate(projectResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, projectRateResult);\n  projectResult.rateResult = projectRateResult;\n\n  let cityResult = {\n    periodNewAddedResult:  mergeProjectResult([projectResult.periodNewAddedResult]),\n    thisYearBeforePeriodResult: mergeProjectResult([projectResult.thisYearBeforePeriodResult]),\n    thisYearBeforePeriodTotalResult: mergeProjectResult([projectResult.thisYearBeforePeriodTotalResult]),\n    thisYearTotalResult: mergeProjectResult([projectResult.thisYearTotalResult]),\n    lastYearBeforePeriodResult: mergeProjectResult([projectResult.lastYearBeforePeriodResult]),\n    lastYearBeforePeriodTotalResult: mergeProjectResult([projectResult.lastYearBeforePeriodTotalResult]),\n    beforePeriodNeedHandleResult: mergeProjectResult([projectResult.beforePeriodNeedHandleResult]),\n    periodTotalResult: mergeProjectResult([projectResult.periodTotalResult])\n  };\n  let cityRateResult = {}\n  statisticCityRate(cityResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, cityRateResult);\n  cityResult.rateResult = cityRateResult;\n\n  let result = {\n    stageResult,\n    projectResult,\n    cityResult\n  };\n  return result;\n}\n\n// global variables\nlet allCategory = [];\nlet allTicketState = [];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityData: {\n        periodNewAddedData: [],\n        thisYearBeforePeriodData: [],\n        thisYearBeforePeriodTotalData: [],\n        thisYearTotalData: [],\n        lastYearBeforePeriodData: [],\n        lastYearBeforePeriodTotalData: [],\n        beforePeriodNeedHandleData: [],\n        periodTotalData: [],\n        rateData: [],\n        cities: []\n      },\n      areaData: {\n        periodNewAddedData: [],\n        thisYearBeforePeriodData: [],\n        thisYearBeforePeriodTotalData: [],\n        thisYearTotalData: [],\n        lastYearBeforePeriodData: [],\n        lastYearBeforePeriodTotalData: [],\n        beforePeriodNeedHandleData: [],\n        periodTotalData: [],\n        rateData: []\n      },\n      loading: false\n    };\n  }\n\n  start = (fileList, startDate, endDate) => {\n    const { addCategories, addTicketStates } = this.props;\n    this.setState({ loading: true });\n    readExcelData(fileList).then((data) => {\n      // get all categories and ticket states\n      for (let ticket of data) {\n        let category = ticket[COL_FIRST_CLASS];\n        if (category == null) {\n          category = CATEGORY_UNCLASSIFY;\n        }\n        if (allCategory.indexOf(category) === -1) {\n          allCategory = [...allCategory, category];\n        }\n        let state = ticket[COL_CURRENT_STATUS];\n        if (allTicketState.indexOf(state) === -1) {\n          allTicketState = [...allTicketState, state];\n        }\n      }\n      addCategories(allCategory);\n      addTicketStates(allTicketState);\n\n      let yearStartDate = moment(startDate).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n\n      let stageData = {\n        periodNewAddedResult: Stage.statisticPeriodNewAddedTickets(data,\n          startDate, endDate, startDate, endDate),\n        thisYearbeforePeriodResult: Stage.statisticThisYearBeforePeriodTickets(data,\n          yearStartDate, startDate, startDate, endDate)\n      }\n\n      console.log(stageData);\n\n      this.setState({\n        stageData\n      });\n      // clear previous data\n      // this.setState({\n      //   cityData: {\n      //     periodNewAddedData: [],\n      //     thisYearBeforePeriodData: [],\n      //     thisYearBeforePeriodTotalData: [],\n      //     thisYearTotalData: [],\n      //     lastYearBeforePeriodData: [],\n      //     lastYearBeforePeriodTotalData: [],\n      //     beforePeriodNeedHandleData: [],\n      //     periodTotalData: [],\n      //     rateData: [],\n      //     cities: [],\n      //     cityOpenData: []\n      //   },\n      //   projectData: {},\n      //   stageResult: {}\n      // });\n      // let allCities = [];\n      // let allCityResult = {};\n      // let allProjectResult = {};\n      // let allStageResult = {};\n      // for (let cityName in data) {\n      //   allCities.push(cityName);\n      //   let result = statisticCity(data[cityName], startDate, endDate);\n      //   allCityResult[cityName] = result.cityResult;\n      //   for (let table in result.projectResult) {\n      //     allProjectResult[table] = {\n      //       ...allProjectResult[table],\n      //       ...result.projectResult[table]\n      //     }\n      //   }\n      //   for (let table in result.stageResult) {\n      //     allStageResult[table] = {\n      //       ...allStageResult[table],\n      //       ...result.stageResult[table]\n      //     }\n      //   }\n      // }\n\n      // // 统计大区\n      // let areaResult = {\n      //   periodNewAddedResult: initProject(),\n      //   thisYearBeforePeriodResult: initProject(),\n      //   thisYearBeforePeriodTotalResult: initProject(),\n      //   thisYearTotalResult: initProject(),\n      //   lastYearBeforePeriodResult: initProject(),\n      //   lastYearBeforePeriodTotalResult: initProject(),\n      //   beforePeriodNeedHandleResult: initProject(),\n      //   periodTotalResult: initProject()\n      // };\n      // // statistic area result\n      // for (let table in areaResult) {\n      //   for (let cityName in allCityResult) {\n      //     for (let secondCategory in areaResult[table]) {\n      //       let result = allCityResult[cityName][table][secondCategory];\n      //       for (let item in result) {\n      //         if (item === TICKET_CLOSE_PROCESS_TIME) {\n      //           let ticketCloseCount = result[TICKET_CLOSE];\n      //           let ticketCloseProcessTime = result[TICKET_CLOSE_PROCESS_TIME];\n      //           areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n      //             ticketCloseCount * ticketCloseProcessTime;\n      //         } else if (item === TICKET_OPEN_PROCESS_TIME) {\n      //           let ticketOpenProcessTime = result[TICKET_OPEN_PROCESS_TIME];\n      //           let ticketOpenCount = result[TICKET_OPEN];\n      //           areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n      //             ticketOpenCount * ticketOpenProcessTime;\n      //         }\n      //         else {\n      //           areaResult[table][secondCategory][item] += result[item];\n      //         }\n      //       }\n      //     }\n      //   }\n      // }\n      // // get average process time\n      // for (let table in areaResult) {\n      //   for (let secondCategory in areaResult[table]) {\n      //     let ticketCloseProcessTime = areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      //     let ticketCloseCount = areaResult[table][secondCategory][TICKET_CLOSE];\n      //     areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n      //       ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      //     let ticketOpenProcessTime = areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      //     let ticketOpenCount = areaResult[table][secondCategory][TICKET_OPEN];\n      //     areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n      //       ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n      //   }\n      // }\n      // let areaRateResult = {}\n      // statisticCityRate(areaResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, areaRateResult);\n      // statisticCityRate(areaResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, areaRateResult);\n      // statisticCityRate(areaResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, areaRateResult);\n      // statisticCityRate(areaResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, areaRateResult);\n      // statisticCityRate(areaResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, areaRateResult);\n      // statisticCityRate(areaResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, areaRateResult);\n      // statisticCityRate(areaResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, areaRateResult);\n      // areaResult.rateResult = areaRateResult;\n      // this.setState({\n      //   areaData: {\n      //     periodNewAddedData: formatToAreaTable(areaResult.periodNewAddedResult),\n      //     thisYearBeforePeriodData: formatToAreaTable(areaResult.thisYearBeforePeriodResult),\n      //     thisYearBeforePeriodTotalData: formatToAreaTable(areaResult.thisYearBeforePeriodTotalResult),\n      //     thisYearTotalData: formatToAreaTable(areaResult.thisYearTotalResult),\n      //     lastYearBeforePeriodData: formatToAreaTable(areaResult.lastYearBeforePeriodResult),\n      //     lastYearBeforePeriodTotalData: formatToAreaTable(areaResult.lastYearBeforePeriodTotalResult),\n      //     beforePeriodNeedHandleData: formatToAreaTable(areaResult.beforePeriodNeedHandleResult),\n      //     periodTotalData: formatToAreaTable(areaResult.periodTotalResult),\n      //     rateData: formatToAreaTateTable(areaResult.rateResult)\n      //   }\n      // });\n\n      // // 统计城市\n      // for (let cityName in allCityResult) {\n      //   this.setState((state) => ({\n      //     cityData: {\n      //       periodNewAddedData:  [...state.cityData.periodNewAddedData,\n      //         ...formatCityData(allCityResult[cityName].periodNewAddedResult, cityName)],\n      //       thisYearBeforePeriodData: [...state.cityData.thisYearBeforePeriodData,\n      //         ...formatCityData(allCityResult[cityName].thisYearBeforePeriodResult, cityName)],\n      //       thisYearBeforePeriodTotalData: [...state.cityData.thisYearBeforePeriodTotalData,\n      //         ...formatCityData(allCityResult[cityName].thisYearBeforePeriodTotalResult, cityName)],\n      //       thisYearTotalData: [...state.cityData.thisYearTotalData,\n      //         ...formatCityData(allCityResult[cityName].thisYearTotalResult, cityName)],\n      //       lastYearBeforePeriodData: [...state.cityData.lastYearBeforePeriodData,\n      //         ...formatCityData(allCityResult[cityName].lastYearBeforePeriodResult, cityName)],\n      //       lastYearBeforePeriodTotalData: [...state.cityData.lastYearBeforePeriodTotalData,\n      //         ...formatCityData(allCityResult[cityName].lastYearBeforePeriodTotalResult, cityName)],\n      //       beforePeriodNeedHandleData: [...state.cityData.beforePeriodNeedHandleData,\n      //         ...formatCityData(allCityResult[cityName].beforePeriodNeedHandleResult, cityName)],\n      //       periodTotalData: [...state.cityData.periodTotalData,\n      //         ...formatCityData(allCityResult[cityName].periodTotalResult, cityName)],\n      //       rateData: [...state.cityData.rateData,\n      //         ...formatToCityRateTable(allCityResult[cityName].rateResult, cityName)],\n      //       cities: [...state.cityData.cities, cityName]\n      //     }\n      //   }));\n      // }\n\n      // // 统计项目\n      // this.setState({\n      //   projectData: allProjectResult\n      // });\n\n      // // 统计分期\n      // this.setState( {\n      //   stageData: allStageResult\n      // });\n\n      // // 画图\n      // // 截至本年度统计周期受理累计\n      // let cityTotalAcceptData = [];\n      // // 城市总体关闭率\n      // let cityOverallCloseRateData = [];\n      // // 城市剩余未关\n      // let cityOpenData = [];\n      // // 城市新增受理\n      // let cityNewAddedAcceptData = [];\n      // // 城市新增关闭率\n      // let cityNewAddedCloseRateData = [];\n      // // 各城市需处理受理\n      // let cityNeedHandleAcceptData = [];\n      // // 各城市需处理及时关闭率\n      // let cityNeedHandleCloseOnTimeRateData = [];\n      // // 各城市需处理总体关闭率\n      // let cityNeedHandleCloseRateData = [];\n      // // 城市已关平均处理时长\n      // let cityCloseAverageHandleTimeData = [];\n      // // 城市剩余未关平均处理时长\n      // let cityOpenAverageHandleTimeData = [];\n\n      // // 各城市分类已关闭平均处理时长\n      // let citySecondCategoryCloseAverageHandleTimeData = {};\n      // let newAddedCities = [];\n\n      // // 各城市分类剩余未关平均处理时长\n      // let citySecondCategoryOpenAverageHandleTimeData = [];\n      // for (let cityName in allCityResult) {\n      //   cityTotalAcceptData = [\n      //     ...cityTotalAcceptData,\n      //     {\n      //       name: cityName,\n      //       value: allCityResult[cityName].periodTotalResult[KEY_TICKET_TOTAL][TICKET_ACCEPT]\n      //     }\n      //   ];\n      //   cityOverallCloseRateData = [\n      //     ...cityOverallCloseRateData,\n      //     {\n      //       name: cityName,\n      //       value: allCityResult[cityName].rateResult[KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n      //     }\n      //   ];\n      //   cityOpenData = [\n      //     ...cityOpenData,\n      //     {\n      //       name: cityName,\n      //       value: allCityResult[cityName].periodTotalResult[KEY_TICKET_TOTAL][TICKET_OPEN]\n      //     }\n      //   ];\n\n      //   cityNewAddedAcceptData = [\n      //     ...cityNewAddedAcceptData, {\n      //       name: cityName,\n      //       value: allCityResult[cityName].periodNewAddedResult[KEY_TICKET_TOTAL][TICKET_ACCEPT]\n      //     }\n      //   ];\n      //   cityNewAddedCloseRateData = [\n      //     ...cityNewAddedCloseRateData, {\n      //       name: cityName,\n      //       value: allCityResult[cityName].rateResult[KEY_TICKET_TOTAL][NEW_ADD_CLOSE_RATE]\n      //     }\n      //   ];\n      //   cityNeedHandleAcceptData = [\n      //     ...cityNeedHandleAcceptData, {\n      //       name: cityName,\n      //       value: allCityResult[cityName].beforePeriodNeedHandleResult[KEY_TICKET_TOTAL][TICKET_ACCEPT]\n      //     }\n      //   ];\n      //   cityNeedHandleCloseOnTimeRateData = [\n      //     ...cityNeedHandleCloseOnTimeRateData, {\n      //       name: cityName,\n      //       value: allCityResult[cityName].rateResult[KEY_TICKET_TOTAL][CLOSE_ON_TIME_RATE]\n      //     }\n      //   ];\n      //   cityNeedHandleCloseRateData = [\n      //     ...cityNeedHandleCloseRateData, {\n      //       name: cityName,\n      //       value: allCityResult[cityName].rateResult[KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n      //     }\n      //   ];\n      //   cityCloseAverageHandleTimeData = [\n      //     ...cityCloseAverageHandleTimeData,\n      //     {\n      //       name: cityName,\n      //       value: allCityResult[cityName].periodNewAddedResult[KEY_TICKET_TOTAL][TICKET_CLOSE_PROCESS_TIME]\n      //     }\n      //   ];\n      //   cityOpenAverageHandleTimeData = [\n      //     ...cityOpenAverageHandleTimeData,\n      //     {\n      //       name: cityName,\n      //       value:  allCityResult[cityName].beforePeriodNeedHandleResult[KEY_TICKET_TOTAL][TICKET_OPEN_PROCESS_TIME]\n      //     }\n      //   ];\n      //   citySecondCategoryCloseAverageHandleTimeData[cityName] = [];\n      //   citySecondCategoryOpenAverageHandleTimeData[cityName] = [];\n      //   for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      //     citySecondCategoryCloseAverageHandleTimeData[cityName] = [\n      //       ...citySecondCategoryCloseAverageHandleTimeData[cityName], {\n      //         name: secondCategory,\n      //         value: allCityResult[cityName].periodNewAddedResult[secondCategory][TICKET_CLOSE_PROCESS_TIME]\n      //       }\n      //     ];\n      //     citySecondCategoryOpenAverageHandleTimeData[cityName] = [\n      //       ...citySecondCategoryOpenAverageHandleTimeData[cityName], {\n      //         name: secondCategory,\n      //         value: allCityResult[cityName].periodNewAddedResult[secondCategory][TICKET_OPEN_PROCESS_TIME]\n      //       }\n      //     ];\n      //   }\n      // }\n      // this.setState({\n      //   cityTotalAcceptData,\n      //   cityOverallCloseRateData,\n      //   cityOpenData,\n      //   cityNewAddedAcceptData,\n      //   cityNewAddedCloseRateData,\n      //   cityNeedHandleAcceptData,\n      //   cityNeedHandleCloseOnTimeRateData,\n      //   cityNeedHandleCloseRateData,\n      //   cityCloseAverageHandleTimeData,\n      //   cityOpenAverageHandleTimeData,\n      //   citySecondCategoryCloseAverageHandleTimeData,\n      //   citySecondCategoryOpenAverageHandleTimeData,\n      //   newAddedCities\n      // });\n\n      // // 二级分类剩余未关\n      // let secondCategoryOpenData = [];\n      // // 二级分类新增受理\n      // let secondCategoryNewAddedAcceptData = [];\n      // // 二级分类已关闭平均处理时长\n      // let secondCategoryCloseAverageHandleTimeData = [];\n      // // 二级分类剩余未关平均处理时长\n      // let secondCategoryOpenAverageHandleTimeData = [];\n      // for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      //   secondCategoryOpenData = [...secondCategoryOpenData, {\n      //     name: secondCategory,\n      //     value: areaResult.periodTotalResult[secondCategory][TICKET_OPEN]\n      //   }];\n      //   secondCategoryNewAddedAcceptData = [\n      //     ...secondCategoryNewAddedAcceptData,\n      //     {\n      //       name: secondCategory,\n      //       value: areaResult.periodNewAddedResult[secondCategory][TICKET_ACCEPT]\n      //     }\n      //   ];\n      //   secondCategoryCloseAverageHandleTimeData = [\n      //     ...secondCategoryCloseAverageHandleTimeData,\n      //     {\n      //       name: secondCategory,\n      //       value: areaResult.periodNewAddedResult[secondCategory][TICKET_CLOSE_PROCESS_TIME]\n      //     }\n      //   ];\n      //   secondCategoryOpenAverageHandleTimeData = [\n      //     ...secondCategoryOpenAverageHandleTimeData,\n      //     {\n      //       name: secondCategory,\n      //       value: areaResult.periodNewAddedResult[secondCategory][TICKET_OPEN_PROCESS_TIME]\n      //     }\n      //   ]\n      // }\n      // this.setState({\n      //   secondCategoryOpenData,\n      //   secondCategoryNewAddedAcceptData,\n      //   secondCategoryCloseAverageHandleTimeData,\n      //   secondCategoryOpenAverageHandleTimeData\n      // });\n\n      // // 项目受理累计\n      // let projectTotalAcceptData = [];\n      // // 项目总体关闭率\n      // let projectOverallCloseRateData = [];\n      // // 项目新增受理\n      // let projectNewAddedAcceptData = [];\n      // // 项目新增关闭率\n      // let projectNewAddedCloseRateData = [];\n      // let projects = [];\n      // for (let projectName in allProjectResult.periodTotalResult) {\n      //   projects = [...projects, projectName];\n      //   let ticketAccept = allProjectResult.periodTotalResult[projectName][KEY_TICKET_TOTAL][TICKET_ACCEPT];\n      //   projectTotalAcceptData = [\n      //     ...projectTotalAcceptData,\n      //     { name: projectName, value: ticketAccept }\n      //   ];\n      //   projectOverallCloseRateData = [\n      //     ...projectOverallCloseRateData,\n      //     {\n      //       name: projectName,\n      //       value: allProjectResult.rateResult[projectName][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n      //     }\n      //   ];\n\n      // }\n\n      // // 项目需处理受理\n      // let projectNeedHandleAcceptData = [];\n      // let projectNeedHandleCloseRateData = [];\n      // let projectNeedHandleCloseOnTimeRateData = [];\n      // let needHandleProjects = [];\n      // for (let projectName in allProjectResult.beforePeriodNeedHandleResult) {\n      //   projectNeedHandleAcceptData = [\n      //     ...projectNeedHandleAcceptData, {\n      //       name: projectName,\n      //       value: allProjectResult.beforePeriodNeedHandleResult[projectName][KEY_TICKET_TOTAL][TICKET_ACCEPT]\n      //     }\n      //   ];\n      //   projectNeedHandleCloseRateData = [\n      //     ...projectNeedHandleCloseRateData, {\n      //       name: projectName,\n      //       value: allProjectResult.rateResult[projectName][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n      //     }\n      //   ];\n      //   projectNeedHandleCloseOnTimeRateData = [\n      //     ...projectNeedHandleCloseOnTimeRateData, {\n      //       name: projectName,\n      //       value: allProjectResult.rateResult[projectName][KEY_TICKET_TOTAL][CLOSE_ON_TIME_RATE]\n      //     }\n      //   ];\n      //   needHandleProjects = [\n      //     ...needHandleProjects,\n      //     projectName\n      //   ];\n      // }\n      // this.setState({\n      //   projectNeedHandleAcceptData,\n      //   projectNeedHandleCloseRateData,\n      //   projectNeedHandleCloseOnTimeRateData,\n      //   needHandleProjects\n      // })\n\n      // let newAddedProjects = [];\n      // for (let projectName in allProjectResult.periodNewAddedResult) {\n      //   newAddedProjects = [...newAddedProjects, projectName];\n      //   let ticketAccept = allProjectResult.periodNewAddedResult[projectName][KEY_TICKET_TOTAL][TICKET_ACCEPT];\n      //   projectNewAddedAcceptData = [\n      //     ...projectNewAddedAcceptData,\n      //     {\n      //       name: projectName,\n      //       value: ticketAccept\n      //     }\n      //   ];\n      //   projectNewAddedCloseRateData = [\n      //     ...projectNewAddedCloseRateData,\n      //     {\n      //       name: projectName,\n      //       value: allProjectResult.rateResult[projectName][KEY_TICKET_TOTAL][NEW_ADD_CLOSE_RATE]\n      //     }\n      //   ];\n      // }\n\n      // this.setState({\n      //   projectTotalAcceptData,\n      //   projectOverallCloseRateData,\n      //   projects,\n      //   projectNewAddedAcceptData,\n      //   projectNewAddedCloseRateData,\n      //   newAddedProjects\n      // });\n\n      // // 分期累计\n      // let stageTotalAcceptData = [];\n      // // 分期总体关闭率\n      // let stageOverallCloseRateData = [];\n      // let stages = [];\n      // for (let stageName in allStageResult.periodTotalResult) {\n      //   stages = [...stages, stageName];\n      //   let ticketAccept = allStageResult.periodTotalResult[stageName][KEY_TICKET_TOTAL][TICKET_ACCEPT];\n      //   stageTotalAcceptData = [\n      //     ...stageTotalAcceptData,\n      //     { name: stageName, value: ticketAccept }\n      //   ];\n      //   stageOverallCloseRateData = [\n      //     ...stageOverallCloseRateData,\n      //     {\n      //       name: stageName,\n      //       value: allStageResult.rateResult[stageName][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n      //     }\n      //   ];\n      // }\n      // this.setState({\n      //   stageTotalAcceptData,\n      //   stageOverallCloseRateData,\n      //   stages\n      // });\n\n      // // 分期新增受理\n      // let stageNewAddedAcceptData = [];\n      // // 分期新增关闭率\n      // let stageNewAddedCloseRateData = [];\n      // let newAddedStages = [];\n      // for (let stageName in allStageResult.periodNewAddedResult) {\n      //   newAddedStages = [...newAddedStages, stageName];\n      //   let ticketAccept = allStageResult.periodNewAddedResult[stageName][KEY_TICKET_TOTAL][TICKET_ACCEPT];\n      //   stageNewAddedAcceptData = [\n      //     ...stageNewAddedAcceptData,\n      //     { name: stageName, value: ticketAccept }\n      //   ];\n      //   stageNewAddedCloseRateData = [\n      //     ...stageNewAddedCloseRateData,\n      //     {\n      //       name: stageName,\n      //       value: allStageResult.rateResult[stageName][KEY_TICKET_TOTAL][NEW_ADD_CLOSE_RATE]\n      //     }\n      //   ];\n      // }\n      // this.setState({\n      //   stageNewAddedAcceptData,\n      //   stageNewAddedCloseRateData,\n      //   newAddedStages\n      // });\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  // exportExcel = () => {\n  //   let header = [KEY_PROJECT_NAME, KEY_STATISTIC_ITEM, ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL];\n  //   if (this.state.newAddedData.length > 0 || this.state.thisYearBeforeStartData.length > 0 ||\n  //     this.state.thisYearBeforePeriodTotalData.length > 0 || this.state.thisYearTotalData.length > 0 ||\n  //     this.state.lastYearBeforePeriodData.length > 0 ||\n  //     this.state.lastYearBeforePeriodTotalData.length > 0 ||\n  //     this.state.beforePeriodNeedHandleData.length > 0 ||\n  //     this.state.periodTotalData.length > 0) {\n  //     let sheet1 = XLSX.utils.json_to_sheet(this.state.periodNewAddedData, {\n  //       header: header\n  //     });\n  //     let sheet2 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodData, {\n  //       header: header\n  //     });\n  //     let sheet3 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodTotalData, {\n  //       header: header\n  //     });\n  //     let sheet4 = XLSX.utils.json_to_sheet(this.state.thisYearTotalData, {\n  //       header: header\n  //     });\n  //     let sheet5 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodData, {\n  //       header: header\n  //     });\n  //     let sheet6 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodTotalData, {\n  //       header: header\n  //     });\n  //     let sheet7 = XLSX.utils.json_to_sheet(this.state.beforePeriodNeedHandleData, {\n  //       header: header\n  //     });\n  //     let sheet8 = XLSX.utils.json_to_sheet(this.state.periodTotalData, {\n  //       header: header\n  //     });\n  //     let sheet9 = XLSX.utils.json_to_sheet(this.state.rateData, {\n  //       header: header\n  //     });\n  //     let workbook = XLSX.utils.book_new();\n  //     XLSX.utils.book_append_sheet(workbook, sheet1, STATISTIC_PERIOD_ADD);\n  //     XLSX.utils.book_append_sheet(workbook, sheet2, STATISTIC_BEFORE_PERIOD_REMAIN);\n  //     XLSX.utils.book_append_sheet(workbook, sheet3, STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL);\n  //     XLSX.utils.book_append_sheet(workbook, sheet4, STATISTIC_THIS_YEAR_TOTAL);\n  //     XLSX.utils.book_append_sheet(workbook, sheet5, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN);\n  //     XLSX.utils.book_append_sheet(workbook, sheet6, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL);\n  //     XLSX.utils.book_append_sheet(workbook, sheet7, STATISTIC_BEFORE_PERIOD_NEED_HANDLE);\n  //     XLSX.utils.book_append_sheet(workbook, sheet8, STATISTIC_BEFORE_PERIOD_TOTAL);\n  //     XLSX.utils.book_append_sheet(workbook, sheet9, STATISTIC_PERIOD_RATE)\n  //     XLSX.writeFile(workbook, 'statistic-' + moment(Date.now()).format('YYYY-MM-DD-HH-MM-SS') + '.xlsx')\n  //   } else {\n  //     message.error('请先点击“开始统计”按钮进行统计！');\n  //   }\n  // }\n\n  render() {\n    const tabChart = (\n      <ChartView\n        cityTotalAcceptData={this.state.cityTotalAcceptData}\n        cityOverallCloseRateData={this.state.cityOverallCloseRateData}\n        projectTotalAcceptData={this.state.projectTotalAcceptData}\n        projectOverallCloseRateData={this.state.projectOverallCloseRateData}\n        stageTotalAcceptData={this.state.stageTotalAcceptData}\n        stageOverallCloseRateData={this.state.stageOverallCloseRateData}\n        cityOpenData={this.state.cityOpenData}\n        secondCategoryOpenData={this.state.secondCategoryOpenData}\n        cityNewAddedAcceptData={this.state.cityNewAddedAcceptData}\n        cityNewAddedCloseRateData={this.state.cityNewAddedCloseRateData}\n        secondCategoryNewAddedAcceptData={this.state.secondCategoryNewAddedAcceptData}\n        projectNewAddedAcceptData={this.state.projectNewAddedAcceptData}\n        projectNewAddedCloseRateData={this.state.projectNewAddedCloseRateData}\n        newAddedProjects={this.state.newAddedProjects}\n        stageNewAddedAcceptData={this.state.stageNewAddedAcceptData}\n        stageNewAddedCloseRateData={this.state.stageNewAddedCloseRateData}\n        newAddedStages={this.state.newAddedStages}\n        cityNeedHandleAcceptData={this.state.cityNeedHandleAcceptData}\n        cityNeedHandleCloseOnTimeRateData={this.state.cityNeedHandleCloseOnTimeRateData}\n        cityNeedHandleCloseRateData={this.state.cityNeedHandleCloseRateData}\n        projectNeedHandleAcceptData={this.state.projectNeedHandleAcceptData}\n        projectNeedHandleCloseRateData={this.state.projectNeedHandleCloseRateData}\n        projectNeedHandleCloseOnTimeRateData={this.state.projectNeedHandleCloseOnTimeRateData}\n        needHandleProjects={this.state.needHandleProjects}\n        cityCloseAverageHandleTimeData={this.state.cityCloseAverageHandleTimeData}\n        cityOpenAverageHandleTimeData={this.state.cityOpenAverageHandleTimeData}\n        citySecondCategoryCloseAverageHandleTimeData={this.state.citySecondCategoryCloseAverageHandleTimeData}\n        citySecondCategoryOpenAverageHandleTimeData={this.state.citySecondCategoryOpenAverageHandleTimeData}\n        secondCategoryOpenAverageHandleTimeData={this.state.secondCategoryOpenAverageHandleTimeData}\n        newAddedCities={this.state.newAddedCities}\n        cities={this.state.cityData.cities}\n        projects={this.state.projects}\n        stages={this.state.stages}\n      />\n    );\n\n    const tabArea = (\n      <AreaView\n        periodNewAddedData={this.state.areaData.periodNewAddedData}\n        thisYearBeforePeriodData={this.state.areaData.thisYearBeforePeriodData}\n        thisYearBeforePeriodTotalData={this.state.areaData.thisYearBeforePeriodTotalData}\n        thisYearTotalData={this.state.areaData.thisYearTotalData}\n        lastYearBeforePeriodData={this.state.areaData.lastYearBeforePeriodData}\n        lastYearBeforePeriodTotalData={this.state.areaData.lastYearBeforePeriodTotalData}\n        beforePeriodNeedHandleData={this.state.areaData.beforePeriodNeedHandleData}\n        periodTotalData={this.state.areaData.periodTotalData}\n        rateData={this.state.areaData.rateData}\n      />\n    );\n\n    const tabCity = (\n      <CityView\n        periodNewAddedData={this.state.cityData.periodNewAddedData}\n        thisYearBeforePeriodData={this.state.cityData.thisYearBeforePeriodData}\n        thisYearBeforePeriodTotalData={this.state.cityData.thisYearBeforePeriodTotalData}\n        thisYearTotalData={this.state.cityData.thisYearTotalData}\n        lastYearBeforePeriodData={this.state.cityData.lastYearBeforePeriodData}\n        lastYearBeforePeriodTotalData={this.state.cityData.lastYearBeforePeriodTotalData}\n        beforePeriodNeedHandleData={this.state.cityData.beforePeriodNeedHandleData}\n        periodTotalData={this.state.cityData.periodTotalData}\n        rateData={this.state.cityData.rateData}\n        cities={this.state.cityData.cities}\n        cityOpenData={this.state.cityData.cityOpenData}\n        secondCategoryOpenData={this.state.secondCategoryOpenData}\n      />\n    );\n\n    const tabProject = (\n      <ProjectView\n        data={this.state.projectData}\n      />\n    );\n\n    const tabStage = (\n      <ProjectView\n        data={this.state.stageData}\n      />\n    );\n\n    return (\n      <LocaleProvider locale={zh_CN}>\n        <div>\n          <h2 className=\"text--center heading\">统计辅助工具</h2>\n          <DataForm\n            onStart={this.start}\n            onExport={this.exportExcel}\n            loading={this.state.loading}\n          />\n          <Row style={{ margin: '40px 0' }}>\n            <Col span={22} offset={1}>\n              <Tabs type=\"card\">\n                <Tabs.TabPane tab=\"统计图\" key=\"统计图\">{tabChart}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"大区\" key=\"大区\">{tabArea}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"城市\" key=\"城市\">{tabCity}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"项目\" key=\"项目\">{tabProject}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"分期\" key=\"分期\">{tabStage}</Tabs.TabPane>\n              </Tabs>\n            </Col>\n          </Row>\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  addCategories,\n  addTicketStates\n}\n\nconst ConnectedApp = connect(null, mapDispatchToProps)(App);\n\nexport default ConnectedApp;\n","import {\r\n  ADD_CATEGORY,\r\n  ADD_CATEGORIES,\r\n  ADD_TICKET_STATES\r\n} from '../action-types';\r\n\r\nexport const addCategory = category => ({\r\n  type: ADD_CATEGORY,\r\n  payload: {\r\n    category\r\n  }\r\n});\r\n\r\nexport const addCategories = categories => ({\r\n  type: ADD_CATEGORIES,\r\n  payload: {\r\n    categories\r\n  }\r\n});\r\n\r\nexport const addTicketStates = ticketStates => ({\r\n  type: ADD_TICKET_STATES,\r\n  payload: {\r\n    ticketStates\r\n  }\r\n})\r\n","export const ADD_CATEGORY = 'ADD_CATEGORY';\r\nexport const ADD_CATEGORIES = 'ADD_CATEGORIES';\r\nexport const ADD_TICKET_STATES = 'ADD_TICKET_STATES';\r\n","import { combineReducers } from 'redux';\r\nimport category from './category';\r\nimport ticketState from './ticket-state';\r\n\r\nconst reducer = combineReducers({\r\n  category,\r\n  ticketState\r\n});\r\n\r\nexport default reducer;\r\n","import {\r\n  ADD_CATEGORY,\r\n  ADD_CATEGORIES\r\n} from '../action-types';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_CATEGORY:\r\n      const { category } = action.payload;\r\n      return [\r\n        ...state,\r\n        category\r\n      ];\r\n    case ADD_CATEGORIES:\r\n      const { categories } = action.payload;\r\n      return [\r\n        ...state,\r\n        ...categories\r\n      ]\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  ADD_TICKET_STATES\r\n} from '../action-types';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_TICKET_STATES:\r\n      const { ticketStates } = action.payload;\r\n      return [\r\n        ...state,\r\n        ...ticketStates\r\n      ];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}