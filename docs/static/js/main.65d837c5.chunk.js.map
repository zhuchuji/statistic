{"version":3,"sources":["components/DataForm.js","constants.js","components/CommonCharts.js","components/ChartView.js","components/ProjectTable.js","utils.js","components/ProjectView.js","functions/utils.js","App.js","store/actions/index.js","store/action-types.js","store/reducers/index.js","store/reducers/category.js","store/reducers/ticket-state.js","store/index.js","index.js"],"names":["DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startTime","Date","set","hour","minute","second","endTime","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","es_col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","toConsumableArray","concat","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","React","Component","defaultPorps","onExport","WrapDataForm","create","KEY_REPORT_TIME","KEY_PROJECT_NAME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","NEW_ADD_CLOSE_RATE","REMAIN_CLOSE_RATE","OVERALL_CLOSE_RATE","CLOSE_ON_TIME_RATE","TOTAL_OVERALL_CLOSE_RATE","RATE_STATISTIC_ITEMS","COL_AREA","COL_CITY_COMPANY","COL_PROJECT","COL_PROJECT_STAGE","COL_CURRENT_STATUS","COL_REPORT_TIME","TICKET_STATUS","CATEGORIES","STATISTIC_ITEMS","titleConfig","left","top","textStyle","color","toolboxConfig","feature","saveAsImage","show","right","legendConfig","styles","margin","height","tooltipConifg","trigger","axisPointer","crossStyle","CommonCharts","core_default","style","echarts","option","title","objectSpread","text","title1","tooltip","toolbox","xAxis","data","interval","axisLabel","rotate","yAxis","name","min","max","series","barMaxWidth","position","formatter","graphData","totalAcceptData","yAxisIndex","overallCloseRateData","title2","newAddedAcceptData","newAddedCloseRateData","title5","radius","openData","title3","legend","needHandleAcceptData","needHandleCloseOnTimeRateData","needHandleCloseRateData","title4","closeAverageHandleTimeData","openAverageHandleTimeData","ChartView","cityCategoryCloseAverageHandleTimeSeries","newAddedCities","cityName","cityGraphData","cityCategoryCloseAverageHandleTimeData","citySecondCategoryOpenAverageHandleTimeSeries","openAverageHandleTimeCities","citySecondCategoryOpenAverageHandleTimeData","components_CommonCharts","areaGraphData","allAreas","categoryGraphData","allCategories","allCities","projectGraphData","allProjects","stageGraphData","allStages","ProjectTable","projectColumn","table","Column","dataIndex","key","width","otherColumns","map","item","currentPageData","dataSource","filteredProjects","length","filter","pagination","pageSize","scroll","y","size","defaultProps","formatToTable","tableData","rowKey","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","statisticItem","rowData","_arr","_i","category","push","return","formatToRateTable","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_arr2","_i2","ProjectView","filterProjects","projects","projectName","es_select","mode","onChange","project","Option","components_ProjectTable","periodNewAddedResult","thisYearBeforePeriodResult","thisYearBeforePeriodTotalResult","thisYearTotalResult","lastYearBeforePeriodResult","lastYearBeforePeriodTotalResult","beforePeriodNeedHandleResult","periodTotalResult","rateResult","initStatisticItem","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","itemName","initRate","getCategory","ticket","statisticCloseHandleTime","ticketStatistic","ticketCloseTime","ticketReportTime","ticketPauseDuration","closeHandleTime","moment","duration","diff","subtract","as","statisticOpenHandleTime","closeEndTime","openHandleTime","statisticRate","statisticMap","rateMap","toFixed","statistc","periodTickets","beforePeriodTickets","thisYearTotalTickets","lastYearBeforePeriodTickets","col","allItems","yearStartTime","month","date","tickets","closeStartTime","dataMap","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","ticketCategory","ticketStatus","Number","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","ticketCloseCount","ticketCloseProcessTime","ticketOpenProcessTime","ticketOpenCount","statisticPeriodNewAddedTickets","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","statisticThisYearBeforePeriodTickets","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","statisticThisYearBeforePeriodTotalTickets","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","statisticLastYearBeforePeriodTickets","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","statisticLastYearBeforePeriodTotalTickets","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","_iteratorNormalCompletion26","_didIteratorError26","_iteratorError26","_step26","_iterator26","_iteratorNormalCompletion27","_didIteratorError27","_iteratorError27","_step27","_iterator27","statisticThisYearTotalTickets","array","_iteratorNormalCompletion28","_didIteratorError28","_iteratorError28","_step28","_iterator28","_iteratorNormalCompletion29","_didIteratorError29","_iteratorError29","_step29","_iterator29","result","_iteratorNormalCompletion30","_didIteratorError30","_iteratorError30","_step30","_iterator30","statisticBeforePeriodNeedHandleResult","_iteratorNormalCompletion31","_didIteratorError31","_iteratorError31","_step31","_iterator31","_iteratorNormalCompletion32","_didIteratorError32","_iteratorError32","_step32","_iterator32","_iteratorNormalCompletion33","_didIteratorError33","_iteratorError33","_step33","_iterator33","statisticPeriodTotalResult","_iteratorNormalCompletion34","_didIteratorError34","_iteratorError34","_step34","_iterator34","formatGraphData","_iteratorNormalCompletion35","_didIteratorError35","_iteratorError35","_step35","_iterator35","formatCategoryGraphData","area","_iteratorNormalCompletion36","_didIteratorError36","_iteratorError36","_step36","_iterator36","allCategory","allTicketState","App","start","_this$props","addCategories","addTicketStates","fileReader","FileReader","readFile","onload","event","workbook","XLSX","read","target","sheet","Sheets","SheetNames","utils","sheet_to_json","blankrows","readAsBinaryString","readExcelData","Util","stage","city","reportTime","stageData","projectData","cityData","areaData","tabChart","components_ChartView","tabArea","components_ProjectView","tabCity","tabProject","tabStage","locale_provider","locale","zh_CN","className","components_DataForm","exportExcel","tabs","TabPane","tab","mapDispatchToProps","categories","payload","ticketStates","ConnectedApp","connect","reducer","combineReducers","arguments","action","ticketState","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.65d837c5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {},\n    onExport: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func,\n    onExport: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startTime = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endTime = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startTime, endTime);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              {\n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在统计...': '开始统计'\n              }\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '未关时长（天）';\r\nexport const TICKET_NOT_RESPONSED = '未响应';\r\nexport const TICKET_CLOSE_HANDLE_TIME_0_7 = '已关处理时长（0-7天）';\r\nexport const TICKET_CLOSE_HANDLE_TIME_7_15 = '已关处理时长（7-15天）';\r\nexport const TICKET_CLOSE_HANDLE_TIME_15_30 = '已关处理时长（15-30天）';\r\nexport const TICKET_CLOSE_HANDLE_TIME_30_60 = '已关处理时长（30-60天）';\r\nexport const TICKET_CLOSE_HANDLE_TIME_OVER_60 = '已关处理时长（大于60天）';\r\nexport const TICKET_OPEN_HANDLE_TIME_0_7 = '未关处理时长（0-7天）';\r\nexport const TICKET_OPEN_HANDLE_TIME_7_15 = '未关处理时长（7-15天）';\r\nexport const TICKET_OPEN_HANDLE_TIME_15_30 = '未关处理时长（15-30天）';\r\nexport const TICKET_OPEN_HANDLE_TIME_30_60 = '未关处理时长（30-60天）';\r\nexport const TICKET_OPEN_HANDLE_TIME_OVER_60 = '未关处理时长（大于60天）';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\nexport const KEY_CITY_NAME = '城市';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const NEW_ADD_CLOSE_RATE = '新增关闭率';\r\nexport const REMAIN_CLOSE_RATE = '遗留关闭率';\r\nexport const OVERALL_CLOSE_RATE = '总体关闭率';\r\nexport const RESPONSE_IN_30_MIN_RATE = '响应及时率（0.5h）'\r\nexport const RESPONSE_IN_30_HOUR_RATE = '响应及时率（30h）';\r\nexport const CLOSE_ON_TIME_RATE = '及时关闭率';\r\nexport const TOTAL_OVERALL_CLOSE_RATE = '累计总体关闭率';\r\n\r\nexport const RATE_STATISTIC_ITEMS = [\r\n  REMAIN_CLOSE_RATE,\r\n  NEW_ADD_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_RATE = '本年度统计周期内';\r\n\r\nexport const STAGES = [\r\n  '一期',\r\n  '二期',\r\n  '三期',\r\n  '四期',\r\n  '五期',\r\n  '六期',\r\n  '七期',\r\n  '八期',\r\n  '九期',\r\n  '十期'\r\n];\r\n\r\n\r\n// new data key\r\nexport const COL_AREA = '大区';\r\nexport const COL_CITY_COMPANY = '城市公司';\r\nexport const COL_PROJECT = '项目';\r\nexport const COL_PROJECT_STAGE = '项目分期';\r\nexport const COL_CURRENT_STATUS = '当前工单状态';\r\nexport const COL_FIRST_CLASS = '一级报事分类';\r\nexport const COL_REPORT_TIME = '报事时间';\r\nexport const COL_RESPONSE_TIME = '响应时间';\r\nexport const COL_FINISH_TIME = '实际完成时间';\r\nexport const COL_TOTAL_HANDLE_TIME = '工单总处理时长(天）';\r\nexport const COL_EXPIRE = '总时长超时预警';\r\nexport const COL_CLOSE_TIME_1 = '业主关闭时间';\r\nexport const COL_CLOSE_TIME_2 = '非正常关闭时间';\r\nexport const COL_CLOSE_TIME_3 = '强制关闭时间';\r\nexport const COL_PAUSE = '累计暂停时长';\r\nexport const COL_OVERTIME_WARN = '总时长超时预警';\r\n\r\nexport const CATEGORY_UNCLASSIFY = '未分类';\r\n\r\nexport const TICKET_STATUS = {\r\n  RESPONSED: '已响应',\r\n  SOLUTION_PREPARE: '方案制定中',\r\n  SOLUTION_APPROVE: '方案已批准',\r\n  INVALID: '无效',\r\n  CLOSED: '已关闭',\r\n  FORCE_CLOSE: '强制关闭',\r\n  CLOSE_ABNORMAL: '非正常关闭',\r\n  DISPATCHED: '已分派',\r\n  WORK_DOING: '施工中',\r\n  WORK_FINISHED: '施工完成',\r\n  DROP_IN: '已上门',\r\n  COMMENTED: '已评价',\r\n  NEW: '新建'\r\n};\r\n\r\nexport const CATEGORIES = [\r\n  '土建',\r\n  '维修-其他类',\r\n  '机电',\r\n  '室内精装',\r\n  '室内门窗及入户门',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '渗漏',\r\n  '室内电器',\r\n  '公区部分',\r\n  CATEGORY_UNCLASSIFY\r\n];\r\n\r\n// statistic items\r\nexport const STATISTIC_ITEMS = [\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_NOT_RESPONSED,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME,\r\n  TICKET_CLOSE_HANDLE_TIME_0_7,\r\n  TICKET_CLOSE_HANDLE_TIME_7_15,\r\n  TICKET_CLOSE_HANDLE_TIME_15_30,\r\n  TICKET_CLOSE_HANDLE_TIME_30_60,\r\n  TICKET_CLOSE_HANDLE_TIME_OVER_60,\r\n  TICKET_OPEN_HANDLE_TIME_0_7,\r\n  TICKET_OPEN_HANDLE_TIME_7_15,\r\n  TICKET_OPEN_HANDLE_TIME_15_30,\r\n  TICKET_OPEN_HANDLE_TIME_30_60,\r\n  TICKET_OPEN_HANDLE_TIME_OVER_60\r\n]\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\n// import the core library.\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\n\r\n// then import echarts modules those you have used manually.\r\nimport echarts from 'echarts/lib/echarts';\r\nimport 'echarts/lib/chart/line';\r\nimport 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/chart/pie';\r\n// import 'echarts/lib/chart/scatter';\r\n// import 'echarts/lib/chart/radar';\r\n\r\n// import 'echarts/lib/chart/map';\r\n// import 'echarts/lib/chart/treemap';\r\n// import 'echarts/lib/chart/graph';\r\n// import 'echarts/lib/chart/gauge';\r\n// import 'echarts/lib/chart/funnel';\r\n// import 'echarts/lib/chart/parallel';\r\n// import 'echarts/lib/chart/sankey';\r\n// import 'echarts/lib/chart/boxplot';\r\n// import 'echarts/lib/chart/candlestick';\r\n// import 'echarts/lib/chart/effectScatter';\r\n// import 'echarts/lib/chart/lines';\r\n// import 'echarts/lib/chart/heatmap';\r\n\r\n// import 'echarts/lib/component/graphic';\r\n// import 'echarts/lib/component/grid';\r\nimport 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/tooltip';\r\n// import 'echarts/lib/component/polar';\r\n// import 'echarts/lib/component/geo';\r\n// import 'echarts/lib/component/parallel';\r\n// import 'echarts/lib/component/singleAxis';\r\n// import 'echarts/lib/component/brush';\r\n\r\nimport 'echarts/lib/component/title';\r\n\r\n// import 'echarts/lib/component/dataZoom';\r\n// import 'echarts/lib/component/visualMap';\r\n\r\n// import 'echarts/lib/component/markPoint';\r\n// import 'echarts/lib/component/markLine';\r\n// import 'echarts/lib/component/markArea';\r\n\r\n// import 'echarts/lib/component/timeline';\r\nimport 'echarts/lib/component/toolbox';\r\n// import { Rect } from 'echarts/lib/util/graphic';\r\n\r\n// import 'zrender/lib/vml/vml';\r\n\r\nconst titleConfig = {\r\n  left: 'center',\r\n  top: 0,\r\n  textStyle: {\r\n    color: '#000000'\r\n  }\r\n};\r\nconst toolboxConfig = {\r\n  feature: {\r\n    saveAsImage: { show: true }\r\n  },\r\n  right: 40\r\n};\r\nconst legendConfig = {\r\n  left: 40\r\n};\r\nconst styles = {\r\n  margin: '40px 0',\r\n  height: '500px'\r\n};\r\nconst tooltipConifg = {\r\n  trigger: 'axis',\r\n  axisPointer: {\r\n    type: 'cross',\r\n    crossStyle: {\r\n      color: '#999'\r\n    }\r\n  }\r\n};\r\n\r\n\r\nfunction CommonCharts(props) {\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title1,\r\n              ...titleConfig\r\n            },\r\n            tooltip: tooltipConifg,\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.xAxis,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.totalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.overallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title2,\r\n              ...titleConfig\r\n            },\r\n            tooltip: tooltipConifg,\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.xAxis,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.newAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.newAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title5,\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '剩余未关',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.graphData.openData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title3,\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            legend: {\r\n              data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n              ...legendConfig\r\n            },\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.xAxis,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '需处理受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '比率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '需处理受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.needHandleAcceptData\r\n              },\r\n              {\r\n                name: '及时关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.needHandleCloseOnTimeRateData\r\n              },\r\n              {\r\n                name: '总体关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.needHandleCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row style={{ margin: '40px 0' }}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title4,\r\n              ...titleConfig\r\n            },\r\n            tooltip: tooltipConifg,\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.xAxis,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            legend: {\r\n              data: ['已关闭', '剩余未关'],\r\n              ...legendConfig\r\n            },\r\n            series: [\r\n              {\r\n                name: '已关闭',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.closeAverageHandleTimeData\r\n              },\r\n              {\r\n                name: '剩余未关',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.openAverageHandleTimeData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommonCharts;\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\n// import the core library.\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\n\r\n// then import echarts modules those you have used manually.\r\nimport echarts from 'echarts/lib/echarts';\r\nimport 'echarts/lib/chart/line';\r\nimport 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/chart/pie';\r\n// import 'echarts/lib/chart/scatter';\r\n// import 'echarts/lib/chart/radar';\r\n\r\n// import 'echarts/lib/chart/map';\r\n// import 'echarts/lib/chart/treemap';\r\n// import 'echarts/lib/chart/graph';\r\n// import 'echarts/lib/chart/gauge';\r\n// import 'echarts/lib/chart/funnel';\r\n// import 'echarts/lib/chart/parallel';\r\n// import 'echarts/lib/chart/sankey';\r\n// import 'echarts/lib/chart/boxplot';\r\n// import 'echarts/lib/chart/candlestick';\r\n// import 'echarts/lib/chart/effectScatter';\r\n// import 'echarts/lib/chart/lines';\r\n// import 'echarts/lib/chart/heatmap';\r\n\r\n// import 'echarts/lib/component/graphic';\r\n// import 'echarts/lib/component/grid';\r\nimport 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/tooltip';\r\n// import 'echarts/lib/component/polar';\r\n// import 'echarts/lib/component/geo';\r\n// import 'echarts/lib/component/parallel';\r\n// import 'echarts/lib/component/singleAxis';\r\n// import 'echarts/lib/component/brush';\r\n\r\nimport 'echarts/lib/component/title';\r\n\r\n// import 'echarts/lib/component/dataZoom';\r\n// import 'echarts/lib/component/visualMap';\r\n\r\n// import 'echarts/lib/component/markPoint';\r\n// import 'echarts/lib/component/markLine';\r\n// import 'echarts/lib/component/markArea';\r\n\r\n// import 'echarts/lib/component/timeline';\r\nimport 'echarts/lib/component/toolbox';\r\n// import { Rect } from 'echarts/lib/util/graphic';\r\n\r\n// import 'zrender/lib/vml/vml';\r\n\r\nimport  { CATEGORIES } from '../constants';\r\n\r\nimport Charts from './CommonCharts';\r\n\r\nconst titleConfig = {\r\n  left: 'center',\r\n  top: 0,\r\n  textStyle: {\r\n    color: '#000000'\r\n  }\r\n};\r\nconst toolboxConfig = {\r\n  feature: {\r\n    saveAsImage: { show: true }\r\n  },\r\n  right: 40\r\n};\r\nconst legendConfig = {\r\n  left: 40\r\n};\r\nconst styles = {\r\n  margin: '40px 0',\r\n  height: '500px'\r\n};\r\nconst tooltipConifg = {\r\n  trigger: 'axis',\r\n  axisPointer: {\r\n    type: 'cross',\r\n    crossStyle: {\r\n      color: '#999'\r\n    }\r\n  }\r\n};\r\n\r\nfunction ChartView(props) {\r\n\r\n  let cityCategoryCloseAverageHandleTimeSeries = [];\r\n  let newAddedCities = [];\r\n  for (let cityName in props.cityGraphData.cityCategoryCloseAverageHandleTimeData) {\r\n    newAddedCities = [\r\n      ...newAddedCities, cityName\r\n    ];\r\n    cityCategoryCloseAverageHandleTimeSeries = [\r\n      ...cityCategoryCloseAverageHandleTimeSeries,\r\n      {\r\n        name: cityName,\r\n        type: 'bar',\r\n        barMaxWidth: 20,\r\n        label: {\r\n          position: 'top',\r\n          color: '#333',\r\n          show: true,\r\n          formatter: '{c}'\r\n        },\r\n        data: props.cityGraphData.cityCategoryCloseAverageHandleTimeData[cityName]\r\n      }\r\n    ];\r\n  }\r\n\r\n  let citySecondCategoryOpenAverageHandleTimeSeries = [];\r\n  let openAverageHandleTimeCities = [];\r\n  for (let cityName in props.citySecondCategoryOpenAverageHandleTimeData) {\r\n    openAverageHandleTimeCities = [\r\n      ...openAverageHandleTimeCities, cityName\r\n    ];\r\n    citySecondCategoryOpenAverageHandleTimeSeries = [\r\n      ...citySecondCategoryOpenAverageHandleTimeSeries,\r\n      {\r\n        name: cityName,\r\n        type: 'bar',\r\n        barMaxWidth: 20,\r\n        label: {\r\n          position: 'top',\r\n          color: '#333',\r\n          show: true,\r\n          formatter: '{c}'\r\n        },\r\n        data: props.citySecondCategoryOpenAverageHandleTimeData[cityName]\r\n      }\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Charts graphData={props.areaGraphData} xAxis={props.allAreas}\r\n        title= {{\r\n          title1: \"大区日常维修总体关闭率\",\r\n          title2: \"大区新增维修关闭率\",\r\n          title3: \"大区需处理关闭率\",\r\n          title4: \"大区新增平均处理时长\",\r\n          title5: \"大区剩余未关分布图\",\r\n        }}\r\n        />\r\n      <Charts graphData={props.categoryGraphData} xAxis={props.allCategories}\r\n        title= {{\r\n          title1: \"分类日常维修总体关闭率\",\r\n          title2: \"分类新增维修关闭率\",\r\n          title3: \"分类需处理关闭率\",\r\n          title4: \"分类新增平均处理时长\",\r\n          title5: \"分类剩余未关分布图\",\r\n        }}\r\n      />\r\n      <Charts graphData={props.cityGraphData} xAxis={props.allCities}\r\n        title={{\r\n          title1: \"各城市日常维修总体关闭率\",\r\n          title2: \"各城市新增维修关闭率\",\r\n          title3: \"各城市需处理关闭率\",\r\n          title4: \"各城市新增平均处理时长\",\r\n          title5: \"各城市剩余未关分布图\",\r\n        }}\r\n      />\r\n      <Charts graphData={props.projectGraphData} xAxis={props.allProjects}\r\n        title={{\r\n          title1: \"各项目日常维修总体关闭率\",\r\n          title2: \"各项目新增维修关闭率\",\r\n          title3: \"各项目需处理关闭率\",\r\n          title4: \"各项目新增平均处理时长\",\r\n          title5: \"各项目剩余未关分布图\",\r\n        }}\r\n      />\r\n      <Charts graphData={props.stageGraphData} xAxis={props.allStages}\r\n        title= {{\r\n          title1: \"各项目分期日常维修总体关闭率\",\r\n          title2: \"各项目分期新增维修关闭率\",\r\n          title3: \"各项目分期需处理关闭率\",\r\n          title4: \"各项目分期新增平均处理时长\",\r\n          title5: \"各项目分期剩余未关分布图\",\r\n        }}\r\n        />\r\n      {/* <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关分类图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '一级分类',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.categoryOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row> */}\r\n    </div>\r\n  );\r\n\r\n  // return (\r\n  //   <div>\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各城市日常维修总体关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.allCities,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '累计受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '累计受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#333',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityGraphData.totalAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityGraphData.overallCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各项目日常维修总体关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.allProjects,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '累计受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '累计受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectGraphData.totalAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectGraphData.overallCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各项目分期日常维修总体关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.allStages,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 height: 300,\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '累计受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '累计受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.stageGraphData.totalAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.stageGraphData.overallCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '剩余未关城市分布图',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'item',\r\n  //             formatter: '{b}:{c}({d}%)'\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           series: [\r\n  //             {\r\n  //               name: '城市剩余未关',\r\n  //               type: 'pie',\r\n  //               radius: '60%',\r\n  //               label: {\r\n  //                 formatter: '{b}:{c}({d}%)',\r\n  //                 color: '#000'\r\n  //               },\r\n  //               data: props.cityOpenData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '剩余未关二级分类分布图',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'item',\r\n  //             formatter: '{b}:{c}({d}%)'\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           series: [\r\n  //             {\r\n  //               name: '二级分类',\r\n  //               type: 'pie',\r\n  //               radius: '60%',\r\n  //               label: {\r\n  //                 formatter: '{b}:{c}({d}%)',\r\n  //                 color: '#000'\r\n  //               },\r\n  //               data: props.secondCategoryOpenData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各城市新增维修关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.cities,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '新增受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '新增受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNewAddedAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNewAddedCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '项目新增关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.newAddedProjects,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '新增受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '新增受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNewAddedAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNewAddedCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '分期新增关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.newAddedStages,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '新增受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '新增受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.stageNewAddedAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.stageNewAddedCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '新增维修城市分布图',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'item',\r\n  //             formatter: '{b}:{c}({d}%)'\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           series: [\r\n  //             {\r\n  //               name: '城市',\r\n  //               type: 'pie',\r\n  //               radius: '60%',\r\n  //               label: {\r\n  //                 formatter: '{b}:{c}({d}%)',\r\n  //                 color: '#000'\r\n  //               },\r\n  //               data: props.cityNewAddedAcceptData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '新增维修二级分类分布图',\r\n  //             left: 'center',\r\n  //             textStyle: {\r\n  //               color: '#000000'\r\n  //             }\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'item',\r\n  //             formatter: '{b}:{c}({d}%)'\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           series: [\r\n  //             {\r\n  //               name: '城市',\r\n  //               type: 'pie',\r\n  //               radius: '60%',\r\n  //               label: {\r\n  //                 formatter: '{b}:{c}({d}%)',\r\n  //                 color: '#000'\r\n  //               },\r\n  //               data: props.secondCategoryNewAddedAcceptData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各城市需处理关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           legend: {\r\n  //             data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n  //             ...legendConfig\r\n  //           },\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.cities,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '需处理受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '比率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '需处理受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNeedHandleAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '及时关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNeedHandleCloseOnTimeRateData\r\n  //             },\r\n  //             {\r\n  //               name: '总体关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNeedHandleCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各项目需处理关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           legend: {\r\n  //             data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n  //             ...legendConfig\r\n  //           },\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.needHandleProjects,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '需处理受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '比率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '需处理受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNeedHandleAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '及时关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNeedHandleCloseOnTimeRateData\r\n  //             },\r\n  //             {\r\n  //               name: '总体关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNeedHandleCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '平均处理时长城市分布图',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.cities,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '处理时长（天）'\r\n  //             },\r\n  //           ],\r\n  //           legend: {\r\n  //             data: ['已关闭', '剩余未关'],\r\n  //             ...legendConfig\r\n  //           },\r\n  //           series: [\r\n  //             {\r\n  //               name: '已关闭',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#333',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityCloseAverageHandleTimeData\r\n  //             },\r\n  //             {\r\n  //               name: '剩余未关',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#333',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityOpenAverageHandleTimeData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '已关闭维修分类平均处理时长',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: DEFAULT_SECOND_CATEGORIES,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '处理时长（天）'\r\n  //             },\r\n  //           ],\r\n  //           legend: {\r\n  //             data: newAddedCities,\r\n  //             ...legendConfig\r\n  //           },\r\n  //           series: cityCategoryCloseAverageHandleTimeSeries\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '剩余未关维修分类平均处理时长',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: DEFAULT_SECOND_CATEGORIES,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '处理时长（天）'\r\n  //             },\r\n  //           ],\r\n  //           legend: {\r\n  //             data: openAverageHandleTimeCities,\r\n  //             ...legendConfig\r\n  //           },\r\n  //           series: citySecondCategoryOpenAverageHandleTimeSeries\r\n  //         }}\r\n  //       />\r\n  //     </Row> */}\r\n  //   </div>\r\n  // );\r\n}\r\n\r\nexport default ChartView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ProjectTable(props) {\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title={KEY_PROJECT_NAME}\r\n      key={KEY_PROJECT_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredProjects.length > 0 ?\r\n        props.data.filter(item => props.filteredProjects.indexOf(item[KEY_PROJECT_NAME]) !== -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nProjectTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ProjectTable;\r\n","import {\r\n  DEFAULT_STATISTIC_ITEMS,\r\n  KEY_TICKET_TOTAL,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  STAGES,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  STATISTIC_ITEMS,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  CATEGORIES,\r\n  RATE_STATISTIC_ITEMS\r\n} from './constants';\r\n\r\nimport XLSX from 'xlsx';\r\n\r\nexport function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|（.*?）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}\r\n\r\nexport function filterProject(projectName, reg) {\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function filterProjectStage(projectName) {\r\n  let filteredName = null;\r\n  for (let stage of STAGES) {\r\n    if (projectName.indexOf(stage) != -1) {\r\n      filteredName = projectName.substring(0, projectName.indexOf(stage));\r\n      return filteredName;\r\n    }\r\n  }\r\n  return projectName;\r\n}\r\n\r\nexport function formatToTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToRateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of RATE_STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of STATISTIC_ITEMS) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[category] = data[category][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[secondCategory] = data[secondCategory][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function readExcelData (fileList) {\r\n  return new Promise((resolve, reject) => {\r\n    let fileReader = new FileReader();\r\n    let data = [];\r\n\r\n    let readFile = (index) => {\r\n      if (index < fileList.length) {\r\n        fileReader.onload = (event) => {\r\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\r\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\r\n          data = [...data, ...XLSX.utils.sheet_to_json(sheet, { blankrows: false })];\r\n          readFile(index + 1);\r\n        }\r\n        fileReader.readAsBinaryString(fileList[index]);\r\n      } else {\r\n        resolve(data);\r\n      }\r\n    };\r\n    readFile(0);\r\n  });\r\n}\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport ProjectTable from './ProjectTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\nimport {\r\n  formatToTable,\r\n  formatToRateTable\r\n} from '../utils';\r\n\r\nclass ProjectView extends React.Component {\r\n  static defaultProps = {\r\n    data: {}\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredProjects: []\r\n    }\r\n  }\r\n\r\n  filterProjects = (projects) => {\r\n    if (projects.length > 0) {\r\n      this.setState({\r\n        filteredProjects: projects\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredProjects: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let projects = [];\r\n    for (let item in this.props.data) {\r\n      for (let projectName in this.props.data[item]) {\r\n        if (projects.indexOf(projectName) === -1) {\r\n          projects = [...projects, projectName];\r\n        }\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的项目'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterProjects}\r\n                >\r\n                  {\r\n                    projects.map((project) => (\r\n                      <Select.Option key={project}>{project}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={formatToTable(this.props.data.periodNewAddedResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.thisYearBeforePeriodResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearBeforePeriodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={formatToTable(this.props.data.beforePeriodNeedHandleResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={formatToTable(this.props.data.periodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={formatToRateTable(this.props.data.rateResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectView;\r\n","import {\r\n  COL_REPORT_TIME,\r\n  COL_OVERTIME_WARN,\r\n  COL_PROJECT_STAGE,\r\n  COL_FIRST_CLASS,\r\n  COL_CURRENT_STATUS,\r\n  COL_PAUSE,\r\n  COL_CLOSE_TIME_1,\r\n  COL_CLOSE_TIME_2,\r\n  COL_CLOSE_TIME_3,\r\n  TICKET_NOT_RESPONSED,\r\n  KEY_TICKET_TOTAL,\r\n  TICKET_STATUS,\r\n  CATEGORIES,\r\n  STATISTIC_ITEMS,\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME,\r\n  TICKET_CLOSE_HANDLE_TIME_0_7,\r\n  TICKET_CLOSE_HANDLE_TIME_7_15,\r\n  TICKET_CLOSE_HANDLE_TIME_15_30,\r\n  TICKET_CLOSE_HANDLE_TIME_30_60,\r\n  TICKET_CLOSE_HANDLE_TIME_OVER_60,\r\n  TICKET_OPEN_HANDLE_TIME_0_7,\r\n  TICKET_OPEN_HANDLE_TIME_7_15,\r\n  TICKET_OPEN_HANDLE_TIME_15_30,\r\n  TICKET_OPEN_HANDLE_TIME_30_60,\r\n  TICKET_OPEN_HANDLE_TIME_OVER_60,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  CATEGORY_UNCLASSIFY,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  RATE_STATISTIC_ITEMS\r\n} from '../constants';\r\n\r\nimport moment from 'moment';\r\n\r\nexport const initStatisticItem = () => {\r\n  let map = {};\r\n  for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n    map[category] = {};\r\n    for (let itemName of STATISTIC_ITEMS) {\r\n      map[category][itemName] = 0;\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\nexport const initRate = () => {\r\n  let map = {};\r\n  for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n    map[category] = {};\r\n    for (let itemName of RATE_STATISTIC_ITEMS) {\r\n      map[category][itemName] = 0;\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\nexport const getCategory = ticket => ticket[COL_FIRST_CLASS] || CATEGORY_UNCLASSIFY;\r\n\r\nexport const formatStageToTable = (data) => {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nconst STAGE = /\\d*期/;\r\n\r\nexport function filterProjectName(name) {\r\n  let filteredName = name;\r\n  if (name.match(STAGE)) {\r\n    filteredName = name.substring(0, name.match(STAGE).index);\r\n  }\r\n  return filteredName;\r\n}\r\n\r\nconst statisticCloseHandleTime = (ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration) => {\r\n  let closeHandleTime = moment.duration(ticketCloseTime.diff(ticketReportTime))\r\n    .subtract(ticketPauseDuration, 'hours').as('days');\r\n  ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n    closeHandleTime;\r\n\r\n  if (closeHandleTime < 7) {\r\n    ticketStatistic[TICKET_CLOSE_HANDLE_TIME_0_7]++;\r\n  } else if (closeHandleTime < 15) {\r\n    ticketStatistic[TICKET_CLOSE_HANDLE_TIME_7_15]++;\r\n  } else if (closeHandleTime < 30) {\r\n    ticketStatistic[TICKET_CLOSE_HANDLE_TIME_15_30]++;\r\n  } else if (closeHandleTime < 60) {\r\n    ticketStatistic[TICKET_CLOSE_HANDLE_TIME_30_60]++;\r\n  } else {\r\n    ticketStatistic[TICKET_CLOSE_HANDLE_TIME_OVER_60]++;\r\n  }\r\n}\r\n\r\nconst statisticOpenHandleTime = (ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration) => {\r\n  let openHandleTime = moment.duration(moment(closeEndTime).diff(ticketReportTime))\r\n    .subtract(ticketPauseDuration, 'hours').as('days');\r\n  ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n    openHandleTime;\r\n\r\n  if (openHandleTime < 7) {\r\n    ticketStatistic[TICKET_OPEN_HANDLE_TIME_0_7]++;\r\n  } else if (openHandleTime < 15) {\r\n    ticketStatistic[TICKET_OPEN_HANDLE_TIME_7_15]++;\r\n  } else if (openHandleTime < 30) {\r\n    ticketStatistic[TICKET_OPEN_HANDLE_TIME_15_30]++;\r\n  } else if (openHandleTime < 60) {\r\n    ticketStatistic[TICKET_OPEN_HANDLE_TIME_30_60]++;\r\n  } else {\r\n    ticketStatistic[TICKET_OPEN_HANDLE_TIME_OVER_60]++;\r\n  }\r\n}\r\n\r\n// 统计周期内新增\r\nexport const statisticPeriodNewAddedTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 关闭 + 剩余未关\r\n    if (ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.COMMENTED ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      statisticCloseHandleTime(ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) || ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计时间-受理时间-累计暂停时长\r\n      statisticOpenHandleTime(ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期前遗留\r\nexport const statisticThisYearBeforePeriodTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      statisticCloseHandleTime(ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) || ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      statisticOpenHandleTime(ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期前遗留累计\r\nexport const statisticThisYearBeforePeriodTotalTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW ||\r\n      ticketStatus === TICKET_STATUS.CLOSED ||\r\n      ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n  }\r\n\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  return dataMap;\r\n}\r\n\r\n// 上年度统计周期前遗留\r\nexport const statisticLastYearBeforePeriodTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      statisticCloseHandleTime(ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      statisticOpenHandleTime(ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 上年度统计周期前遗留累计\r\nexport const statisticLastYearBeforePeriodTotalTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      statisticCloseHandleTime(ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      statisticOpenHandleTime(ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期累计\r\nexport const statisticThisYearTotalTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      statisticCloseHandleTime(ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      statisticOpenHandleTime(ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 统计周期前需处理\r\nexport const statisticBeforePeriodNeedHandleResult = (array, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let result of array) {\r\n    for (let name in result) {\r\n      if (dataMap[name] == null) {\r\n        dataMap[name] = initStatisticItem();\r\n      }\r\n      for (let category in dataMap[name]) {\r\n        for (let item of STATISTIC_ITEMS) {\r\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\r\n            let ticketCloseCount = result[name][category][TICKET_CLOSE];\r\n            let ticketCloseProcessTime = result[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n            dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] +=\r\n              ticketCloseCount * ticketCloseProcessTime;\r\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\r\n            let ticketOpenProcessTime = result[name][category][TICKET_OPEN_PROCESS_TIME];\r\n            let ticketOpenCount = result[name][category][TICKET_OPEN];\r\n            dataMap[name][category][TICKET_OPEN_PROCESS_TIME] +=\r\n              ticketOpenCount * ticketOpenProcessTime;\r\n          }\r\n          else {\r\n            dataMap[name][category][item] +=\r\n              result[name][category][item];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // get average process time\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 统计周期累计\r\nexport const statisticPeriodTotalResult = (array, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let result of array) {\r\n    for (let name in result) {\r\n      if (dataMap[name] == null) {\r\n        dataMap[name] = initStatisticItem();\r\n      }\r\n      for (let category in dataMap[name]) {\r\n        for (let item of STATISTIC_ITEMS) {\r\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\r\n            let ticketCloseCount = result[name][category][TICKET_CLOSE];\r\n            let ticketCloseProcessTime = result[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n            dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] +=\r\n              ticketCloseCount * ticketCloseProcessTime;\r\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\r\n            let ticketOpenProcessTime = result[name][category][TICKET_OPEN_PROCESS_TIME];\r\n            let ticketOpenCount = result[name][category][TICKET_OPEN];\r\n            dataMap[name][category][TICKET_OPEN_PROCESS_TIME] +=\r\n              ticketOpenCount * ticketOpenProcessTime;\r\n          }\r\n          else {\r\n            dataMap[name][category][item] +=\r\n              result[name][category][item];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // get average process time\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n\r\n  return dataMap;\r\n}\r\n\r\nexport const statisticRate = (statisticMap, statisticItem, rateMap) => {\r\n  for (let name in statisticMap) {\r\n    for (let category in rateMap[name]) {\r\n      if (statisticMap[name][category][TICKET_ACCEPT] > 0) {\r\n        if (statisticItem === NEW_ADD_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === REMAIN_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === OVERALL_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === CLOSE_ON_TIME_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE_ON_TIME] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const statistc = (periodTickets, beforePeriodTickets, thisYearTotalTickets,\r\n  lastYearBeforePeriodTickets, startTime, endTime, col, allItems) => {\r\n  let yearStartTime = moment(startTime).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\r\n  let data = {};\r\n  data.periodNewAddedResult = statisticPeriodNewAddedTickets(periodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.thisYearBeforePeriodResult = statisticThisYearBeforePeriodTickets(beforePeriodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.thisYearBeforePeriodTotalResult = statisticThisYearBeforePeriodTotalTickets(beforePeriodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.lastYearBeforePeriodResult = statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.lastYearBeforePeriodTotalResult = statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\r\n    yearStartTime, endTime, col, allItems);\r\n  data.thisYearTotalResult = statisticThisYearTotalTickets(thisYearTotalTickets,\r\n    yearStartTime, endTime, col, allItems);\r\n  data.beforePeriodNeedHandleResult = statisticBeforePeriodNeedHandleResult([\r\n    data.periodNewAddedResult, data.thisYearBeforePeriodResult,\r\n    data.lastYearBeforePeriodResult], allItems);\r\n  data.periodTotalResult = statisticPeriodTotalResult([\r\n    data.lastYearBeforePeriodTotalResult,\r\n    data.thisYearTotalResult\r\n  ], allItems);\r\n  data.rateResult = {};\r\n  for (let name of allItems) {\r\n    data.rateResult[name] = initRate();\r\n  }\r\n  statisticRate(data.periodNewAddedResult, NEW_ADD_CLOSE_RATE, data.rateResult);\r\n  statisticRate(data.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, data.rateResult);\r\n  statisticRate(data.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, data.rateResult);\r\n  statisticRate(data.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, data.rateResult);\r\n  statisticRate(data.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, data.rateResult);\r\n\r\n  return data;\r\n}\r\n\r\nexport const formatGraphData = (data, allItems) => {\r\n  let graphData = {\r\n    totalAcceptData: [],\r\n    overallCloseRateData: [],\r\n    newAddedAcceptData: [],\r\n    newAddedCloseRateData: [],\r\n    needHandleAcceptData: [],\r\n    needHandleCloseOnTimeRateData: [],\r\n    needHandleCloseRateData: [],\r\n    openData: [],\r\n    closeAverageHandleTimeData: [],\r\n    openAverageHandleTimeData: []\r\n  };\r\n  for (let name of allItems) {\r\n    graphData.totalAcceptData = [\r\n      ...graphData.totalAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.periodTotalResult[name][KEY_TICKET_TOTAL][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.overallCloseRateData = [\r\n      ...graphData.overallCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[name][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.newAddedAcceptData = [\r\n      ...graphData.newAddedAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[name][KEY_TICKET_TOTAL][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.newAddedCloseRateData = [\r\n      ...graphData.newAddedCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[name][KEY_TICKET_TOTAL][NEW_ADD_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.needHandleAcceptData = [\r\n      ...graphData.needHandleAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.beforePeriodNeedHandleResult[name][KEY_TICKET_TOTAL][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.needHandleCloseOnTimeRateData = [\r\n      ...graphData.needHandleCloseOnTimeRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[name][KEY_TICKET_TOTAL][CLOSE_ON_TIME_RATE]\r\n      }\r\n    ];\r\n    graphData.needHandleCloseRateData = [\r\n      ...graphData.needHandleCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[name][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.closeAverageHandleTimeData = [\r\n      ...graphData.closeAverageHandleTimeData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[name][KEY_TICKET_TOTAL][TICKET_CLOSE_PROCESS_TIME]\r\n      }\r\n    ];\r\n    graphData.openAverageHandleTimeData = [\r\n      ...graphData.openAverageHandleTimeData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[name][KEY_TICKET_TOTAL][TICKET_OPEN_PROCESS_TIME]\r\n      }\r\n    ];\r\n    graphData.openData = [\r\n      ...graphData.openData,\r\n      {\r\n        name: name,\r\n        value: data.periodTotalResult[name][KEY_TICKET_TOTAL][TICKET_OPEN]\r\n      }\r\n    ]\r\n  }\r\n\r\n  return graphData;\r\n}\r\n\r\nexport const formatCategoryGraphData = (data, allItems, area) => {\r\n  let graphData = {\r\n    totalAcceptData: [],\r\n    overallCloseRateData: [],\r\n    newAddedAcceptData: [],\r\n    newAddedCloseRateData: [],\r\n    needHandleAcceptData: [],\r\n    needHandleCloseOnTimeRateData: [],\r\n    needHandleCloseRateData: [],\r\n    openData: [],\r\n    closeAverageHandleTimeData: [],\r\n    openAverageHandleTimeData: []\r\n  };\r\n  for (let name of allItems) {\r\n    graphData.totalAcceptData = [\r\n      ...graphData.totalAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.periodTotalResult[area][name][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.overallCloseRateData = [\r\n      ...graphData.overallCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[area][name][OVERALL_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.newAddedAcceptData = [\r\n      ...graphData.newAddedAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[area][name][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.newAddedCloseRateData = [\r\n      ...graphData.newAddedCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[area][name][NEW_ADD_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.needHandleAcceptData = [\r\n      ...graphData.needHandleAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.beforePeriodNeedHandleResult[area][name][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.needHandleCloseOnTimeRateData = [\r\n      ...graphData.needHandleCloseOnTimeRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[area][name][CLOSE_ON_TIME_RATE]\r\n      }\r\n    ];\r\n    graphData.needHandleCloseRateData = [\r\n      ...graphData.needHandleCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[area][name][OVERALL_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.closeAverageHandleTimeData = [\r\n      ...graphData.closeAverageHandleTimeData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[area][name][TICKET_CLOSE_PROCESS_TIME]\r\n      }\r\n    ];\r\n    graphData.openAverageHandleTimeData = [\r\n      ...graphData.openAverageHandleTimeData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[area][name][TICKET_OPEN_PROCESS_TIME]\r\n      }\r\n    ];\r\n    graphData.openData = [\r\n      ...graphData.openData,\r\n      {\r\n        name: name,\r\n        value: data.periodTotalResult[area][name][TICKET_OPEN]\r\n      }\r\n    ]\r\n  }\r\n\r\n  return graphData;\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport DataForm from './components/DataForm';\nimport ChartView from './components/ChartView';\nimport ProjectView from './components/ProjectView';\nimport { Row, Col, message, LocaleProvider, Tabs } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  TICKET_SYSTEM_COUNT,\n  TICKET_ACCEPT,\n  TICKET_OPEN,\n  TICKET_VALIDATE,\n  TICKET_PAUSE,\n  TICKET_INVALID,\n  TICKET_CLOSE,\n  TICKET_CLOSE_NORMAL,\n  TICKET_CLOSE_ABNORMAL,\n  TICKET_CLOSE_ON_TIME,\n  TICKET_RESPONSE_IN_30_MIN,\n  TICKET_RESPONSE_IN_30_HOUR,\n  TICKET_CLOSE_PROCESS_TIME,\n  TICKET_OPEN_PROCESS_TIME,\n  DEFAULT_STATISTIC_ITEMS,\n  KEY_REPORT_TIME,\n  KEY_PROJECT_NAME,\n  KEY_SECOND_CATEGORY,\n  KEY_TICKET_STATUS,\n  KEY_IS_PROCESS_EXCCED,\n  KEY_FIRST_RESPONSE_TIME,\n  KEY_PROCESS_TIME,\n  KEY_CLOSE_TIME,\n  DEFAULT_SECOND_CATEGORIES,\n  KEY_STATISTIC_ITEM,\n  KEY_TICKET_TOTAL,\n  KEY_CITY_NAME,\n  NEW_ADD_CLOSE_RATE,\n  REMAIN_CLOSE_RATE,\n  OVERALL_CLOSE_RATE,\n  RESPONSE_IN_30_MIN_RATE,\n  RESPONSE_IN_30_HOUR_RATE,\n  CLOSE_ON_TIME_RATE,\n  TOTAL_OVERALL_CLOSE_RATE,\n  RATE_STATISTIC_ITEMS,\n  CATEGORY_UNCLASSIFY,\n  COL_FIRST_CLASS,\n  COL_CURRENT_STATUS,\n  COL_PROJECT_STAGE,\n  COL_PROJECT,\n  COL_CITY_COMPANY,\n  COL_AREA,\n  COL_REPORT_TIME,\n  CATEGORIES\n} from './constants';\n\nimport {\n  filterProjectName,\n  parseTime,\n  filterProjectStage,\n  formatToAreaTable,\n  formatToAreaTateTable,\n  readExcelData\n} from './utils';\n\nimport { connect } from 'react-redux';\nimport { addCategories, addTicketStates } from './store/actions';\n\nimport * as Util from './functions/utils';\n\n// global variables\nlet allCategory = [];\nlet allTicketState = [];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stageGraphData: {},\n      cityGraphData: {},\n      projectGraphData: {},\n      areaGraphData: {},\n      categoryGraphData: {}\n    }\n  }\n\n  start = (fileList, startTime, endTime) => {\n    const { addCategories, addTicketStates } = this.props;\n    this.setState({ loading: true });\n    readExcelData(fileList).then((data) => {\n      let allStages = [], allProjects = [], allCities = [], allAreas = [];\n      // get all categories and ticket states\n      for (let ticket of data) {\n        let category = Util.getCategory(ticket);\n        if (allCategory.indexOf(category) === -1) {\n          allCategory = [...allCategory, category];\n        }\n        let state = ticket[COL_CURRENT_STATUS];\n        if (allTicketState.indexOf(state) === -1) {\n          allTicketState = [...allTicketState, state];\n        }\n\n        // get all stages\n        let stage = ticket[COL_PROJECT_STAGE];\n        if (allStages.indexOf(stage) === -1) {\n          allStages = [\n            ...allStages,\n            stage\n          ];\n        }\n        // get all projects\n        let project = ticket[COL_PROJECT];\n        if (allProjects.indexOf(project) === -1) {\n          allProjects = [\n            ...allProjects,\n            project\n          ];\n        }\n        // get all cities\n        let city = ticket[COL_CITY_COMPANY];\n        if (allCities.indexOf(city) === -1) {\n          allCities = [\n            ...allCities,\n            city\n          ];\n        }\n        // get all area\n        let area = ticket[COL_AREA];\n        if (allAreas.indexOf(area) === -1) {\n          allAreas = [\n            ...allAreas,\n            area\n          ];\n        }\n      }\n      addCategories(allCategory);\n      addTicketStates(allTicketState);\n\n      let allCategories = CATEGORIES;\n\n      this.setState({\n        allStages,\n        allProjects,\n        allCities,\n        allAreas,\n        allCategories\n      });\n\n      let yearStartTime = moment(startTime).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n      let periodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime >= startTime && ticketReportTime <= endTime;\n      });\n      let beforePeriodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime >= yearStartTime && ticketReportTime < startTime;\n      });\n      let thisYearTotalTickets = data.filter((ticket) => {\n        let reportTime = moment(ticket[KEY_REPORT_TIME]);\n        return reportTime <= endTime && reportTime >= yearStartTime;\n      });\n      let lastYearBeforePeriodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime < yearStartTime\n      });\n\n      // 统计分期\n      let stageData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_PROJECT_STAGE, allStages)\n      this.setState({\n        stageData\n      });\n\n      // 统计项目\n      let projectData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_PROJECT, allProjects)\n      this.setState({\n        projectData\n      });\n\n      // 统计城市\n      let cityData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_CITY_COMPANY, allCities)\n      this.setState({\n        cityData\n      });\n\n      // 统计大区\n      let areaData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_AREA, allAreas)\n      this.setState({\n        areaData\n      });\n\n      // 画图\n      let stageGraphData = Util.formatGraphData(stageData, allStages);\n      this.setState({\n        stageGraphData\n      })\n\n      let projectGraphData = Util.formatGraphData(projectData, allProjects);\n      this.setState({\n        projectGraphData\n      });\n\n      let cityGraphData = Util.formatGraphData(cityData, allCities);\n      this.setState({\n        cityGraphData\n      });\n\n      let areaGraphData = Util.formatGraphData(areaData, allAreas);\n      this.setState({\n        areaGraphData\n      });\n\n      // 统计分类分布图\n      let categoryGraphData = Util.formatCategoryGraphData(areaData, allCategories, allAreas[0]);\n      this.setState({\n        categoryGraphData\n      });\n\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const tabChart = (\n      <ChartView\n        stageGraphData={this.state.stageGraphData}\n        projectGraphData={this.state.projectGraphData}\n        cityGraphData={this.state.cityGraphData}\n        areaGraphData={this.state.areaGraphData}\n        categoryGraphData={this.state.categoryGraphData}\n        allStages={this.state.allStages}\n        allProjects={this.state.allProjects}\n        allCities={this.state.allCities}\n        allAreas={this.state.allAreas}\n        allCategories={this.state.allCategories}\n      />\n    );\n\n    const tabArea = (\n      <ProjectView\n        data={this.state.areaData}\n      />\n    );\n\n    const tabCity = (\n      <ProjectView\n        data={this.state.cityData}\n      />\n    )\n\n    const tabProject = (\n      <ProjectView\n        data={this.state.projectData}\n      />\n    );\n\n    const tabStage = (\n      <ProjectView\n        data={this.state.stageData}\n      />\n    );\n\n    return (\n      <LocaleProvider locale={zh_CN}>\n        <div>\n          <h2 className=\"text--center heading\">统计辅助工具</h2>\n          <DataForm\n            onStart={this.start}\n            onExport={this.exportExcel}\n            loading={this.state.loading}\n          />\n          <Row style={{ margin: '40px 0' }}>\n            <Col span={22} offset={1}>\n              <Tabs type=\"card\">\n                <Tabs.TabPane tab=\"统计图\" key=\"统计图\">{tabChart}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"大区\" key=\"大区\">{tabArea}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"城市\" key=\"城市\">{tabCity}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"项目\" key=\"项目\">{tabProject}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"分期\" key=\"分期\">{tabStage}</Tabs.TabPane>\n              </Tabs>\n            </Col>\n          </Row>\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  addCategories,\n  addTicketStates\n}\n\nconst ConnectedApp = connect(null, mapDispatchToProps)(App);\n\nexport default ConnectedApp;\n","import {\r\n  ADD_CATEGORY,\r\n  ADD_CATEGORIES,\r\n  ADD_TICKET_STATES\r\n} from '../action-types';\r\n\r\nexport const addCategory = category => ({\r\n  type: ADD_CATEGORY,\r\n  payload: {\r\n    category\r\n  }\r\n});\r\n\r\nexport const addCategories = categories => ({\r\n  type: ADD_CATEGORIES,\r\n  payload: {\r\n    categories\r\n  }\r\n});\r\n\r\nexport const addTicketStates = ticketStates => ({\r\n  type: ADD_TICKET_STATES,\r\n  payload: {\r\n    ticketStates\r\n  }\r\n})\r\n","export const ADD_CATEGORY = 'ADD_CATEGORY';\r\nexport const ADD_CATEGORIES = 'ADD_CATEGORIES';\r\nexport const ADD_TICKET_STATES = 'ADD_TICKET_STATES';\r\n","import { combineReducers } from 'redux';\r\nimport category from './category';\r\nimport ticketState from './ticket-state';\r\n\r\nconst reducer = combineReducers({\r\n  category,\r\n  ticketState\r\n});\r\n\r\nexport default reducer;\r\n","import {\r\n  ADD_CATEGORY,\r\n  ADD_CATEGORIES\r\n} from '../action-types';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_CATEGORY:\r\n      const { category } = action.payload;\r\n      return [\r\n        ...state,\r\n        category\r\n      ];\r\n    case ADD_CATEGORIES:\r\n      const { categories } = action.payload;\r\n      return [\r\n        ...state,\r\n        ...categories\r\n      ]\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  ADD_TICKET_STATES\r\n} from '../action-types';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_TICKET_STATES:\r\n      const { ticketStates } = action.payload;\r\n      return [\r\n        ...state,\r\n        ...ticketStates\r\n      ];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}