{"version":3,"sources":["components/DataForm.js","constants.js","components/ChartView.js","components/ProjectTable.js","utils.js","components/ProjectView.js","functions/utils.js","App.js","store/actions/index.js","store/action-types.js","store/reducers/index.js","store/reducers/category.js","store/reducers/ticket-state.js","store/index.js","index.js"],"names":["DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startTime","Date","set","hour","minute","second","endTime","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","es_col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","toConsumableArray","concat","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","React","Component","defaultPorps","onExport","WrapDataForm","create","TICKET_ACCEPT","TICKET_OPEN","TICKET_CLOSE_PROCESS_TIME","TICKET_OPEN_PROCESS_TIME","KEY_REPORT_TIME","KEY_PROJECT_NAME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","NEW_ADD_CLOSE_RATE","REMAIN_CLOSE_RATE","OVERALL_CLOSE_RATE","CLOSE_ON_TIME_RATE","TOTAL_OVERALL_CLOSE_RATE","RATE_STATISTIC_ITEMS","COL_AREA","COL_CITY_COMPANY","COL_PROJECT","COL_PROJECT_STAGE","COL_CURRENT_STATUS","COL_REPORT_TIME","TICKET_STATUS","CATEGORIES","STATISTIC_ITEMS","ChartView","titleConfig","left","top","textStyle","color","toolboxConfig","feature","saveAsImage","show","right","styles","margin","height","cityCategoryCloseAverageHandleTimeSeries","newAddedCities","cityName","cityGraphData","cityCategoryCloseAverageHandleTimeData","name","barMaxWidth","position","formatter","data","citySecondCategoryOpenAverageHandleTimeSeries","openAverageHandleTimeCities","citySecondCategoryOpenAverageHandleTimeData","core_default","style","echarts","option","title","objectSpread","text","tooltip","trigger","axisPointer","crossStyle","toolbox","xAxis","allCities","yAxis","min","max","series","cityTotalAcceptData","yAxisIndex","cityOverallCloseRateData","allProjects","interval","axisLabel","rotate","projectGraphData","projectTotalAcceptData","projectOverallCloseRateData","ProjectTable","projectColumn","table","Column","dataIndex","key","width","otherColumns","map","item","currentPageData","dataSource","filteredProjects","length","filter","pagination","pageSize","scroll","y","size","defaultProps","formatToTable","tableData","rowKey","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","statisticItem","rowData","_arr","_i","category","push","return","formatToRateTable","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_arr2","_i2","ProjectView","filterProjects","projects","projectName","es_select","mode","onChange","project","Option","components_ProjectTable","periodNewAddedResult","thisYearBeforePeriodResult","thisYearBeforePeriodTotalResult","thisYearTotalResult","lastYearBeforePeriodResult","lastYearBeforePeriodTotalResult","beforePeriodNeedHandleResult","periodTotalResult","rateResult","initStatisticItem","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","itemName","initRate","getCategory","ticket","statisticRate","statisticMap","rateMap","toFixed","statistc","periodTickets","beforePeriodTickets","thisYearTotalTickets","lastYearBeforePeriodTickets","col","allItems","yearStartTime","moment","month","date","tickets","closeStartTime","closeEndTime","dataMap","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","ticketCategory","ticketStatistic","ticketStatus","ticketReportTime","ticketPauseDuration","Number","ticketCloseTime","duration","diff","subtract","as","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","ticketCloseCount","ticketCloseProcessTime","ticketOpenProcessTime","ticketOpenCount","statisticPeriodNewAddedTickets","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","statisticThisYearBeforePeriodTickets","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","statisticThisYearBeforePeriodTotalTickets","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","statisticLastYearBeforePeriodTickets","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","statisticLastYearBeforePeriodTotalTickets","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","_iteratorNormalCompletion26","_didIteratorError26","_iteratorError26","_step26","_iterator26","_iteratorNormalCompletion27","_didIteratorError27","_iteratorError27","_step27","_iterator27","statisticThisYearTotalTickets","array","_iteratorNormalCompletion28","_didIteratorError28","_iteratorError28","_step28","_iterator28","_iteratorNormalCompletion29","_didIteratorError29","_iteratorError29","_step29","_iterator29","result","_iteratorNormalCompletion30","_didIteratorError30","_iteratorError30","_step30","_iterator30","statisticBeforePeriodNeedHandleResult","_iteratorNormalCompletion31","_didIteratorError31","_iteratorError31","_step31","_iterator31","_iteratorNormalCompletion32","_didIteratorError32","_iteratorError32","_step32","_iterator32","_iteratorNormalCompletion33","_didIteratorError33","_iteratorError33","_step33","_iterator33","statisticPeriodTotalResult","_iteratorNormalCompletion34","_didIteratorError34","_iteratorError34","_step34","_iterator34","allCategory","allTicketState","App","start","_this$props","addCategories","addTicketStates","fileReader","FileReader","readFile","onload","event","workbook","XLSX","read","target","sheet","Sheets","SheetNames","utils","sheet_to_json","blankrows","readAsBinaryString","readExcelData","allStages","Util","stage","city","reportTime","stageData","projectData","cityData","areaData","cityOpenData","cityNewAddedAcceptData","cityNewAddedCloseRateData","cityNeedHandleAcceptData","cityNeedHandleCloseOnTimeRateData","cityNeedHandleCloseRateData","cityCloseAverageHandleTimeData","cityOpenAverageHandleTimeData","tabChart","components_ChartView","tabArea","components_ProjectView","tabCity","tabProject","tabStage","locale_provider","locale","zh_CN","className","components_DataForm","exportExcel","tabs","TabPane","tab","mapDispatchToProps","categories","payload","ticketStates","ConnectedApp","connect","reducer","combineReducers","arguments","action","ticketState","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.f438f9b7.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {},\n    onExport: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func,\n    onExport: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startTime = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endTime = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startTime, endTime);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              {\n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在统计...': '开始统计'\n              }\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '未关时长（天）';\r\nexport const TICKET_NOT_RESPONSED = '未响应';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\nexport const KEY_CITY_NAME = '城市';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const NEW_ADD_CLOSE_RATE = '新增关闭率';\r\nexport const REMAIN_CLOSE_RATE = '遗留关闭率';\r\nexport const OVERALL_CLOSE_RATE = '总体关闭率';\r\nexport const RESPONSE_IN_30_MIN_RATE = '响应及时率（0.5h）'\r\nexport const RESPONSE_IN_30_HOUR_RATE = '响应及时率（30h）';\r\nexport const CLOSE_ON_TIME_RATE = '及时关闭率';\r\nexport const TOTAL_OVERALL_CLOSE_RATE = '累计总体关闭率';\r\n\r\nexport const RATE_STATISTIC_ITEMS = [\r\n  REMAIN_CLOSE_RATE,\r\n  NEW_ADD_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_RATE = '本年度统计周期内';\r\n\r\nexport const STAGES = [\r\n  '一期',\r\n  '二期',\r\n  '三期',\r\n  '四期',\r\n  '五期',\r\n  '六期',\r\n  '七期',\r\n  '八期',\r\n  '九期',\r\n  '十期'\r\n];\r\n\r\n\r\n// new data key\r\nexport const COL_AREA = '大区';\r\nexport const COL_CITY_COMPANY = '城市公司';\r\nexport const COL_PROJECT = '项目';\r\nexport const COL_PROJECT_STAGE = '项目分期';\r\nexport const COL_CURRENT_STATUS = '当前工单状态';\r\nexport const COL_FIRST_CLASS = '一级报事分类';\r\nexport const COL_REPORT_TIME = '报事时间';\r\nexport const COL_RESPONSE_TIME = '响应时间';\r\nexport const COL_FINISH_TIME = '实际完成时间';\r\nexport const COL_TOTAL_HANDLE_TIME = '工单总处理时长(天）';\r\nexport const COL_EXPIRE = '总时长超时预警';\r\nexport const COL_CLOSE_TIME_1 = '业主关闭时间';\r\nexport const COL_CLOSE_TIME_2 = '非正常关闭时间';\r\nexport const COL_CLOSE_TIME_3 = '强制关闭时间';\r\nexport const COL_PAUSE = '累计暂停时长';\r\nexport const COL_OVERTIME_WARN = '总时长超时预警';\r\n\r\nexport const CATEGORY_UNCLASSIFY = '未分类';\r\n\r\nexport const TICKET_STATUS = {\r\n  RESPONSED: '已响应',\r\n  SOLUTION_PREPARE: '方案制定中',\r\n  SOLUTION_APPROVE: '方案已批准',\r\n  INVALID: '无效',\r\n  CLOSED: '已关闭',\r\n  FORCE_CLOSE: '强制关闭',\r\n  CLOSE_ABNORMAL: '非正常关闭',\r\n  DISPATCHED: '已分派',\r\n  WORK_DOING: '施工中',\r\n  WORK_FINISHED: '施工完成',\r\n  DROP_IN: '已上门',\r\n  COMMENTED: '已评价',\r\n  NEW: '新建'\r\n};\r\n\r\nexport const CATEGORIES = [\r\n  '土建',\r\n  '维修-其他类',\r\n  '机电',\r\n  '室内精装',\r\n  '室内门窗及入户门',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '渗漏',\r\n  '室内电器',\r\n  '公区部分',\r\n  CATEGORY_UNCLASSIFY\r\n];\r\n\r\n// statistic items\r\nexport const STATISTIC_ITEMS = [\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_NOT_RESPONSED,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n]\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\n// import the core library.\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\n\r\n// then import echarts modules those you have used manually.\r\nimport echarts from 'echarts/lib/echarts';\r\nimport 'echarts/lib/chart/line';\r\nimport 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/chart/pie';\r\n// import 'echarts/lib/chart/scatter';\r\n// import 'echarts/lib/chart/radar';\r\n\r\n// import 'echarts/lib/chart/map';\r\n// import 'echarts/lib/chart/treemap';\r\n// import 'echarts/lib/chart/graph';\r\n// import 'echarts/lib/chart/gauge';\r\n// import 'echarts/lib/chart/funnel';\r\n// import 'echarts/lib/chart/parallel';\r\n// import 'echarts/lib/chart/sankey';\r\n// import 'echarts/lib/chart/boxplot';\r\n// import 'echarts/lib/chart/candlestick';\r\n// import 'echarts/lib/chart/effectScatter';\r\n// import 'echarts/lib/chart/lines';\r\n// import 'echarts/lib/chart/heatmap';\r\n\r\n// import 'echarts/lib/component/graphic';\r\n// import 'echarts/lib/component/grid';\r\nimport 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/tooltip';\r\n// import 'echarts/lib/component/polar';\r\n// import 'echarts/lib/component/geo';\r\n// import 'echarts/lib/component/parallel';\r\n// import 'echarts/lib/component/singleAxis';\r\n// import 'echarts/lib/component/brush';\r\n\r\nimport 'echarts/lib/component/title';\r\n\r\n// import 'echarts/lib/component/dataZoom';\r\n// import 'echarts/lib/component/visualMap';\r\n\r\n// import 'echarts/lib/component/markPoint';\r\n// import 'echarts/lib/component/markLine';\r\n// import 'echarts/lib/component/markArea';\r\n\r\n// import 'echarts/lib/component/timeline';\r\nimport 'echarts/lib/component/toolbox';\r\n// import { Rect } from 'echarts/lib/util/graphic';\r\n\r\n// import 'zrender/lib/vml/vml';\r\n\r\nimport  { CATEGORIES } from '../constants';\r\n\r\nfunction ChartView(props) {\r\n  const titleConfig = {\r\n    left: 'center',\r\n    top: 0,\r\n    textStyle: {\r\n      color: '#000000'\r\n    }\r\n  };\r\n  const toolboxConfig = {\r\n    feature: {\r\n      saveAsImage: { show: true }\r\n    },\r\n    right: 40\r\n  };\r\n  const legendConfig = {\r\n    left: 40\r\n  };\r\n  const styles = {\r\n    margin: '40px 0',\r\n    height: '500px'\r\n  };\r\n\r\n  let cityCategoryCloseAverageHandleTimeSeries = [];\r\n  let newAddedCities = [];\r\n  for (let cityName in props.cityGraphData.cityCategoryCloseAverageHandleTimeData) {\r\n    newAddedCities = [\r\n      ...newAddedCities, cityName\r\n    ];\r\n    cityCategoryCloseAverageHandleTimeSeries = [\r\n      ...cityCategoryCloseAverageHandleTimeSeries,\r\n      {\r\n        name: cityName,\r\n        type: 'bar',\r\n        barMaxWidth: 20,\r\n        label: {\r\n          position: 'top',\r\n          color: '#333',\r\n          show: true,\r\n          formatter: '{c}'\r\n        },\r\n        data: props.cityGraphData.cityCategoryCloseAverageHandleTimeData[cityName]\r\n      }\r\n    ];\r\n  }\r\n\r\n  let citySecondCategoryOpenAverageHandleTimeSeries = [];\r\n  let openAverageHandleTimeCities = [];\r\n  for (let cityName in props.citySecondCategoryOpenAverageHandleTimeData) {\r\n    openAverageHandleTimeCities = [\r\n      ...openAverageHandleTimeCities, cityName\r\n    ];\r\n    citySecondCategoryOpenAverageHandleTimeSeries = [\r\n      ...citySecondCategoryOpenAverageHandleTimeSeries,\r\n      {\r\n        name: cityName,\r\n        type: 'bar',\r\n        barMaxWidth: 20,\r\n        label: {\r\n          position: 'top',\r\n          color: '#333',\r\n          show: true,\r\n          formatter: '{c}'\r\n        },\r\n        data: props.citySecondCategoryOpenAverageHandleTimeData[cityName]\r\n      }\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各城市日常维修总体关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.allCities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityGraphData.cityTotalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityGraphData.cityOverallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各项目日常维修总体关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.allProjects,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectGraphData.projectTotalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectGraphData.projectOverallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      {/* <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各项目分期日常维修总体关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.stages,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageTotalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageOverallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row> */}\r\n      {/* <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关城市分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '城市剩余未关',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.cityOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关二级分类分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '二级分类',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.secondCategoryOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各城市新增维修关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNewAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNewAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '项目新增关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.newAddedProjects,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNewAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNewAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '分期新增关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.newAddedStages,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageNewAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageNewAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '新增维修城市分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.cityNewAddedAcceptData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '新增维修二级分类分布图',\r\n              left: 'center',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.secondCategoryNewAddedAcceptData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各城市需处理关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            legend: {\r\n              data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n              ...legendConfig\r\n            },\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '需处理受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '比率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '需处理受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNeedHandleAcceptData\r\n              },\r\n              {\r\n                name: '及时关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNeedHandleCloseOnTimeRateData\r\n              },\r\n              {\r\n                name: '总体关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNeedHandleCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各项目需处理关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            legend: {\r\n              data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n              ...legendConfig\r\n            },\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.needHandleProjects,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '需处理受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '比率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '需处理受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNeedHandleAcceptData\r\n              },\r\n              {\r\n                name: '及时关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNeedHandleCloseOnTimeRateData\r\n              },\r\n              {\r\n                name: '总体关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNeedHandleCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '平均处理时长城市分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            legend: {\r\n              data: ['已关闭', '剩余未关'],\r\n              ...legendConfig\r\n            },\r\n            series: [\r\n              {\r\n                name: '已关闭',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityCloseAverageHandleTimeData\r\n              },\r\n              {\r\n                name: '剩余未关',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityOpenAverageHandleTimeData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '已关闭维修分类平均处理时长',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: DEFAULT_SECOND_CATEGORIES,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            legend: {\r\n              data: newAddedCities,\r\n              ...legendConfig\r\n            },\r\n            series: cityCategoryCloseAverageHandleTimeSeries\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关维修分类平均处理时长',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: DEFAULT_SECOND_CATEGORIES,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            legend: {\r\n              data: openAverageHandleTimeCities,\r\n              ...legendConfig\r\n            },\r\n            series: citySecondCategoryOpenAverageHandleTimeSeries\r\n          }}\r\n        />\r\n      </Row> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChartView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ProjectTable(props) {\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title={KEY_PROJECT_NAME}\r\n      key={KEY_PROJECT_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredProjects.length > 0 ?\r\n        props.data.filter(item => props.filteredProjects.indexOf(item[KEY_PROJECT_NAME]) !== -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nProjectTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ProjectTable;\r\n","import {\r\n  DEFAULT_STATISTIC_ITEMS,\r\n  KEY_TICKET_TOTAL,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  STAGES,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  STATISTIC_ITEMS,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  CATEGORIES,\r\n  RATE_STATISTIC_ITEMS\r\n} from './constants';\r\n\r\nimport XLSX from 'xlsx';\r\n\r\nexport function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|（.*?）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}\r\n\r\nexport function filterProject(projectName, reg) {\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function filterProjectStage(projectName) {\r\n  let filteredName = null;\r\n  for (let stage of STAGES) {\r\n    if (projectName.indexOf(stage) != -1) {\r\n      filteredName = projectName.substring(0, projectName.indexOf(stage));\r\n      return filteredName;\r\n    }\r\n  }\r\n  return projectName;\r\n}\r\n\r\nexport function formatToTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToRateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of RATE_STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of STATISTIC_ITEMS) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[category] = data[category][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[secondCategory] = data[secondCategory][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function readExcelData (fileList) {\r\n  return new Promise((resolve, reject) => {\r\n    let fileReader = new FileReader();\r\n    let data = [];\r\n\r\n    let readFile = (index) => {\r\n      if (index < fileList.length) {\r\n        fileReader.onload = (event) => {\r\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\r\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\r\n          data = [...data, ...XLSX.utils.sheet_to_json(sheet, { blankrows: false })];\r\n          readFile(index + 1);\r\n        }\r\n        fileReader.readAsBinaryString(fileList[index]);\r\n      } else {\r\n        resolve(data);\r\n      }\r\n    };\r\n    readFile(0);\r\n  });\r\n}\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport ProjectTable from './ProjectTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\nimport {\r\n  formatToTable,\r\n  formatToRateTable\r\n} from '../utils';\r\n\r\nclass ProjectView extends React.Component {\r\n  static defaultProps = {\r\n    data: {}\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredProjects: []\r\n    }\r\n  }\r\n\r\n  filterProjects = (projects) => {\r\n    if (projects.length > 0) {\r\n      this.setState({\r\n        filteredProjects: projects\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredProjects: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let projects = [];\r\n    for (let item in this.props.data) {\r\n      for (let projectName in this.props.data[item]) {\r\n        if (projects.indexOf(projectName) === -1) {\r\n          projects = [...projects, projectName];\r\n        }\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的项目'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterProjects}\r\n                >\r\n                  {\r\n                    projects.map((project) => (\r\n                      <Select.Option key={project}>{project}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={formatToTable(this.props.data.periodNewAddedResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.thisYearBeforePeriodResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearBeforePeriodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={formatToTable(this.props.data.beforePeriodNeedHandleResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={formatToTable(this.props.data.periodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={formatToRateTable(this.props.data.rateResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectView;\r\n","import {\r\n  COL_REPORT_TIME,\r\n  COL_OVERTIME_WARN,\r\n  COL_PROJECT_STAGE,\r\n  COL_FIRST_CLASS,\r\n  COL_CURRENT_STATUS,\r\n  COL_PAUSE,\r\n  COL_CLOSE_TIME_1,\r\n  COL_CLOSE_TIME_2,\r\n  COL_CLOSE_TIME_3,\r\n  TICKET_NOT_RESPONSED,\r\n  KEY_TICKET_TOTAL,\r\n  TICKET_STATUS,\r\n  CATEGORIES,\r\n  STATISTIC_ITEMS,\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  CATEGORY_UNCLASSIFY,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  RATE_STATISTIC_ITEMS\r\n} from '../constants';\r\n\r\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\r\nimport moment from 'moment';\r\n\r\nexport const initStatisticItem = () => {\r\n  let map = {};\r\n  for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n    map[category] = {};\r\n    for (let itemName of STATISTIC_ITEMS) {\r\n      map[category][itemName] = 0;\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\nexport const initRate = () => {\r\n  let map = {};\r\n  for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n    map[category] = {};\r\n    for (let itemName of RATE_STATISTIC_ITEMS) {\r\n      map[category][itemName] = 0;\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\nexport const getCategory = ticket => ticket[COL_FIRST_CLASS] || CATEGORY_UNCLASSIFY;\r\n\r\nexport const formatStageToTable = (data) => {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nconst STAGE = /\\d*期/;\r\n\r\nexport function filterProjectName(name) {\r\n  let filteredName = name;\r\n  if (name.match(STAGE)) {\r\n    filteredName = name.substring(0, name.match(STAGE).index);\r\n  }\r\n  return filteredName;\r\n}\r\n\r\n// 统计周期内新增\r\nexport const statisticPeriodNewAddedTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 关闭 + 剩余未关\r\n    if (ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.COMMENTED ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) || ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(closeEndTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期前遗留\r\nexport const statisticThisYearBeforePeriodTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) || ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(closeEndTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期前遗留累计\r\nexport const statisticThisYearBeforePeriodTotalTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW ||\r\n      ticketStatus === TICKET_STATUS.CLOSED ||\r\n      ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n  }\r\n\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  return dataMap;\r\n}\r\n\r\n// 上年度统计周期前遗留\r\nexport const statisticLastYearBeforePeriodTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(closeEndTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 上年度统计周期前遗留累计\r\nexport const statisticLastYearBeforePeriodTotalTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(closeEndTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期累计\r\nexport const statisticThisYearTotalTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(closeEndTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 统计周期前需处理\r\nexport const statisticBeforePeriodNeedHandleResult = (array, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let result of array) {\r\n    for (let name in result) {\r\n      if (dataMap[name] == null) {\r\n        dataMap[name] = initStatisticItem();\r\n      }\r\n      for (let category in dataMap[name]) {\r\n        for (let item of STATISTIC_ITEMS) {\r\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\r\n            let ticketCloseCount = result[name][category][TICKET_CLOSE];\r\n            let ticketCloseProcessTime = result[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n            dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] +=\r\n              ticketCloseCount * ticketCloseProcessTime;\r\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\r\n            let ticketOpenProcessTime = result[name][category][TICKET_OPEN_PROCESS_TIME];\r\n            let ticketOpenCount = result[name][category][TICKET_OPEN];\r\n            dataMap[name][category][TICKET_OPEN_PROCESS_TIME] +=\r\n              ticketOpenCount * ticketOpenProcessTime;\r\n          }\r\n          else {\r\n            dataMap[name][category][item] +=\r\n              result[name][category][item];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // get average process time\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 统计周期累计\r\nexport const statisticPeriodTotalResult = (array, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let result of array) {\r\n    for (let name in result) {\r\n      if (dataMap[name] == null) {\r\n        dataMap[name] = initStatisticItem();\r\n      }\r\n      for (let category in dataMap[name]) {\r\n        for (let item of STATISTIC_ITEMS) {\r\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\r\n            let ticketCloseCount = result[name][category][TICKET_CLOSE];\r\n            let ticketCloseProcessTime = result[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n            dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] +=\r\n              ticketCloseCount * ticketCloseProcessTime;\r\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\r\n            let ticketOpenProcessTime = result[name][category][TICKET_OPEN_PROCESS_TIME];\r\n            let ticketOpenCount = result[name][category][TICKET_OPEN];\r\n            dataMap[name][category][TICKET_OPEN_PROCESS_TIME] +=\r\n              ticketOpenCount * ticketOpenProcessTime;\r\n          }\r\n          else {\r\n            dataMap[name][category][item] +=\r\n              result[name][category][item];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // get average process time\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n\r\n  return dataMap;\r\n}\r\n\r\nexport const statisticRate = (statisticMap, statisticItem, rateMap) => {\r\n  for (let name in statisticMap) {\r\n    if (rateMap[name] == null) {\r\n      rateMap[name] = initRate();\r\n    }\r\n    for (let category in rateMap[name]) {\r\n      if (statisticMap[name][category][TICKET_ACCEPT] > 0) {\r\n        if (statisticItem === NEW_ADD_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === REMAIN_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === OVERALL_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === CLOSE_ON_TIME_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE_ON_TIME] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const statistc = (periodTickets, beforePeriodTickets, thisYearTotalTickets,\r\n  lastYearBeforePeriodTickets, startTime, endTime, col, allItems) => {\r\n  let yearStartTime = moment(startTime).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\r\n  let data = {};\r\n  data.periodNewAddedResult = statisticPeriodNewAddedTickets(periodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.thisYearBeforePeriodResult = statisticThisYearBeforePeriodTickets(beforePeriodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.thisYearBeforePeriodTotalResult = statisticThisYearBeforePeriodTotalTickets(beforePeriodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.lastYearBeforePeriodResult = statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.lastYearBeforePeriodTotalResult = statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\r\n    yearStartTime, endTime, col, allItems);\r\n  data.thisYearTotalResult = statisticThisYearTotalTickets(thisYearTotalTickets,\r\n    yearStartTime, endTime, col, allItems);\r\n  data.beforePeriodNeedHandleResult = statisticBeforePeriodNeedHandleResult([\r\n    data.periodNewAddedResult, data.thisYearBeforePeriodResult,\r\n    data.lastYearBeforePeriodResult], allItems);\r\n  data.periodTotalResult = statisticPeriodTotalResult([\r\n    data.lastYearBeforePeriodTotalResult,\r\n    data.thisYearTotalResult\r\n  ], allItems);\r\n  data.rateResult = {};\r\n  for (let name of allItems) {\r\n    data.rateResult[name] = initRate();\r\n  }\r\n  statisticRate(data.periodNewAddedResult, NEW_ADD_CLOSE_RATE, data.rateResult);\r\n  statisticRate(data.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, data.rateResult);\r\n  statisticRate(data.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, data.rateResult);\r\n  statisticRate(data.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, data.rateResult);\r\n  statisticRate(data.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, data.rateResult);\r\n\r\n  return data;\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport DataForm from './components/DataForm';\nimport ChartView from './components/ChartView';\nimport ProjectView from './components/ProjectView';\nimport { Row, Col, message, LocaleProvider, Tabs } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  TICKET_SYSTEM_COUNT,\n  TICKET_ACCEPT,\n  TICKET_OPEN,\n  TICKET_VALIDATE,\n  TICKET_PAUSE,\n  TICKET_INVALID,\n  TICKET_CLOSE,\n  TICKET_CLOSE_NORMAL,\n  TICKET_CLOSE_ABNORMAL,\n  TICKET_CLOSE_ON_TIME,\n  TICKET_RESPONSE_IN_30_MIN,\n  TICKET_RESPONSE_IN_30_HOUR,\n  TICKET_CLOSE_PROCESS_TIME,\n  TICKET_OPEN_PROCESS_TIME,\n  DEFAULT_STATISTIC_ITEMS,\n  KEY_REPORT_TIME,\n  KEY_PROJECT_NAME,\n  KEY_SECOND_CATEGORY,\n  KEY_TICKET_STATUS,\n  KEY_IS_PROCESS_EXCCED,\n  KEY_FIRST_RESPONSE_TIME,\n  KEY_PROCESS_TIME,\n  KEY_CLOSE_TIME,\n  DEFAULT_SECOND_CATEGORIES,\n  KEY_STATISTIC_ITEM,\n  KEY_TICKET_TOTAL,\n  KEY_CITY_NAME,\n  NEW_ADD_CLOSE_RATE,\n  REMAIN_CLOSE_RATE,\n  OVERALL_CLOSE_RATE,\n  RESPONSE_IN_30_MIN_RATE,\n  RESPONSE_IN_30_HOUR_RATE,\n  CLOSE_ON_TIME_RATE,\n  TOTAL_OVERALL_CLOSE_RATE,\n  RATE_STATISTIC_ITEMS,\n  CATEGORY_UNCLASSIFY,\n  COL_FIRST_CLASS,\n  COL_CURRENT_STATUS,\n  COL_PROJECT_STAGE,\n  COL_PROJECT,\n  COL_CITY_COMPANY,\n  COL_AREA,\n  COL_REPORT_TIME,\n} from './constants';\n\nimport {\n  filterProjectName,\n  parseTime,\n  filterProjectStage,\n  formatToAreaTable,\n  formatToAreaTateTable,\n  readExcelData\n} from './utils';\n\nimport { connect } from 'react-redux';\nimport { addCategories, addTicketStates } from './store/actions';\n\nimport * as Util from './functions/utils';\n\n// global variables\nlet allCategory = [];\nlet allTicketState = [];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityGraphData: {},\n      projectGraphData: {}\n    }\n  }\n\n  start = (fileList, startTime, endTime) => {\n    const { addCategories, addTicketStates } = this.props;\n    this.setState({ loading: true });\n    readExcelData(fileList).then((data) => {\n      let allStages = [], allProjects = [], allCities = [];\n      // get all categories and ticket states\n      for (let ticket of data) {\n        let category = Util.getCategory(ticket);\n        if (allCategory.indexOf(category) === -1) {\n          allCategory = [...allCategory, category];\n        }\n        let state = ticket[COL_CURRENT_STATUS];\n        if (allTicketState.indexOf(state) === -1) {\n          allTicketState = [...allTicketState, state];\n        }\n\n        // get all stages\n        let stage = ticket[COL_PROJECT_STAGE];\n        if (allStages.indexOf(stage) === -1) {\n          allStages = [\n            ...allStages,\n            stage\n          ];\n        }\n        // get all projects\n        let project = ticket[COL_PROJECT];\n        if (allProjects.indexOf(project) === -1) {\n          allProjects = [\n            ...allProjects,\n            project\n          ];\n        }\n        // get all cities\n        let city = ticket[COL_CITY_COMPANY];\n        if (allCities.indexOf(city) === -1) {\n          allCities = [\n            ...allCities,\n            city\n          ];\n        }\n      }\n      addCategories(allCategory);\n      addTicketStates(allTicketState);\n\n      this.setState({\n        allStages,\n        allProjects,\n        allCities\n      });\n\n      let yearStartTime = moment(startTime).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n      let periodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime >= startTime && ticketReportTime <= endTime;\n      });\n      let beforePeriodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime >= yearStartTime && ticketReportTime < startTime;\n      });\n      let thisYearTotalTickets = data.filter((ticket) => {\n        let reportTime = moment(ticket[KEY_REPORT_TIME]);\n        return reportTime <= endTime && reportTime >= yearStartTime;\n      });\n      let lastYearBeforePeriodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime < yearStartTime\n      });\n\n      // 统计分期\n      let stageData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_PROJECT_STAGE, allStages)\n      this.setState({\n        stageData\n      });\n\n      // 统计项目\n      let projectData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_PROJECT, allProjects)\n      this.setState({\n        projectData\n      });\n\n      // 统计城市\n      let cityData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_CITY_COMPANY, allCities)\n      this.setState({\n        cityData\n      });\n\n      // 统计大区\n      let areaData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_AREA, [])\n      this.setState({\n        areaData\n      });\n\n      let projectGraphData = {\n        projectTotalAcceptData: [],\n        projectOverallCloseRateData: [],\n      };\n\n      for (let projectName of allProjects) {\n        projectGraphData.projectTotalAcceptData = [\n          ...projectGraphData.projectTotalAcceptData,\n          {\n            name: projectName,\n            value: projectData.periodTotalResult[projectName][KEY_TICKET_TOTAL][TICKET_ACCEPT]\n          }\n        ];\n        projectGraphData.projectOverallCloseRateData = [\n          ...projectGraphData.projectOverallCloseRateData,\n          {\n            name: projectName,\n            value: projectData.rateResult[projectName][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n          }\n        ];\n      }\n      this.setState({\n        projectGraphData\n      })\n\n      let cityGraphData = {\n        // 截至统计周期受理累计\n        cityTotalAcceptData: [],\n        // 城市总体关闭率\n        cityOverallCloseRateData: [],\n        // 城市剩余未关\n        cityOpenData: [],\n        // 城市新增受理\n        cityNewAddedAcceptData: [],\n        // 城市新增关闭率\n        cityNewAddedCloseRateData: [],\n        // 各城市需处理受理\n        cityNeedHandleAcceptData: [],\n        // 各城市需处理及时关闭率\n        cityNeedHandleCloseOnTimeRateData: [],\n        // 各城市需处理总体关闭率\n        cityNeedHandleCloseRateData: [],\n        // 城市已关平均处理时长\n        cityCloseAverageHandleTimeData: [],\n        // 城市剩余未关平均处理时长\n        cityOpenAverageHandleTimeData: [],\n        // 各城市分类已关闭平均处理时长\n        cityCategoryCloseAverageHandleTimeData: {}\n      };\n\n      for (let cityName of allCities) {\n        cityGraphData.cityTotalAcceptData = [\n          ...cityGraphData.cityTotalAcceptData,\n          {\n            name: cityName,\n            value: cityData.periodTotalResult[cityName][KEY_TICKET_TOTAL][TICKET_ACCEPT]\n          }\n        ];\n        cityGraphData.cityOverallCloseRateData = [\n          ...cityGraphData.cityOverallCloseRateData,\n          {\n            name: cityName,\n            value: cityData.rateResult[cityName][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n          }\n        ];\n        cityGraphData.cityOpenData = [\n          ...cityGraphData.cityOpenData,\n          {\n            name: cityName,\n            value: cityData.periodTotalResult[cityName][KEY_TICKET_TOTAL][TICKET_OPEN]\n          }\n        ];\n        cityGraphData.cityNewAddedAcceptData = [\n          ...cityGraphData.cityNewAddedAcceptData, {\n            name: cityName,\n            value: cityData.periodNewAddedResult[cityName][KEY_TICKET_TOTAL][TICKET_ACCEPT]\n          }\n        ];\n        cityGraphData.cityNewAddedCloseRateData = [\n          ...cityGraphData.cityNewAddedCloseRateData, {\n            name: cityName,\n            value: cityData.rateResult[cityName][KEY_TICKET_TOTAL][NEW_ADD_CLOSE_RATE]\n          }\n        ];\n        cityGraphData.cityNeedHandleAcceptData = [\n          ...cityGraphData.cityNeedHandleAcceptData, {\n            name: cityName,\n            value: cityData.beforePeriodNeedHandleResult[cityName][KEY_TICKET_TOTAL][TICKET_ACCEPT]\n          }\n        ];\n        cityGraphData.cityNeedHandleCloseOnTimeRateData = [\n          ...cityGraphData.cityNeedHandleCloseOnTimeRateData, {\n            name: cityName,\n            value: cityData.rateResult[cityName][KEY_TICKET_TOTAL][CLOSE_ON_TIME_RATE]\n          }\n        ];\n        cityGraphData.cityNeedHandleCloseRateData = [\n          ...cityGraphData.cityNeedHandleCloseRateData, {\n            name: cityName,\n            value: cityData.rateResult[cityName][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n          }\n        ];\n        cityGraphData.cityCloseAverageHandleTimeData = [\n          ...cityGraphData.cityCloseAverageHandleTimeData,\n          {\n            name: cityName,\n            value: cityData.periodNewAddedResult[cityName][KEY_TICKET_TOTAL][TICKET_CLOSE_PROCESS_TIME]\n          }\n        ];\n        cityGraphData.cityOpenAverageHandleTimeData = [\n          ...cityGraphData.cityOpenAverageHandleTimeData,\n          {\n            name: cityName,\n            value: cityData.beforePeriodNeedHandleResult[cityName][KEY_TICKET_TOTAL][TICKET_OPEN_PROCESS_TIME]\n          }\n        ];\n      }\n\n      this.setState({\n        cityGraphData\n      });\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const tabChart = (\n      <ChartView\n        projectGraphData={this.state.projectGraphData}\n        cityGraphData={this.state.cityGraphData}\n        allStages={this.state.allStages}\n        allProjects={this.state.allProjects}\n        allCities={this.state.allCities}\n      />\n      // <ChartView\n      //   cityTotalAcceptData={this.state.cityTotalAcceptData}\n      //   cityOverallCloseRateData={this.state.cityOverallCloseRateData}\n      //   projectTotalAcceptData={this.state.projectTotalAcceptData}\n      //   projectOverallCloseRateData={this.state.projectOverallCloseRateData}\n      //   stageTotalAcceptData={this.state.stageTotalAcceptData}\n      //   stageOverallCloseRateData={this.state.stageOverallCloseRateData}\n      //   cityOpenData={this.state.cityOpenData}\n      //   secondCategoryOpenData={this.state.secondCategoryOpenData}\n      //   cityNewAddedAcceptData={this.state.cityNewAddedAcceptData}\n      //   cityNewAddedCloseRateData={this.state.cityNewAddedCloseRateData}\n      //   secondCategoryNewAddedAcceptData={this.state.secondCategoryNewAddedAcceptData}\n      //   projectNewAddedAcceptData={this.state.projectNewAddedAcceptData}\n      //   projectNewAddedCloseRateData={this.state.projectNewAddedCloseRateData}\n      //   newAddedProjects={this.state.newAddedProjects}\n      //   stageNewAddedAcceptData={this.state.stageNewAddedAcceptData}\n      //   stageNewAddedCloseRateData={this.state.stageNewAddedCloseRateData}\n      //   newAddedStages={this.state.newAddedStages}\n      //   cityNeedHandleAcceptData={this.state.cityNeedHandleAcceptData}\n      //   cityNeedHandleCloseOnTimeRateData={this.state.cityNeedHandleCloseOnTimeRateData}\n      //   cityNeedHandleCloseRateData={this.state.cityNeedHandleCloseRateData}\n      //   projectNeedHandleAcceptData={this.state.projectNeedHandleAcceptData}\n      //   projectNeedHandleCloseRateData={this.state.projectNeedHandleCloseRateData}\n      //   projectNeedHandleCloseOnTimeRateData={this.state.projectNeedHandleCloseOnTimeRateData}\n      //   needHandleProjects={this.state.needHandleProjects}\n      //   cityCloseAverageHandleTimeData={this.state.cityCloseAverageHandleTimeData}\n      //   cityOpenAverageHandleTimeData={this.state.cityOpenAverageHandleTimeData}\n      //   citySecondCategoryCloseAverageHandleTimeData={this.state.citySecondCategoryCloseAverageHandleTimeData}\n      //   citySecondCategoryOpenAverageHandleTimeData={this.state.citySecondCategoryOpenAverageHandleTimeData}\n      //   secondCategoryOpenAverageHandleTimeData={this.state.secondCategoryOpenAverageHandleTimeData}\n      //   newAddedCities={this.state.newAddedCities}\n      //   cities={this.state.cityData.cities}\n      //   projects={this.state.projects}\n      //   stages={this.state.stages}\n      // />\n    );\n\n    const tabArea = (\n      <ProjectView\n        data={this.state.areaData}\n      />\n    );\n\n    const tabCity = (\n      <ProjectView\n        data={this.state.cityData}\n      />\n    )\n\n    const tabProject = (\n      <ProjectView\n        data={this.state.projectData}\n      />\n    );\n\n    const tabStage = (\n      <ProjectView\n        data={this.state.stageData}\n      />\n    );\n\n    return (\n      <LocaleProvider locale={zh_CN}>\n        <div>\n          <h2 className=\"text--center heading\">统计辅助工具</h2>\n          <DataForm\n            onStart={this.start}\n            onExport={this.exportExcel}\n            loading={this.state.loading}\n          />\n          <Row style={{ margin: '40px 0' }}>\n            <Col span={22} offset={1}>\n              <Tabs type=\"card\">\n                <Tabs.TabPane tab=\"统计图\" key=\"统计图\">{tabChart}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"大区\" key=\"大区\">{tabArea}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"城市\" key=\"城市\">{tabCity}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"项目\" key=\"项目\">{tabProject}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"分期\" key=\"分期\">{tabStage}</Tabs.TabPane>\n              </Tabs>\n            </Col>\n          </Row>\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  addCategories,\n  addTicketStates\n}\n\nconst ConnectedApp = connect(null, mapDispatchToProps)(App);\n\nexport default ConnectedApp;\n","import {\r\n  ADD_CATEGORY,\r\n  ADD_CATEGORIES,\r\n  ADD_TICKET_STATES\r\n} from '../action-types';\r\n\r\nexport const addCategory = category => ({\r\n  type: ADD_CATEGORY,\r\n  payload: {\r\n    category\r\n  }\r\n});\r\n\r\nexport const addCategories = categories => ({\r\n  type: ADD_CATEGORIES,\r\n  payload: {\r\n    categories\r\n  }\r\n});\r\n\r\nexport const addTicketStates = ticketStates => ({\r\n  type: ADD_TICKET_STATES,\r\n  payload: {\r\n    ticketStates\r\n  }\r\n})\r\n","export const ADD_CATEGORY = 'ADD_CATEGORY';\r\nexport const ADD_CATEGORIES = 'ADD_CATEGORIES';\r\nexport const ADD_TICKET_STATES = 'ADD_TICKET_STATES';\r\n","import { combineReducers } from 'redux';\r\nimport category from './category';\r\nimport ticketState from './ticket-state';\r\n\r\nconst reducer = combineReducers({\r\n  category,\r\n  ticketState\r\n});\r\n\r\nexport default reducer;\r\n","import {\r\n  ADD_CATEGORY,\r\n  ADD_CATEGORIES\r\n} from '../action-types';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_CATEGORY:\r\n      const { category } = action.payload;\r\n      return [\r\n        ...state,\r\n        category\r\n      ];\r\n    case ADD_CATEGORIES:\r\n      const { categories } = action.payload;\r\n      return [\r\n        ...state,\r\n        ...categories\r\n      ]\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  ADD_TICKET_STATES\r\n} from '../action-types';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_TICKET_STATES:\r\n      const { ticketStates } = action.payload;\r\n      return [\r\n        ...state,\r\n        ...ticketStates\r\n      ];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}