{"version":3,"sources":["components/DataForm.js","components/ChartView.js","constants.js","components/AreaTable.js","components/AreaView.js","components/CityTable.js","components/CityView.js","components/ProjectTable.js","utils.js","components/ProjectView.js","App.js","serviceWorker.js","index.js"],"names":["DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startDate","Date","set","hour","minute","second","endDate","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","toConsumableArray","concat","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","style","margin","onExport","React","Component","defaultPorps","WrapDataForm","create","ChartView","core_default","echarts","option","title","text","left","textStyle","top","color","tooltip","trigger","formatter","series","name","radius","data","cityOpenData","secondCategoryOpenData","cityNewAddedAcceptData","secondCategoryNewAddedAcceptData","xAxis","cities","yAxis","cityAcceptTotalData","TICKET_SYSTEM_COUNT","TICKET_ACCEPT","TICKET_OPEN","TICKET_VALIDATE","TICKET_PAUSE","TICKET_INVALID","TICKET_CLOSE","TICKET_CLOSE_NORMAL","TICKET_CLOSE_ABNORMAL","TICKET_CLOSE_ON_TIME","TICKET_RESPONSE_IN_30_MIN","TICKET_RESPONSE_IN_30_HOUR","TICKET_CLOSE_PROCESS_TIME","TICKET_OPEN_PROCESS_TIME","DEFAULT_STATISTIC_ITEMS","KEY_REPORT_TIME","KEY_PROJECT_NAME","KEY_SECOND_CATEGORY","KEY_TICKET_STATUS","KEY_IS_PROCESS_EXCCED","KEY_FIRST_RESPONSE_TIME","KEY_PROCESS_TIME","KEY_CLOSE_TIME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","KEY_CITY_NAME","DEFAULT_SECOND_CATEGORIES","NEW_ADD_CLOSE_RATE","REMAIN_CLOSE_RATE","OVERALL_CLOSE_RATE","RESPONSE_IN_30_MIN_RATE","RESPONSE_IN_30_HOUR_RATE","CLOSE_ON_TIME_RATE","TOTAL_OVERALL_CLOSE_RATE","RATE_STATISTIC_ITEMS","STATISTIC_PERIOD_ADD","STATISTIC_BEFORE_PERIOD_REMAIN","STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_THIS_YEAR_TOTAL","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_BEFORE_PERIOD_NEED_HANDLE","STATISTIC_BEFORE_PERIOD_TOTAL","STATISTIC_PERIOD_RATE","STAGES","AreaTable","otherColumns","map","item","es_table","Column","dataIndex","key","width","currentPageData","dataSource","pagination","pageSize","scroll","y","size","AreaView","components_AreaTable","periodNewAddedData","thisYearBeforePeriodData","thisYearBeforePeriodTotalData","thisYearTotalData","lastYearBeforePeriodData","lastYearBeforePeriodTotalData","beforePeriodNeedHandleData","periodTotalData","rateData","CityTable","cityColumn","filteredCities","length","filter","defaultProps","CityView","filterCities","es_select","mode","onChange","city","Option","components_CityTable","ProjectTable","projectColumn","filteredProjects","filterProjectName","projectName","sub","match","substring","parseTime","timeString","time","day","min","window","parseInt","filterProjectStage","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","stage","return","formatToTable","tableData","rowKey","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","statisticItem","rowData","_arr","_i","secondCategory","push","formatToAreaTable","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_arr2","_i2","formatToRateTable","_arr3","_i3","_arr4","_i4","formatToAreaTateTable","_arr5","_i5","_arr6","_i6","ProjectView","filterCity","projectData","projects","project","filterProjects","components_ProjectTable","periodNewAddedResult","thisYearBeforePeriodResult","thisYearBeforePeriodTotalResult","thisYearTotalResult","lastYearBeforePeriodResult","lastYearBeforePeriodTotalResult","beforePeriodNeedHandleResult","periodTotalResult","rateResult","TICKET_STATUS_IN_PROGRESS","TICKET_STATUS_PAUSE","TICKET_STATUS_VALIDATE","TICKET_STATUS_CLOSE","TICKET_STATUS_ABNORMAL_CLOSE","TICKET_STATUS_INVALID","NO","initProjectRate","itemName","initProject","isInProgress","ticketStatus","statisticRate","statisticMap","rateMap","toFixed","statisticCityRate","globalRowKey","formatCityData","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","formatToCityRateTable","_arr7","_i7","mergeStageResult","resultArray","filterFunc","mergeResult","forEach","result","filteredProjectName","_arr8","_i8","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","ticketCloseCount","ticketCloseProcessTime","ticketOpenProcessTime","ticketOpenCount","Number","mergeProjectResult","_arr9","_i9","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","statisticCity","closeTimeStart","closeTimeEnd","dataMap","ticket","ticketStatistic","ticketCloseTime","moment","_parseTime","_parseTime2","_parseTime3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","statistic","reportTime","yearStartDate","month","date","thisYearbeforePeriodTickets","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_parseTime4","_parseTime5","_parseTime6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","statisticThisYearBeforePeriodTickets","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","statisticThisYearBeforeStartDateTotalTickets","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_parseTime13","_parseTime14","_parseTime15","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","statisticThisYearTotalTickets","lastYearBeforePeriodTickets","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_parseTime7","_parseTime8","_parseTime9","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","statisticLastYearBeforePeriodTickets","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","_parseTime10","_parseTime11","_parseTime12","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","statisticLastYearBeforePeriodTotalTickets","_arr10","_i10","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","_arr11","_i11","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","stageRateResult","stageResult","projectResult","projectRateResult","cityResult","cityRateResult","App","start","fileReader","FileReader","readFile","onload","event","workbook","XLSX","read","target","sheet","Sheets","SheetNames","cityName","utils","sheet_to_json","blankrows","readAsBinaryString","readExcels","cityData","allCities","allCityResult","_loop","objectSpread","defineProperty","areaResult","table","areaRateResult","areaData","_iteratorNormalCompletion26","_didIteratorError26","_iteratorError26","_step26","_iterator26","_iteratorNormalCompletion27","_didIteratorError27","_iteratorError27","_step27","_iterator27","exportExcel","header","newAddedData","thisYearBeforeStartData","sheet1","json_to_sheet","sheet2","sheet3","sheet4","sheet5","sheet6","sheet7","sheet8","sheet9","book_new","book_append_sheet","writeFile","now","format","error","tabChart","components_ChartView","tabArea","components_AreaView","tabCity","components_CityView","tabProject","components_ProjectView","tabStage","locale_provider","locale","zh_CN","className","components_DataForm","tabs","TabPane","tab","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4fa063b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {},\n    onExport: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func,\n    onExport: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startDate = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endDate = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startDate, endDate);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              { \n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }   \n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在统计...': '开始统计'\n              }\n            </Button>\n            <Button style={{ margin: '0 20px' }} onClick={this.props.onExport}>导出Excel表格</Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","import React from 'react';\r\nimport { Row, Col } from 'antd';\r\n// import the core library.\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\n\r\n// then import echarts modules those you have used manually.\r\nimport echarts from 'echarts/lib/echarts';\r\n// import 'echarts/lib/chart/line';\r\nimport 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/chart/pie';\r\n// import 'echarts/lib/chart/scatter';\r\n// import 'echarts/lib/chart/radar';\r\n\r\n// import 'echarts/lib/chart/map';\r\n// import 'echarts/lib/chart/treemap';\r\n// import 'echarts/lib/chart/graph';\r\n// import 'echarts/lib/chart/gauge';\r\n// import 'echarts/lib/chart/funnel';\r\n// import 'echarts/lib/chart/parallel';\r\n// import 'echarts/lib/chart/sankey';\r\n// import 'echarts/lib/chart/boxplot';\r\n// import 'echarts/lib/chart/candlestick';\r\n// import 'echarts/lib/chart/effectScatter';\r\n// import 'echarts/lib/chart/lines';\r\n// import 'echarts/lib/chart/heatmap';\r\n\r\n// import 'echarts/lib/component/graphic';\r\n// import 'echarts/lib/component/grid';\r\n// import 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/tooltip';\r\n// import 'echarts/lib/component/polar';\r\n// import 'echarts/lib/component/geo';\r\n// import 'echarts/lib/component/parallel';\r\n// import 'echarts/lib/component/singleAxis';\r\n// import 'echarts/lib/component/brush';\r\n\r\nimport 'echarts/lib/component/title';\r\n\r\n// import 'echarts/lib/component/dataZoom';\r\n// import 'echarts/lib/component/visualMap';\r\n\r\n// import 'echarts/lib/component/markPoint';\r\n// import 'echarts/lib/component/markLine';\r\n// import 'echarts/lib/component/markArea';\r\n\r\n// import 'echarts/lib/component/timeline';\r\n// import 'echarts/lib/component/toolbox';\r\n\r\n// import 'zrender/lib/vml/vml';\r\n\r\nfunction ChartView(props) {\r\n  return (\r\n    <Row>\r\n      <Col span={12}>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关城市分布',\r\n              left: 'center',\r\n              textStyle: {\r\n                left: 'center',\r\n                top: 10,\r\n                color: '#333'\r\n              }\r\n            },\r\n            tooltip : {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)'\r\n                },\r\n                data: props.cityOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n      <Col span={12}>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关二级分类分布',\r\n              left: 'center',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip : {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            series: [\r\n              {\r\n                name: '二级分类',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)'\r\n                },\r\n                data: props.secondCategoryOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n      <Col span={12}>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '新增维修城市分布图',\r\n              left: 'center',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip : {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)'\r\n                },\r\n                data: props.cityNewAddedAcceptData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n      <Col span={12}>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '新增维修二级分类分布图',\r\n              left: 'center',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip : {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)'\r\n                },\r\n                data: props.secondCategoryNewAddedAcceptData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n      <Col span={12}>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '受理累计城市分布图',\r\n              left: 'center',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip : {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}'\r\n            },\r\n            xAxis: {\r\n              type: 'category',\r\n              data: props.cities\r\n            },\r\n            yAxis: {\r\n              type: 'value'\r\n            },\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'bar',\r\n                label: {\r\n                  formatter: '{b}'\r\n                },\r\n                data: props.cityAcceptTotalData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ChartView;\r\n","// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '判定无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关平均处理时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '剩余未关平均处理时长（天）';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\nexport const KEY_CITY_NAME = '城市';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const NEW_ADD_CLOSE_RATE = '新增关闭率';\r\nexport const REMAIN_CLOSE_RATE = '遗留关闭率';\r\nexport const OVERALL_CLOSE_RATE = '总体关闭率';\r\nexport const RESPONSE_IN_30_MIN_RATE = '响应及时率（0.5h）'\r\nexport const RESPONSE_IN_30_HOUR_RATE = '响应及时率（30h）';\r\nexport const CLOSE_ON_TIME_RATE = '及时关闭率';\r\nexport const TOTAL_OVERALL_CLOSE_RATE = '累计总体关闭率';\r\n\r\nexport const RATE_STATISTIC_ITEMS = [\r\n  REMAIN_CLOSE_RATE,\r\n  NEW_ADD_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_RATE = '本年度统计周期内';\r\n\r\nexport const STAGES = [\r\n  '一期',\r\n  '二期',\r\n  '三期',\r\n  '四期',\r\n  '五期',\r\n  '六期',\r\n  '七期',\r\n  '八期',\r\n  '九期',\r\n  '十期'\r\n];","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction AreaTable(props) {\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default AreaTable;\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\nimport AreaTable from './AreaTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass AreaView extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_PERIOD_ADD}\r\n            data={this.props.periodNewAddedData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n            data={this.props.thisYearBeforePeriodData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n            data={this.props.thisYearBeforePeriodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_THIS_YEAR_TOTAL}\r\n            data={this.props.thisYearTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n            data={this.props.lastYearBeforePeriodData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n            data={this.props.lastYearBeforePeriodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n            data={this.props.beforePeriodNeedHandleData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n            data={this.props.periodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_PERIOD_RATE}\r\n            data={this.props.rateData}\r\n          />\r\n        </div>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AreaView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_CITY_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction CityTable(props) {\r\n  const cityColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_CITY_NAME}\r\n      title={KEY_CITY_NAME}\r\n      key={KEY_CITY_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredCities.length > 0 ?\r\n        props.data.filter(item => props.filteredCities.indexOf(item[KEY_CITY_NAME]) != -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {cityColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nCityTable.defaultProps = {\r\n  filteredCities: []\r\n}\r\n\r\nexport default CityTable;\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport CityTable from './CityTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass CityView extends React.Component {\r\n  static defaultProps = {\r\n    cities: []\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredCities: []\r\n    }\r\n  }\r\n\r\n  filterCities = (filteredCities) => {\r\n    if (filteredCities != null && filteredCities.length > 0) {\r\n      this.setState({\r\n        filteredCities: filteredCities\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredCities: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的城市'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterCities}\r\n                >\r\n                  {\r\n                    this.props.cities.map((city) => (\r\n                      <Select.Option key={city}>{city}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={this.props.periodNewAddedData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.thisYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.thisYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={this.props.thisYearTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.lastYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.lastYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={this.props.beforePeriodNeedHandleData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={this.props.periodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={this.props.rateData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CityView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ProjectTable(props) {\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title={KEY_PROJECT_NAME}\r\n      key={KEY_PROJECT_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredProjects.length > 0 ?\r\n        props.data.filter(item => props.filteredProjects.indexOf(item[KEY_PROJECT_NAME]) != -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nProjectTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ProjectTable;\r\n","import {\r\n  DEFAULT_STATISTIC_ITEMS,\r\n  KEY_TICKET_TOTAL,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  STAGES,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES\r\n} from './constants';\r\n\r\nexport function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|（.*?）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}\r\n\r\nexport function filterProject(projectName, reg) {\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function filterProjectStage(projectName) {\r\n  let filteredName = null;\r\n  for (let stage of STAGES) {\r\n    if (projectName.indexOf(stage) != -1) {\r\n      filteredName = projectName.substring(0, projectName.indexOf(stage));\r\n      return filteredName;\r\n    }\r\n  }\r\n  return projectName;\r\n}\r\n\r\nexport function formatToTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let projectName in data) {\r\n    for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = projectName;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[secondCategory] = data[secondCategory][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToRateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let projectName in data) {\r\n    for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n      RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = projectName;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[secondCategory] = data[secondCategory][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport ProjectTable from './ProjectTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\nimport {\r\n  formatToTable,\r\n  formatToRateTable\r\n} from '../utils';\r\n\r\nclass ProjectView extends React.Component {\r\n  static defaultProps = {\r\n    cities: [],\r\n    projectData: {}\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      projects: [],\r\n      data: {}\r\n    }\r\n  }\r\n\r\n  filterCity = (city) => {\r\n    if (this.props.projectData[city] != null) {\r\n      this.setState({\r\n        data: this.props.projectData[city]\r\n      });\r\n      let projects = [];\r\n      for (let item in this.props.projectData[city]) {\r\n        for (let project in this.props.projectData[city][item]) {\r\n          if (projects.indexOf(project) == -1) {\r\n            projects = [...projects, project];\r\n          }\r\n        }\r\n      }\r\n      this.setState({\r\n        projects: projects\r\n      });\r\n    }\r\n  }\r\n\r\n  filterProjects = (projects) => {\r\n    if (projects.length > 0) {\r\n      this.setState({\r\n        filteredProjects: projects\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredProjects: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要显示的城市'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterCity}\r\n                >\r\n                  {\r\n                    this.props.cities.map((city) => (\r\n                      <Select.Option key={city}>{city}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的项目'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterProjects}\r\n                >\r\n                  {\r\n                    this.state.projects.map((project) => (\r\n                      <Select.Option key={project}>{project}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={formatToTable(this.state.data.periodNewAddedResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.state.data.thisYearBeforePeriodResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.state.data.thisYearBeforePeriodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={formatToTable(this.state.data.thisYearTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.state.data.lastYearBeforePeriodResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.state.data.lastYearBeforePeriodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={formatToTable(this.state.data.beforePeriodNeedHandleResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={formatToTable(this.state.data.periodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={formatToRateTable(this.state.data.rateResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectView;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport DataForm from './components/DataForm';\nimport ChartView from './components/ChartView';\nimport AreaView from './components/AreaView';\nimport CityView from './components/CityView';\nimport ProjectView from './components/ProjectView';\nimport XLSX from 'xlsx';\nimport { Row, Col, message, LocaleProvider, Tabs } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  TICKET_SYSTEM_COUNT,\n  TICKET_ACCEPT,\n  TICKET_OPEN,\n  TICKET_VALIDATE,\n  TICKET_PAUSE,\n  TICKET_INVALID,\n  TICKET_CLOSE,\n  TICKET_CLOSE_NORMAL,\n  TICKET_CLOSE_ABNORMAL,\n  TICKET_CLOSE_ON_TIME,\n  TICKET_RESPONSE_IN_30_MIN,\n  TICKET_RESPONSE_IN_30_HOUR,\n  TICKET_CLOSE_PROCESS_TIME,\n  TICKET_OPEN_PROCESS_TIME,\n  DEFAULT_STATISTIC_ITEMS,\n  KEY_REPORT_TIME,\n  KEY_PROJECT_NAME,\n  KEY_SECOND_CATEGORY,\n  KEY_TICKET_STATUS,\n  KEY_IS_PROCESS_EXCCED,\n  KEY_FIRST_RESPONSE_TIME,\n  KEY_PROCESS_TIME,\n  KEY_CLOSE_TIME,\n  DEFAULT_SECOND_CATEGORIES,\n  KEY_STATISTIC_ITEM,\n  KEY_TICKET_TOTAL,\n  KEY_CITY_NAME,\n  STATISTIC_PERIOD_ADD,\n  STATISTIC_BEFORE_PERIOD_REMAIN,\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_THIS_YEAR_TOTAL,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\n  STATISTIC_BEFORE_PERIOD_TOTAL,\n  STATISTIC_PERIOD_RATE,\n  STAGES,\n  NEW_ADD_CLOSE_RATE,\n  REMAIN_CLOSE_RATE,\n  OVERALL_CLOSE_RATE,\n  RESPONSE_IN_30_MIN_RATE,\n  RESPONSE_IN_30_HOUR_RATE,\n  CLOSE_ON_TIME_RATE,\n  TOTAL_OVERALL_CLOSE_RATE,\n  RATE_STATISTIC_ITEMS\n} from './constants';\n\nimport {\n  filterProjectName,\n  parseTime,\n  filterProjectStage,\n  formatToTable,\n  formatToAreaTable,\n  formatToAreaTateTable\n} from './utils';\n\n// ticket status\nconst TICKET_STATUS_IN_PROGRESS = '处理中';\nconst TICKET_STATUS_PAUSE = '暂停处理';\nconst TICKET_STATUS_VALIDATE = '待复验';\nconst TICKET_STATUS_CLOSE = '已关闭';\nconst TICKET_STATUS_ABNORMAL_CLOSE = '非正常关闭';\nconst TICKET_STATUS_INVALID = '判定无效';\n\nconst YES = '是';\nconst NO = '否';\n\nfunction initProjectRate() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of RATE_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction initProject() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of DEFAULT_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction isInProgress(ticketStatus) {\n  return ticketStatus.indexOf(TICKET_STATUS_IN_PROGRESS) === 0;\n}\n\n// 统计周期内新增\nfunction statistic(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 统计周期前遗留\nfunction statisticThisYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 本年度统计周期前遗留累计\nfunction statisticThisYearBeforeStartDateTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n  }\n\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticThisYearTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if (((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) &&\n      ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticRate(statisticMap, statisticItem, rateMap) {\n  for (let projectName in statisticMap) {\n    if (rateMap[projectName] == null) {\n      rateMap[projectName] = initProjectRate();\n    }\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      if (statisticItem === NEW_ADD_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === REMAIN_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE_ON_TIME] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      }\n    }\n  }\n}\n\nfunction statisticCityRate(statisticMap, statisticItem, rateMap) {\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    if ( rateMap[secondCategory] == null) {\n      rateMap[secondCategory] = {};\n    }\n    if (statisticItem === NEW_ADD_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === REMAIN_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE_ON_TIME] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    }\n  }\n}\n\nfunction readExcels(fileList) {\n  return new Promise((resolve, reject) => {\n    let fileReader = new FileReader();\n    let data = {};\n\n    let readFile = (index) => {\n      if (index < fileList.length) {\n        fileReader.onload = (event) => {\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\n          let cityName = fileList[index].name.substring(0, fileList[index].name.indexOf('.'));\n          data[cityName] = XLSX.utils.sheet_to_json(sheet, { blankrows: false });\n          readFile(index + 1);\n        }\n        fileReader.readAsBinaryString(fileList[index]);\n      } else {\n        resolve(data);\n      }\n    };\n    readFile(0);\n  });\n}\n\nlet globalRowKey = 0;\n\nfunction formatCityData(data, city) {\n  let tableData = [];\n  for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction formatToCityRateTable(data, city) {\n  let tableData = [];\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction mergeStageResult(resultArray, filterFunc) {\n  let mergeResult = {};\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      let filteredProjectName = filterFunc(projectName);\n      if (mergeResult[filteredProjectName] == null) {\n        mergeResult[filteredProjectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[filteredProjectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[filteredProjectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[filteredProjectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in mergeResult) {\n    for (let secondCategory in mergeResult[projectName]) {\n      let ticketCloseProcessTime = mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = mergeResult[projectName][secondCategory][TICKET_CLOSE];\n      mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = mergeResult[projectName][secondCategory][TICKET_OPEN];\n      mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return mergeResult;\n}\n\nfunction mergeProjectResult(resultArray) {\n  let mergeResult = initProject();\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let secondCategory in mergeResult) {\n    let ticketCloseProcessTime = mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME];\n    let ticketCloseCount = mergeResult[secondCategory][TICKET_CLOSE];\n    mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n      ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n    let ticketOpenProcessTime = mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME];\n    let ticketOpenCount = mergeResult[secondCategory][TICKET_OPEN];\n    mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] =\n      ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n  }\n\n  return mergeResult;\n}\n\n\nfunction statisticCity(data, startDate, endDate) {\n  // 统计分期\n  let periodNewAddedTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime >= startDate && reportTime <= endDate;\n  });\n  let periodNewAddedResult = statistic(periodNewAddedTickets, startDate, endDate);\n\n  let yearStartDate = moment(startDate).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n  let thisYearbeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < startDate && reportTime >= yearStartDate;\n  });\n\n  let thisYearBeforePeriodResult = statisticThisYearBeforePeriodTickets(thisYearbeforePeriodTickets,\n    startDate, endDate);\n\n  let thisYearBeforePeriodTotalResult = statisticThisYearBeforeStartDateTotalTickets(\n    thisYearbeforePeriodTickets, yearStartDate, endDate);\n\n  let thisYearTotalTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime <= endDate && reportTime >= yearStartDate;\n  });\n  let thisYearTotalResult = statisticThisYearTotalTickets(thisYearTotalTickets,\n    yearStartDate, endDate);\n\n  let lastYearBeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < yearStartDate;\n  });\n  let lastYearBeforePeriodResult = statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\n    startDate, endDate);\n  \n  let lastYearBeforePeriodTotalResult = statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\n    yearStartDate, endDate);\n\n  let beforePeriodNeedHandleResult = {};\n  [periodNewAddedResult, thisYearBeforePeriodResult, lastYearBeforePeriodResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (beforePeriodNeedHandleResult[projectName] == null) {\n        beforePeriodNeedHandleResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            beforePeriodNeedHandleResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in beforePeriodNeedHandleResult) {\n    for (let secondCategory in beforePeriodNeedHandleResult[projectName]) {\n      let ticketCloseProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let periodTotalResult = {};\n  [lastYearBeforePeriodTotalResult, thisYearTotalResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (periodTotalResult[projectName] == null) {\n        periodTotalResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            periodTotalResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in periodTotalResult) {\n    for (let secondCategory in periodTotalResult[projectName]) {\n      let ticketCloseProcessTime = periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = periodTotalResult[projectName][secondCategory][TICKET_CLOSE];\n      periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = periodTotalResult[projectName][secondCategory][TICKET_OPEN];\n      periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let stageRateResult = {};\n  statisticRate(periodNewAddedResult, NEW_ADD_CLOSE_RATE, stageRateResult);\n  statisticRate(thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, stageRateResult);\n  statisticRate(periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, stageRateResult);\n  \n  let stageResult = {\n    periodNewAddedResult: periodNewAddedResult,\n    thisYearBeforePeriodResult: thisYearBeforePeriodResult,\n    thisYearBeforePeriodTotalResult: thisYearBeforePeriodTotalResult,\n    lastYearBeforePeriodResult: lastYearBeforePeriodResult,\n    lastYearBeforePeriodTotalResult: lastYearBeforePeriodTotalResult,\n    beforePeriodNeedHandleResult: beforePeriodNeedHandleResult,\n    thisYearTotalResult: thisYearTotalResult,\n    periodTotalResult: periodTotalResult,\n    rateResult: stageRateResult\n  };\n\n  // 统计项目\n  let projectResult = {\n    periodNewAddedResult:  mergeStageResult([periodNewAddedResult], filterProjectStage),\n    thisYearBeforePeriodResult: mergeStageResult([thisYearBeforePeriodResult], filterProjectStage),\n    thisYearBeforePeriodTotalResult: mergeStageResult([thisYearBeforePeriodTotalResult], filterProjectStage),\n    thisYearTotalResult: mergeStageResult([thisYearTotalResult], filterProjectStage),\n    lastYearBeforePeriodResult: mergeStageResult([lastYearBeforePeriodResult], filterProjectStage),\n    lastYearBeforePeriodTotalResult: mergeStageResult([lastYearBeforePeriodTotalResult], filterProjectStage),\n    beforePeriodNeedHandleResult: mergeStageResult([beforePeriodNeedHandleResult], filterProjectStage),\n    periodTotalResult: mergeStageResult([periodTotalResult], filterProjectStage)\n  };\n  let projectRateResult = {}\n  statisticRate(projectResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, projectRateResult);\n  statisticRate(projectResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, projectRateResult);\n  projectResult.rateResult = projectRateResult;\n\n  let cityResult = {\n    periodNewAddedResult:  mergeProjectResult([projectResult.periodNewAddedResult]),\n    thisYearBeforePeriodResult: mergeProjectResult([projectResult.thisYearBeforePeriodResult]),\n    thisYearBeforePeriodTotalResult: mergeProjectResult([projectResult.thisYearBeforePeriodTotalResult]),\n    thisYearTotalResult: mergeProjectResult([projectResult.thisYearTotalResult]),\n    lastYearBeforePeriodResult: mergeProjectResult([projectResult.lastYearBeforePeriodResult]),\n    lastYearBeforePeriodTotalResult: mergeProjectResult([projectResult.lastYearBeforePeriodTotalResult]),\n    beforePeriodNeedHandleResult: mergeProjectResult([projectResult.beforePeriodNeedHandleResult]),\n    periodTotalResult: mergeProjectResult([projectResult.periodTotalResult])\n  };\n  let cityRateResult = {}\n  statisticCityRate(cityResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, cityRateResult);\n  cityResult.rateResult = cityRateResult;\n\n  let result = {\n    stageResult,\n    projectResult,\n    cityResult\n  };\n  return result;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityData: {\n        periodNewAddedData: [],\n        thisYearBeforePeriodData: [],\n        thisYearBeforePeriodTotalData: [],\n        thisYearTotalData: [],\n        lastYearBeforePeriodData: [],\n        lastYearBeforePeriodTotalData: [],\n        beforePeriodNeedHandleData: [],\n        periodTotalData: [],\n        rateData: [],\n        cities: []\n      },\n      areaData: {\n        periodNewAddedData: [],\n        thisYearBeforePeriodData: [],\n        thisYearBeforePeriodTotalData: [],\n        thisYearTotalData: [],\n        lastYearBeforePeriodData: [],\n        lastYearBeforePeriodTotalData: [],\n        beforePeriodNeedHandleData: [],\n        periodTotalData: [],\n        rateData: []\n      },\n      loading: false\n    };\n  }\n\n  start = (fileList, startDate, endDate) => {\n    this.setState({ loading: true });\n    readExcels(fileList).then((data) => {\n      // clear previous data\n      this.setState({\n        cityData: {\n          periodNewAddedData: [],\n          thisYearBeforePeriodData: [],\n          thisYearBeforePeriodTotalData: [],\n          thisYearTotalData: [],\n          lastYearBeforePeriodData: [],\n          lastYearBeforePeriodTotalData: [],\n          beforePeriodNeedHandleData: [],\n          periodTotalData: [],\n          rateData: [],\n          cities: [],\n          cityOpenData: []\n        },\n        projectData: {},\n        stageResult: {}\n      });\n      let allCities = [];\n      let allCityResult = {};\n      for (let cityName in data) {\n        allCities.push(cityName);\n        let result = statisticCity(data[cityName], startDate, endDate);\n        allCityResult[cityName] = result.cityResult;\n        this.setState((state) => ({\n          cityData: {\n            periodNewAddedData:  [...state.cityData.periodNewAddedData, ...formatCityData(result.cityResult.periodNewAddedResult, cityName)],\n            thisYearBeforePeriodData: [...state.cityData.thisYearBeforePeriodData, ...formatCityData(result.cityResult.thisYearBeforePeriodResult, cityName)],\n            thisYearBeforePeriodTotalData: [...state.cityData.thisYearBeforePeriodTotalData, ...formatCityData(result.cityResult.thisYearBeforePeriodTotalResult, cityName)],\n            thisYearTotalData: [...state.cityData.thisYearTotalData, ...formatCityData(result.cityResult.thisYearTotalResult, cityName)],\n            lastYearBeforePeriodData: [...state.cityData.lastYearBeforePeriodData, ...formatCityData(result.cityResult.lastYearBeforePeriodResult, cityName)],\n            lastYearBeforePeriodTotalData: [...state.cityData.lastYearBeforePeriodTotalData, ...formatCityData(result.cityResult.lastYearBeforePeriodTotalResult, cityName)],\n            beforePeriodNeedHandleData: [...state.cityData.beforePeriodNeedHandleData, ...formatCityData(result.cityResult.beforePeriodNeedHandleResult, cityName)],\n            periodTotalData: [...state.cityData.periodTotalData, ...formatCityData(result.cityResult.periodTotalResult, cityName)],\n            rateData: [...state.cityData.rateData, ...formatToCityRateTable(result.cityResult.rateResult, cityName)],\n            cities: allCities\n          }\n        }));\n        this.setState(state => ({\n          projectData: {\n            ...state.projectData,\n            [cityName]: result.projectResult\n          }\n        }));\n        this.setState(state => ({\n          stageResult: {\n            ...state.stageResult,\n            [cityName]: result.stageResult\n          }\n        }));\n      }\n      let areaResult = {\n        periodNewAddedResult: initProject(),\n        thisYearBeforePeriodResult: initProject(),\n        thisYearBeforePeriodTotalResult: initProject(),\n        thisYearTotalResult: initProject(),\n        lastYearBeforePeriodResult: initProject(),\n        lastYearBeforePeriodTotalResult: initProject(),\n        beforePeriodNeedHandleResult: initProject(),\n        periodTotalResult: initProject()\n      };\n      // statistic area result\n      for (let table in areaResult) {\n        for (let cityName in allCityResult) {\n          for (let secondCategory in areaResult[table]) {\n            let result = allCityResult[cityName][table][secondCategory];\n            for (let item in result) {\n              if (item === TICKET_CLOSE_PROCESS_TIME) {\n                let ticketCloseCount = result[TICKET_CLOSE];\n                let ticketCloseProcessTime = result[TICKET_CLOSE_PROCESS_TIME];\n                areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n                  ticketCloseCount * ticketCloseProcessTime;\n              } else if (item === TICKET_OPEN_PROCESS_TIME) {\n                let ticketOpenProcessTime = result[TICKET_OPEN_PROCESS_TIME];\n                let ticketOpenCount = result[TICKET_OPEN];\n                areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n                  ticketOpenCount * ticketOpenProcessTime;\n              }\n              else {\n                areaResult[table][secondCategory][item] += result[item];\n              }\n            }\n          }\n        }\n      }\n      // get average process time\n      for (let table in areaResult) {\n        for (let secondCategory in areaResult[table]) {\n          let ticketCloseProcessTime = areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n          let ticketCloseCount = areaResult[table][secondCategory][TICKET_CLOSE];\n          areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n            ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n          let ticketOpenProcessTime = areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME];\n          let ticketOpenCount = areaResult[table][secondCategory][TICKET_OPEN];\n          areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n            ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n        }\n      }\n      let areaRateResult = {}\n      statisticCityRate(areaResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, areaRateResult);\n      statisticCityRate(areaResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, areaRateResult);\n      statisticCityRate(areaResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, areaRateResult);\n      statisticCityRate(areaResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, areaRateResult);\n      statisticCityRate(areaResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, areaRateResult);\n      statisticCityRate(areaResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, areaRateResult);\n      statisticCityRate(areaResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, areaRateResult);\n      areaResult.rateResult = areaRateResult;\n      this.setState({\n        areaData: {\n          periodNewAddedData: formatToAreaTable(areaResult.periodNewAddedResult),\n          thisYearBeforePeriodData: formatToAreaTable(areaResult.thisYearBeforePeriodResult),\n          thisYearBeforePeriodTotalData: formatToAreaTable(areaResult.thisYearBeforePeriodTotalResult),\n          thisYearTotalData: formatToAreaTable(areaResult.thisYearTotalResult),\n          lastYearBeforePeriodData: formatToAreaTable(areaResult.lastYearBeforePeriodResult),\n          lastYearBeforePeriodTotalData: formatToAreaTable(areaResult.lastYearBeforePeriodTotalResult),\n          beforePeriodNeedHandleData: formatToAreaTable(areaResult.beforePeriodNeedHandleResult),\n          periodTotalData: formatToAreaTable(areaResult.periodTotalResult),\n          rateData: formatToAreaTateTable(areaResult.rateResult)\n        }\n      });\n\n      // 画图：剩余未关城市分布饼状图\n      let cityOpenData = [];\n      for (let cityName in allCityResult) {\n        let value = allCityResult[cityName].beforePeriodNeedHandleResult[KEY_TICKET_TOTAL][TICKET_OPEN];\n        cityOpenData = [...cityOpenData, { name: cityName, value}];\n      }\n      this.setState({\n        cityOpenData\n      });\n\n      // 画图：剩余未关二级分类饼状图\n      let secondCategoryOpenData = [];\n      for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n        let value = areaResult.beforePeriodNeedHandleResult[secondCategory][TICKET_OPEN];\n        secondCategoryOpenData = [...secondCategoryOpenData, {\n          name: secondCategory,\n          value\n        }]\n      }\n      this.setState({\n        secondCategoryOpenData\n      });\n\n      // 画图：新增受理城市分布图\n      let cityNewAddedAcceptData = [];\n      for (let cityName in allCityResult) {\n        let value = allCityResult[cityName].periodNewAddedResult[KEY_TICKET_TOTAL][TICKET_ACCEPT];\n        cityNewAddedAcceptData = [\n          ...cityNewAddedAcceptData, {\n            name: cityName,\n            value\n          }\n        ]\n      }\n      this.setState({\n        cityNewAddedAcceptData\n      })\n\n      // 画图：新增受理二级分类分布图\n      let secondCategoryNewAddedAcceptData = [];\n      for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n        let value = areaResult.periodNewAddedResult[secondCategory][TICKET_ACCEPT];\n        secondCategoryNewAddedAcceptData = [...secondCategoryNewAddedAcceptData, {\n          name: secondCategory,\n          value\n        }]\n      }\n      this.setState({\n        secondCategoryNewAddedAcceptData\n      });\n\n      // 画图：截至本年度统计周期受理累计\n      let cityAcceptTotalData = [];\n      for (let cityName in allCityResult) {\n        let value = allCityResult[cityName].periodTotalResult[KEY_TICKET_TOTAL][TICKET_ACCEPT];\n        cityAcceptTotalData = [\n          ...cityAcceptTotalData,\n          { name: cityName, value }\n        ];\n      }\n      this.setState({\n        cityAcceptTotalData\n      });\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  exportExcel = () => {\n    let header = [KEY_PROJECT_NAME, KEY_STATISTIC_ITEM, ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL];\n    if (this.state.newAddedData.length > 0 || this.state.thisYearBeforeStartData.length > 0 ||\n      this.state.thisYearBeforePeriodTotalData.length > 0 || this.state.thisYearTotalData.length > 0 ||\n      this.state.lastYearBeforePeriodData.length > 0 ||\n      this.state.lastYearBeforePeriodTotalData.length > 0 ||\n      this.state.beforePeriodNeedHandleData.length > 0 ||\n      this.state.periodTotalData.length > 0) {\n      let sheet1 = XLSX.utils.json_to_sheet(this.state.periodNewAddedData, {\n        header: header\n      });\n      let sheet2 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodData, {\n        header: header\n      });\n      let sheet3 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodTotalData, {\n        header: header\n      });\n      let sheet4 = XLSX.utils.json_to_sheet(this.state.thisYearTotalData, {\n        header: header\n      });\n      let sheet5 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodData, {\n        header: header\n      });\n      let sheet6 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodTotalData, {\n        header: header\n      });\n      let sheet7 = XLSX.utils.json_to_sheet(this.state.beforePeriodNeedHandleData, {\n        header: header\n      });\n      let sheet8 = XLSX.utils.json_to_sheet(this.state.periodTotalData, {\n        header: header\n      });\n      let sheet9 = XLSX.utils.json_to_sheet(this.state.rateData, {\n        header: header\n      });\n      let workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, sheet1, STATISTIC_PERIOD_ADD);\n      XLSX.utils.book_append_sheet(workbook, sheet2, STATISTIC_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet3, STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet4, STATISTIC_THIS_YEAR_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet5, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet6, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet7, STATISTIC_BEFORE_PERIOD_NEED_HANDLE);\n      XLSX.utils.book_append_sheet(workbook, sheet8, STATISTIC_BEFORE_PERIOD_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet9, STATISTIC_PERIOD_RATE)\n      XLSX.writeFile(workbook, 'statistic-' + moment(Date.now()).format('YYYY-MM-DD-HH-MM-SS') + '.xlsx')\n    } else {\n      message.error('请先点击“开始统计”按钮进行统计！');\n    }\n  }\n\n  render() {\n    const tabChart = (\n      <ChartView\n        cityOpenData={this.state.cityOpenData}\n        secondCategoryOpenData={this.state.secondCategoryOpenData}\n        cityNewAddedAcceptData={this.state.cityNewAddedAcceptData}\n        secondCategoryNewAddedAcceptData={this.state.secondCategoryNewAddedAcceptData}\n        cityAcceptTotalData={this.state.cityAcceptTotalData}\n        cities={this.state.cityData.cities}\n      />\n    );\n\n    const tabArea = (\n      <AreaView\n        periodNewAddedData={this.state.areaData.periodNewAddedData}\n        thisYearBeforePeriodData={this.state.areaData.thisYearBeforePeriodData}\n        thisYearBeforePeriodTotalData={this.state.areaData.thisYearBeforePeriodTotalData}\n        thisYearTotalData={this.state.areaData.thisYearTotalData}\n        lastYearBeforePeriodData={this.state.areaData.lastYearBeforePeriodData}\n        lastYearBeforePeriodTotalData={this.state.areaData.lastYearBeforePeriodTotalData}\n        beforePeriodNeedHandleData={this.state.areaData.beforePeriodNeedHandleData}\n        periodTotalData={this.state.areaData.periodTotalData}\n        rateData={this.state.areaData.rateData}\n      />\n    );\n\n    const tabCity = (\n      <CityView\n        periodNewAddedData={this.state.cityData.periodNewAddedData}\n        thisYearBeforePeriodData={this.state.cityData.thisYearBeforePeriodData}\n        thisYearBeforePeriodTotalData={this.state.cityData.thisYearBeforePeriodTotalData}\n        thisYearTotalData={this.state.cityData.thisYearTotalData}\n        lastYearBeforePeriodData={this.state.cityData.lastYearBeforePeriodData}\n        lastYearBeforePeriodTotalData={this.state.cityData.lastYearBeforePeriodTotalData}\n        beforePeriodNeedHandleData={this.state.cityData.beforePeriodNeedHandleData}\n        periodTotalData={this.state.cityData.periodTotalData}\n        rateData={this.state.cityData.rateData}\n        cities={this.state.cityData.cities}\n        cityOpenData={this.state.cityData.cityOpenData}\n        secondCategoryOpenData={this.state.secondCategoryOpenData}\n      />\n    );\n\n    const tabProject = (\n      <ProjectView\n        cities={this.state.cityData.cities}\n        projectData={this.state.projectData}\n      />\n    );\n\n    const tabStage = (\n      <ProjectView\n        cities={this.state.cityData.cities}\n        projectData={this.state.stageResult}\n      />\n    );\n \n    return (\n      <LocaleProvider locale={zh_CN}>\n        <div>\n          <h2 className=\"text--center heading\">统计辅助工具</h2>\n          <DataForm\n            onStart={this.start}\n            onExport={this.exportExcel}\n            loading={this.state.loading}\n          />\n          <Row style={{ margin: '40px 0' }}>\n            <Col span={22} offset={1}>\n              <Tabs type=\"card\">\n                <Tabs.TabPane tab=\"统计图\" key=\"统计图\">{tabChart}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"大区\" key=\"大区\">{tabArea}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"城市\" key=\"城市\">{tabCity}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"项目\" key=\"项目\">{tabProject}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"分期\" key=\"分期\">{tabStage}</Tabs.TabPane>\n              </Tabs>\n            </Col>\n          </Row>\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}