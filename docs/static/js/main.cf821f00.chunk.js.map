{"version":3,"sources":["components/DataForm.js","constants.js","components/ResultTable.js","components/ResultChart.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startDate","Date","set","hour","minute","second","endDate","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","toConsumableArray","concat","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","style","margin","onExport","React","Component","defaultPorps","WrapDataForm","create","TICKET_SYSTEM_COUNT","TICKET_ACCEPT","TICKET_OPEN","TICKET_VALIDATE","TICKET_PAUSE","TICKET_INVALID","TICKET_CLOSE","TICKET_CLOSE_NORMAL","TICKET_CLOSE_ABNORMAL","TICKET_CLOSE_ON_TIME","TICKET_RESPONSE_IN_30_MIN","TICKET_RESPONSE_IN_30_HOUR","TICKET_CLOSE_PROCESS_TIME","TICKET_OPEN_PROCESS_TIME","DEFAULT_STATISTIC_ITEMS","KEY_REPORT_TIME","KEY_PROJECT_NAME","KEY_SECOND_CATEGORY","KEY_TICKET_STATUS","KEY_IS_PROCESS_EXCCED","KEY_FIRST_RESPONSE_TIME","KEY_PROCESS_TIME","KEY_CLOSE_TIME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","DEFAULT_SECOND_CATEGORIES","STATISTIC_PERIOD_ADD","STATISTIC_BEFORE_PERIOD_REMAIN","STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_THIS_YEAR_TOTAL","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_BEFORE_PERIOD_NEED_HANDLE","STATISTIC_BEFORE_PERIOD_TOTAL","ResultTable","data","filteredProjects","projectColumn","table","Column","dataIndex","title","width","key","otherColumns","map","item","currentPageData","dataSource","filter","length","pagination","pageSize","scroll","y","size","defaultProps","ResultChart","filterProjectName","projectName","sub","match","substring","parseTime","timeString","time","day","min","window","parseInt","TICKET_STATUS_IN_PROGRESS","TICKET_STATUS_PAUSE","TICKET_STATUS_VALIDATE","TICKET_STATUS_CLOSE","TICKET_STATUS_ABNORMAL_CLOSE","TICKET_STATUS_INVALID","NO","initProject","_arr2","_i2","secondCategory","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","itemName","return","isInProgress","ticketStatus","formatToTable","tableData","rowKey","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","statisticItem","rowData","_arr3","_i3","push","App","start","fileReader","FileReader","readFile","onload","event","workbook","XLSX","read","target","result","sheet","Sheets","SheetNames","utils","sheet_to_json","blankrows","readAsBinaryString","readExcels","allProjects","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","projects","newAddedResult","closeTimeStart","closeTimeEnd","dataMap","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","ticket","ticketStatistic","ticketCloseTime","moment","_parseTime","_parseTime2","_parseTime3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","ticketCloseProcessTime","ticketCloseCount","Number","toFixed","ticketOpenProcessTime","ticketOpenCount","statistic","reportTime","newAddedData","yearStartDate","month","date","thisYearbeforeStartDateTickets","thisYearBeforeStartDateResult","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_parseTime4","_parseTime5","_parseTime6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","statisticThisYearBeforeStartDateTickets","thisYearBeforeStartData","thisYearBeforeStartDateTotalResult","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","statisticThisYearBeforeStartDateTotalTickets","thisYearBeforeStartTotalData","thisYearTotalResult","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_parseTime13","_parseTime14","_parseTime15","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","statisticThisYearTotalTickets","thisYearTotalData","lastYearBeforePeriodTickets","lastYearBeforePeriodResult","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_parseTime7","_parseTime8","_parseTime9","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","statisticLastYearBeforePeriodTickets","lastYearBeforePeriodData","lastYearBeforePeriodTotalResult","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","_parseTime10","_parseTime11","_parseTime12","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","statisticLastYearBeforePeriodTotalTickets","lastYearBeforePeriodTotalData","beforePeriodNeedHandleResult","forEach","_arr4","_i4","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","beforePeriodNeedHandleData","periodTotal","_arr5","_i5","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","periodTotalData","periodPercentResult","exportExcel","header","sheet1","json_to_sheet","sheet2","sheet3","sheet4","sheet5","sheet6","sheet7","sheet8","book_new","book_append_sheet","writeFile","now","error","changeProjects","options","closePercentData","locale_provider","locale","zh_CN","className","components_DataForm","es_select","mode","placeholder","onChange","Option","components_ResultTable","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf821f00.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {},\n    onExport: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func,\n    onExport: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startDate = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endDate = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startDate, endDate);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              { \n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }   \n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在统计...': '开始统计'\n              }\n            </Button>\n            <Button style={{ margin: '0 20px' }} onClick={this.props.onExport}>导出Excel表格</Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '判定无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关平均处理时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '剩余未关平均处理时长（天）';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_PERCENT = '本年度统计周期内';","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ResultTable(props) {\r\n  const { data, filteredProjects } = props;\r\n\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title={KEY_PROJECT_NAME}\r\n      width={150}\r\n      key={KEY_PROJECT_NAME}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      width={150}\r\n      key={item}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={data.filter(item => {\r\n        return filteredProjects.length > 0 ? filteredProjects.indexOf(item[KEY_PROJECT_NAME]) != -1 : true;\r\n      })}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nResultTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ResultTable;","import React from 'react';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\r\n\r\nfunction ResultChart(props) {\r\n  const data = [\r\n    {name: 'Page A', uv: 4000, pv: 2400, amt: 2400},\r\n    {name: 'Page B', uv: 3000, pv: 1398, amt: 2210},\r\n    {name: 'Page C', uv: 2000, pv: 9800, amt: 2290},\r\n    {name: 'Page D', uv: 2780, pv: 3908, amt: 2000},\r\n    {name: 'Page E', uv: 1890, pv: 4800, amt: 2181},\r\n    {name: 'Page F', uv: 2390, pv: 3800, amt: 2500},\r\n    {name: 'Page G', uv: 3490, pv: 4300, amt: 2100},\r\n  ];\r\n  return (\r\n    <BarChart width={600} height={300} data={data}>\r\n       <CartesianGrid strokeDasharray=\"3 3\"/>\r\n       <XAxis dataKey=\"name\"/>\r\n       <YAxis/>\r\n       <Tooltip/>\r\n       <Legend />\r\n       <Bar dataKey=\"pv\" fill=\"#8884d8\" />\r\n       <Bar dataKey=\"uv\" fill=\"#82ca9d\" />\r\n    </BarChart>\r\n  );\r\n}\r\n\r\nexport default ResultChart;\r\n","export function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|\\（.*?\\）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport DataForm from './components/DataForm';\nimport ResultTable from './components/ResultTable';\nimport ResultChart from './components/ResultChart';\nimport XLSX from 'xlsx';\nimport { Row, Col, message, LocaleProvider, Select } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  TICKET_SYSTEM_COUNT,\n  TICKET_ACCEPT,\n  TICKET_OPEN,\n  TICKET_VALIDATE,\n  TICKET_PAUSE,\n  TICKET_INVALID,\n  TICKET_CLOSE,\n  TICKET_CLOSE_NORMAL,\n  TICKET_CLOSE_ABNORMAL,\n  TICKET_CLOSE_ON_TIME,\n  TICKET_RESPONSE_IN_30_MIN,\n  TICKET_RESPONSE_IN_30_HOUR,\n  TICKET_CLOSE_PROCESS_TIME,\n  TICKET_OPEN_PROCESS_TIME,\n  DEFAULT_STATISTIC_ITEMS,\n  KEY_REPORT_TIME,\n  KEY_PROJECT_NAME,\n  KEY_SECOND_CATEGORY,\n  KEY_TICKET_STATUS,\n  KEY_IS_PROCESS_EXCCED,\n  KEY_FIRST_RESPONSE_TIME,\n  KEY_PROCESS_TIME,\n  KEY_CLOSE_TIME,\n  DEFAULT_SECOND_CATEGORIES,\n  KEY_STATISTIC_ITEM,\n  KEY_TICKET_TOTAL,\n  STATISTIC_PERIOD_ADD,\n  STATISTIC_BEFORE_PERIOD_REMAIN,\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_THIS_YEAR_TOTAL,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\n  STATISTIC_BEFORE_PERIOD_TOTAL,\n  STATISTIC_PERIOD_PERCENT\n} from './constants';\n\nimport {\n  filterProjectName,\n  parseTime\n} from './utils';\n\n// ticket status\nconst TICKET_STATUS_IN_PROGRESS = '处理中';\nconst TICKET_STATUS_PAUSE = '暂停处理';\nconst TICKET_STATUS_VALIDATE = '待复验';\nconst TICKET_STATUS_CLOSE = '已关闭';\nconst TICKET_STATUS_ABNORMAL_CLOSE = '非正常关闭';\nconst TICKET_STATUS_INVALID = '判定无效';\n\nconst IN_PROGRESS_TICKET_TOTAL_HANDLE_TIME = '未关闭处理时长总数';\n\nconst YES = '是';\nconst NO = '否';\n\nfunction initProjectCloseRate() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of DEFAULT_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nconst CLOSE_PERCENT_STATISTIC_ITEMS = [\n  '遗留关闭率'\n];\n\nfunction initProject() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of DEFAULT_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction isInProgress(ticketStatus) {\n  return ticketStatus.indexOf(TICKET_STATUS_IN_PROGRESS) === 0;\n}\n\n// 统计周期内新增\nfunction statistic(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 统计周期前遗留\nfunction statisticThisYearBeforeStartDateTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 本年度统计周期前遗留累计\nfunction statisticThisYearBeforeStartDateTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n  }\n\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticThisYearTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if (((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) &&\n      ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction readExcels(fileList) {\n  return new Promise((resolve, reject) => {\n    let fileReader = new FileReader();\n    let data = [];\n\n    let readFile = (index) => {\n      if (index < fileList.length) {\n        fileReader.onload = (event) => {\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\n          data = data.concat(XLSX.utils.sheet_to_json(sheet, { blankrows: false }));\n          readFile(index + 1);\n        }\n        fileReader.readAsBinaryString(fileList[index]);\n      } else {\n        resolve(data);\n      }\n    };\n    readFile(0);\n  });\n}\n\nfunction formatToTable(data) {\n  let tableData = [];\n  var rowKey = 0;\n  for (let projectName in data) {\n    for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n      let rowData = {};\n      rowKey++;\n      rowData.key = rowKey;\n      rowData[KEY_PROJECT_NAME] = projectName;\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\n      }\n      tableData.push(rowData);\n    }\n  }\n  return tableData;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newAddedData: [],\n      thisYearBeforeStartData: [],\n      thisYearBeforeStartTotalData: [],\n      lastYearBeforePeriodData: [],\n      lastYearBeforePeriodTotalData: [],\n      beforePeriodNeedHandleData: [],\n      thisYearTotalData: [],\n      periodTotalData: [],\n      closePercentData: [],\n      projects: [],\n      filteredProjects: [],\n      loading: false\n    };\n  }\n\n  start = (fileList, startDate, endDate) => {\n    this.setState({ loading: true });\n    readExcels(fileList).then((data) => {\n      // get all projects\n      let allProjects = [];\n      for (let item of data) {\n        let projectName = filterProjectName(item[KEY_PROJECT_NAME]);\n        if (allProjects.indexOf(projectName) === -1) {\n          allProjects.push(projectName);\n        }\n      }\n      this.setState({\n        projects: allProjects\n      });\n\n      let newAddedTickets = data.filter((item) => {\n        let reportTime = moment(item[KEY_REPORT_TIME]);\n        let secondCategory = item[KEY_SECOND_CATEGORY];\n        return secondCategory != null && reportTime >= startDate && reportTime <= endDate;\n      });\n\n      let newAddedResult = statistic(newAddedTickets, startDate, endDate);\n\n      this.setState({\n        newAddedData: formatToTable(newAddedResult)\n      });\n\n      let yearStartDate = moment(startDate).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n      let thisYearbeforeStartDateTickets = data.filter((item) => {\n        let reportTime = moment(item[KEY_REPORT_TIME]);\n        let secondCategory = item[KEY_SECOND_CATEGORY];\n        return secondCategory != null && reportTime < startDate && reportTime >= yearStartDate;\n      });\n\n      let thisYearBeforeStartDateResult = statisticThisYearBeforeStartDateTickets(thisYearbeforeStartDateTickets, startDate, endDate);\n      this.setState({\n        thisYearBeforeStartData: formatToTable(thisYearBeforeStartDateResult)\n      });\n\n      let thisYearBeforeStartDateTotalResult = statisticThisYearBeforeStartDateTotalTickets(thisYearbeforeStartDateTickets);\n      this.setState({\n        thisYearBeforeStartTotalData: formatToTable(thisYearBeforeStartDateTotalResult)\n      });\n\n      let thisYearTotalTickets = data.filter((item) => {\n        let reportTime = moment(item[KEY_REPORT_TIME]);\n        let secondCategory = item[KEY_SECOND_CATEGORY];\n        return secondCategory != null && reportTime <= endDate && reportTime >= yearStartDate;\n      });\n      let thisYearTotalResult = statisticThisYearTotalTickets(thisYearTotalTickets, yearStartDate, endDate);\n      this.setState({\n        thisYearTotalData: formatToTable(thisYearTotalResult)\n      });\n\n      let lastYearBeforePeriodTickets = data.filter((item) => {\n        let reportTime = moment(item[KEY_REPORT_TIME]);\n        let secondCategory = item[KEY_SECOND_CATEGORY];\n        return secondCategory != null && reportTime < yearStartDate;\n      });\n      let lastYearBeforePeriodResult = statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets, startDate, endDate);\n      this.setState({\n        lastYearBeforePeriodData: formatToTable(lastYearBeforePeriodResult)\n      });\n\n      let lastYearBeforePeriodTotalResult = statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets, yearStartDate, endDate);\n      this.setState({\n        lastYearBeforePeriodTotalData: formatToTable(lastYearBeforePeriodTotalResult)\n      });\n\n      let beforePeriodNeedHandleResult = {};\n      [newAddedResult, thisYearBeforeStartDateResult, lastYearBeforePeriodResult].forEach(function (result) {\n        for (let projectName in result) {\n          if (beforePeriodNeedHandleResult[projectName] == null) {\n            beforePeriodNeedHandleResult[projectName] = initProject();\n          }\n          for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n            for (let item of DEFAULT_STATISTIC_ITEMS) {\n              if (item === TICKET_CLOSE_PROCESS_TIME) {\n                let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n                let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n                beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n                  ticketCloseCount * ticketCloseProcessTime;\n              } else if (item === TICKET_OPEN_PROCESS_TIME) {\n                let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n                let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n                beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n                  ticketOpenCount * ticketOpenProcessTime;\n              }\n              else {\n                beforePeriodNeedHandleResult[projectName][secondCategory][item] +=\n                  result[projectName][secondCategory][item];\n              }\n            }\n          }\n        }\n      });\n      // get average process time\n      for (let projectName in beforePeriodNeedHandleResult) {\n        for (let secondCategory in beforePeriodNeedHandleResult[projectName]) {\n          let ticketCloseProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n          let ticketCloseCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE];\n          beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n            ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n          let ticketOpenProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n          let ticketOpenCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN];\n          beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n            ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n        }\n      }\n      this.setState({\n        beforePeriodNeedHandleData: formatToTable(beforePeriodNeedHandleResult)\n      });\n\n      let periodTotal = {};\n      [lastYearBeforePeriodTotalResult, thisYearTotalResult].forEach(function (result) {\n        for (let projectName in result) {\n          if (periodTotal[projectName] == null) {\n            periodTotal[projectName] = initProject();\n          }\n          for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n            for (let item of DEFAULT_STATISTIC_ITEMS) {\n              if (item === TICKET_CLOSE_PROCESS_TIME) {\n                let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n                let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n                periodTotal[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n                  ticketCloseCount * ticketCloseProcessTime;\n              } else if (item === TICKET_OPEN_PROCESS_TIME) {\n                let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n                let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n                periodTotal[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n                  ticketOpenCount * ticketOpenProcessTime;\n              }\n              else {\n                periodTotal[projectName][secondCategory][item] +=\n                  result[projectName][secondCategory][item];\n              }\n            }\n          }\n        }\n      });\n      // get average process time\n      for (let projectName in periodTotal) {\n        for (let secondCategory in periodTotal[projectName]) {\n          let ticketCloseProcessTime = periodTotal[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n          let ticketCloseCount = periodTotal[projectName][secondCategory][TICKET_CLOSE];\n          periodTotal[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n            ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n          let ticketOpenProcessTime = periodTotal[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n          let ticketOpenCount = periodTotal[projectName][secondCategory][TICKET_OPEN];\n          periodTotal[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n            ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n        }\n      }\n      this.setState({\n        periodTotalData: formatToTable(periodTotal)\n      });\n\n      let periodPercentResult = {};\n      [thisYearBeforeStartDateResult].forEach(function(result) {\n        for (let projectName in result) {\n          if (periodPercentResult[projectName] == null) {\n            periodPercentResult[projectName] = initProject();\n          }\n        }\n      });\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  exportExcel = () => {\n    let header = [KEY_PROJECT_NAME, KEY_STATISTIC_ITEM, ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL];\n    if (this.state.newAddedData.length > 0 || this.state.thisYearBeforeStartData.length > 0 ||\n      this.state.thisYearBeforeStartTotalData.length > 0 || this.state.thisYearTotalData.length > 0 ||\n      this.state.lastYearBeforePeriodData.length > 0 ||\n      this.state.lastYearBeforePeriodTotalData.length > 0 ||\n      this.state.beforePeriodNeedHandleData.length > 0 ||\n      this.state.periodTotalData.length > 0) {\n      let sheet1 = XLSX.utils.json_to_sheet(this.state.newAddedData, {\n        header: header\n      });\n      let sheet2 = XLSX.utils.json_to_sheet(this.state.thisYearBeforeStartData, {\n        header: header\n      });\n      let sheet3 = XLSX.utils.json_to_sheet(this.state.thisYearBeforeStartTotalData, {\n        header: header\n      });\n      let sheet4 = XLSX.utils.json_to_sheet(this.state.thisYearTotalData, {\n        header: header\n      });\n      let sheet5 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodData, {\n        header: header\n      });\n      let sheet6 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodTotalData, {\n        header: header\n      });\n      let sheet7 = XLSX.utils.json_to_sheet(this.state.beforePeriodNeedHandleData, {\n        header: header\n      });\n      let sheet8 = XLSX.utils.json_to_sheet(this.state.periodTotalData, {\n        header: header\n      });\n      let workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, sheet1, STATISTIC_PERIOD_ADD);\n      XLSX.utils.book_append_sheet(workbook, sheet2, STATISTIC_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet3, STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet4, STATISTIC_THIS_YEAR_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet5, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet6, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet7, STATISTIC_BEFORE_PERIOD_NEED_HANDLE);\n      XLSX.utils.book_append_sheet(workbook, sheet8, STATISTIC_BEFORE_PERIOD_TOTAL);\n      XLSX.writeFile(workbook, 'statistic-' + Date.now() + '.xlsx')\n    } else {\n      message.error('请先点击“开始统计”按钮进行统计！');\n    }\n  }\n\n  changeProjects = (projects, options) => {\n    this.setState({\n      filteredProjects: projects\n    })\n  }\n\n  render() {\n    return (\n      <LocaleProvider locale={zh_CN}>\n        <div>\n          <h2 className=\"text--center heading\">统计辅助工具</h2>\n          <DataForm\n            onStart={this.start}\n            onExport={this.exportExcel}\n            loading={this.state.loading}\n          />\n          <div style={{ margin: '40px 0' }}>\n            <Row>\n              <Col span={10} offset={12}>\n                <Select\n                  mode=\"multiple\"\n                  style={{ width: '100%' }}\n                  placeholder='请选择要显示的项目名称'\n                  onChange={this.changeProjects}\n                >\n                  {\n                    this.state.projects.map((projectName) => (\n                      <Select.Option key={projectName}>{projectName}</Select.Option>\n                    ))\n                  }\n                </Select>\n              </Col>\n            </Row>\n            <Row>\n              <Col span={22} offset={1}>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_PERIOD_ADD}\n                    data={this.state.newAddedData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_BEFORE_PERIOD_REMAIN}\n                    data={this.state.thisYearBeforeStartData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\n                    data={this.state.thisYearBeforeStartTotalData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_THIS_YEAR_TOTAL}\n                    data={this.state.thisYearTotalData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\n                    data={this.state.lastYearBeforePeriodData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\n                    data={this.state.lastYearBeforePeriodTotalData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\n                    data={this.state.beforePeriodNeedHandleData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n                <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_BEFORE_PERIOD_TOTAL}\n                    data={this.state.periodTotalData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div>\n                {/* <div style={{ margin: '20px 0' }}>\n                  <ResultTable\n                    title={STATISTIC_PERIOD_PERCENT}\n                    data={this.state.closePercentData}\n                    filteredProjects={this.state.filteredProjects}\n                  />\n                </div> */}\n              </Col>\n            </Row>\n          </div>\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}