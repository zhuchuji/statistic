{"version":3,"sources":["components/DataForm.js","constants.js","components/CommonCharts.js","components/ChartView.js","components/ProjectTable.js","utils.js","components/ProjectView.js","functions/utils.js","App.js","store/actions/index.js","store/action-types.js","store/reducers/index.js","store/reducers/category.js","store/reducers/ticket-state.js","store/index.js","index.js"],"names":["DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startTime","Date","set","hour","minute","second","endTime","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","es_col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","toConsumableArray","concat","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","React","Component","defaultPorps","onExport","WrapDataForm","create","KEY_REPORT_TIME","KEY_PROJECT_NAME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","RATE_STATISTIC_ITEMS","COL_AREA","COL_CITY_COMPANY","COL_PROJECT","COL_PROJECT_STAGE","COL_CURRENT_STATUS","COL_REPORT_TIME","COL_DUTY_WORKER","TICKET_STATUS","CATEGORIES","STATISTIC_ITEMS","titleConfig","left","top","textStyle","color","toolboxConfig","feature","saveAsImage","show","right","legendConfig","styles","margin","height","tooltipConifg","trigger","axisPointer","crossStyle","CommonCharts","core_default","style","echarts","option","title","objectSpread","text","title1","tooltip","toolbox","xAxis","data","interval","axisLabel","rotate","yAxis","name","min","max","series","barMaxWidth","position","formatter","graphData","totalAcceptData","yAxisIndex","overallCloseRateData","title2","newAddedAcceptData","newAddedCloseRateData","title5","radius","openData","title3","legend","needHandleAcceptData","needHandleCloseOnTimeRateData","needHandleCloseRateData","title4","closeAverageHandleTimeData","openAverageHandleTimeData","ChartView","cityCategoryCloseAverageHandleTimeSeries","newAddedCities","cityName","cityGraphData","cityCategoryCloseAverageHandleTimeData","citySecondCategoryOpenAverageHandleTimeSeries","openAverageHandleTimeCities","citySecondCategoryOpenAverageHandleTimeData","components_CommonCharts","areaGraphData","allAreas","categoryGraphData","allCategories","allCities","projectGraphData","allProjects","stageGraphData","allStages","ProjectTable","projectColumn","table","Column","dataIndex","key","width","otherColumns","map","item","currentPageData","dataSource","filteredProjects","length","filter","pagination","pageSize","scroll","y","size","defaultProps","formatToTable","tableData","rowKey","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","statisticItem","rowData","_arr","_i","category","push","return","formatToRateTable","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_arr2","_i2","ProjectView","filterProjects","projects","exportData","header","sheet1","XLSX","utils","json_to_sheet","periodNewAddedResult","sheet2","thisYearBeforePeriodResult","sheet3","thisYearBeforePeriodTotalResult","sheet4","thisYearTotalResult","sheet5","lastYearBeforePeriodResult","sheet6","lastYearBeforePeriodTotalResult","sheet7","beforePeriodNeedHandleResult","sheet8","periodTotalResult","sheet9","rateResult","workbook","book_new","book_append_sheet","writeFile","moment","now","format","es_select","mode","onChange","project","Option","components_ProjectTable","initStatisticItem","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","itemName","initRate","getCategory","ticket","statisticCloseHandleTime","ticketStatistic","ticketCloseTime","ticketReportTime","ticketPauseDuration","closeHandleTime","duration","diff","subtract","as","statisticOpenHandleTime","closeEndTime","openHandleTime","statisticRate","statisticMap","rateMap","toFixed","statistc","periodTickets","beforePeriodTickets","thisYearTotalTickets","lastYearBeforePeriodTickets","col","allItems","yearStartTime","month","date","tickets","closeStartTime","dataMap","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","ticketCategory","ticketStatus","Number","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","ticketCloseCount","ticketCloseProcessTime","ticketOpenProcessTime","ticketOpenCount","statisticPeriodNewAddedTickets","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","statisticThisYearBeforePeriodTickets","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","statisticThisYearBeforePeriodTotalTickets","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","statisticLastYearBeforePeriodTickets","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","statisticLastYearBeforePeriodTotalTickets","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","_iteratorNormalCompletion26","_didIteratorError26","_iteratorError26","_step26","_iterator26","_iteratorNormalCompletion27","_didIteratorError27","_iteratorError27","_step27","_iterator27","statisticThisYearTotalTickets","array","_iteratorNormalCompletion28","_didIteratorError28","_iteratorError28","_step28","_iterator28","_iteratorNormalCompletion29","_didIteratorError29","_iteratorError29","_step29","_iterator29","result","_iteratorNormalCompletion30","_didIteratorError30","_iteratorError30","_step30","_iterator30","statisticBeforePeriodNeedHandleResult","_iteratorNormalCompletion31","_didIteratorError31","_iteratorError31","_step31","_iterator31","_iteratorNormalCompletion32","_didIteratorError32","_iteratorError32","_step32","_iterator32","_iteratorNormalCompletion33","_didIteratorError33","_iteratorError33","_step33","_iterator33","statisticPeriodTotalResult","_iteratorNormalCompletion34","_didIteratorError34","_iteratorError34","_step34","_iterator34","formatGraphData","_iteratorNormalCompletion35","_didIteratorError35","_iteratorError35","_step35","_iterator35","formatCategoryGraphData","area","_iteratorNormalCompletion36","_didIteratorError36","_iteratorError36","_step36","_iterator36","allCategory","allTicketState","App","start","_this$props","addCategories","addTicketStates","fileReader","FileReader","readFile","onload","event","read","target","sheet","Sheets","SheetNames","sheet_to_json","blankrows","readAsBinaryString","readExcelData","allWorkers","Util","stage","city","worker","reportTime","workerData","stageData","projectData","cityData","areaData","tabChart","components_ChartView","tabArea","components_ProjectView","tabCity","tabProject","tabStage","tabWorker","locale_provider","locale","zh_CN","className","components_DataForm","exportExcel","tabs","TabPane","tab","mapDispatchToProps","categories","payload","ticketStates","ConnectedApp","connect","reducer","combineReducers","arguments","action","ticketState","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.bd307c96.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {},\n    onExport: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func,\n    onExport: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startTime = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endTime = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startTime, endTime);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              {\n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在统计...': '开始统计'\n              }\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '未关时长（天）';\r\nexport const TICKET_NOT_RESPONSED = '未响应';\r\nexport const TICKET_CLOSE_HANDLE_TIME_0_7 = '已关处理时长（0-7天）';\r\nexport const TICKET_CLOSE_HANDLE_TIME_7_15 = '已关处理时长（7-15天）';\r\nexport const TICKET_CLOSE_HANDLE_TIME_15_30 = '已关处理时长（15-30天）';\r\nexport const TICKET_CLOSE_HANDLE_TIME_30_60 = '已关处理时长（30-60天）';\r\nexport const TICKET_CLOSE_HANDLE_TIME_OVER_60 = '已关处理时长（大于60天）';\r\nexport const TICKET_OPEN_HANDLE_TIME_0_7 = '未关处理时长（0-7天）';\r\nexport const TICKET_OPEN_HANDLE_TIME_7_15 = '未关处理时长（7-15天）';\r\nexport const TICKET_OPEN_HANDLE_TIME_15_30 = '未关处理时长（15-30天）';\r\nexport const TICKET_OPEN_HANDLE_TIME_30_60 = '未关处理时长（30-60天）';\r\nexport const TICKET_OPEN_HANDLE_TIME_OVER_60 = '未关处理时长（大于60天）';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\nexport const KEY_CITY_NAME = '城市';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const NEW_ADD_CLOSE_RATE = '新增关闭率';\r\nexport const REMAIN_CLOSE_RATE = '遗留关闭率';\r\nexport const OVERALL_CLOSE_RATE = '总体关闭率';\r\nexport const RESPONSE_IN_30_MIN_RATE = '响应及时率（0.5h）'\r\nexport const RESPONSE_IN_30_HOUR_RATE = '响应及时率（30h）';\r\nexport const CLOSE_ON_TIME_RATE = '及时关闭率';\r\nexport const TOTAL_OVERALL_CLOSE_RATE = '累计总体关闭率';\r\n\r\nexport const RATE_STATISTIC_ITEMS = [\r\n  REMAIN_CLOSE_RATE,\r\n  NEW_ADD_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_RATE = '本年度统计周期内';\r\n\r\nexport const STAGES = [\r\n  '一期',\r\n  '二期',\r\n  '三期',\r\n  '四期',\r\n  '五期',\r\n  '六期',\r\n  '七期',\r\n  '八期',\r\n  '九期',\r\n  '十期'\r\n];\r\n\r\n\r\n// new data key\r\nexport const COL_AREA = '大区';\r\nexport const COL_CITY_COMPANY = '城市公司';\r\nexport const COL_PROJECT = '项目';\r\nexport const COL_PROJECT_STAGE = '项目分期';\r\nexport const COL_CURRENT_STATUS = '当前工单状态';\r\nexport const COL_FIRST_CLASS = '一级报事分类';\r\nexport const COL_REPORT_TIME = '报事时间';\r\nexport const COL_RESPONSE_TIME = '响应时间';\r\nexport const COL_FINISH_TIME = '实际完成时间';\r\nexport const COL_TOTAL_HANDLE_TIME = '工单总处理时长(天）';\r\nexport const COL_EXPIRE = '总时长超时预警';\r\nexport const COL_CLOSE_TIME_1 = '业主关闭时间';\r\nexport const COL_CLOSE_TIME_2 = '非正常关闭时间';\r\nexport const COL_CLOSE_TIME_3 = '强制关闭时间';\r\nexport const COL_PAUSE = '累计暂停时长';\r\nexport const COL_OVERTIME_WARN = '总时长超时预警';\r\nexport const COL_DUTY_WORKER = '责任维保工程师';\r\n\r\nexport const CATEGORY_UNCLASSIFY = '未分类';\r\n\r\nexport const TICKET_STATUS = {\r\n  RESPONSED: '已响应',\r\n  SOLUTION_PREPARE: '方案制定中',\r\n  SOLUTION_APPROVE: '方案已批准',\r\n  INVALID: '无效',\r\n  CLOSED: '已关闭',\r\n  FORCE_CLOSE: '强制关闭',\r\n  CLOSE_ABNORMAL: '非正常关闭',\r\n  DISPATCHED: '已分派',\r\n  WORK_DOING: '施工中',\r\n  WORK_FINISHED: '施工完成',\r\n  DROP_IN: '已上门',\r\n  COMMENTED: '已评价',\r\n  NEW: '新建'\r\n};\r\n\r\nexport const CATEGORIES = [\r\n  '土建',\r\n  '维修-其他类',\r\n  '机电',\r\n  '室内精装',\r\n  '室内门窗及入户门',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '渗漏',\r\n  '室内电器',\r\n  '公区部分',\r\n  CATEGORY_UNCLASSIFY\r\n];\r\n\r\n// statistic items\r\nexport const STATISTIC_ITEMS = [\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_NOT_RESPONSED,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME,\r\n  TICKET_CLOSE_HANDLE_TIME_0_7,\r\n  TICKET_CLOSE_HANDLE_TIME_7_15,\r\n  TICKET_CLOSE_HANDLE_TIME_15_30,\r\n  TICKET_CLOSE_HANDLE_TIME_30_60,\r\n  TICKET_CLOSE_HANDLE_TIME_OVER_60,\r\n  TICKET_OPEN_HANDLE_TIME_0_7,\r\n  TICKET_OPEN_HANDLE_TIME_7_15,\r\n  TICKET_OPEN_HANDLE_TIME_15_30,\r\n  TICKET_OPEN_HANDLE_TIME_30_60,\r\n  TICKET_OPEN_HANDLE_TIME_OVER_60\r\n]\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\n// import the core library.\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\n\r\n// then import echarts modules those you have used manually.\r\nimport echarts from 'echarts/lib/echarts';\r\nimport 'echarts/lib/chart/line';\r\nimport 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/chart/pie';\r\n// import 'echarts/lib/chart/scatter';\r\n// import 'echarts/lib/chart/radar';\r\n\r\n// import 'echarts/lib/chart/map';\r\n// import 'echarts/lib/chart/treemap';\r\n// import 'echarts/lib/chart/graph';\r\n// import 'echarts/lib/chart/gauge';\r\n// import 'echarts/lib/chart/funnel';\r\n// import 'echarts/lib/chart/parallel';\r\n// import 'echarts/lib/chart/sankey';\r\n// import 'echarts/lib/chart/boxplot';\r\n// import 'echarts/lib/chart/candlestick';\r\n// import 'echarts/lib/chart/effectScatter';\r\n// import 'echarts/lib/chart/lines';\r\n// import 'echarts/lib/chart/heatmap';\r\n\r\n// import 'echarts/lib/component/graphic';\r\n// import 'echarts/lib/component/grid';\r\nimport 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/tooltip';\r\n// import 'echarts/lib/component/polar';\r\n// import 'echarts/lib/component/geo';\r\n// import 'echarts/lib/component/parallel';\r\n// import 'echarts/lib/component/singleAxis';\r\n// import 'echarts/lib/component/brush';\r\n\r\nimport 'echarts/lib/component/title';\r\n\r\n// import 'echarts/lib/component/dataZoom';\r\n// import 'echarts/lib/component/visualMap';\r\n\r\n// import 'echarts/lib/component/markPoint';\r\n// import 'echarts/lib/component/markLine';\r\n// import 'echarts/lib/component/markArea';\r\n\r\n// import 'echarts/lib/component/timeline';\r\nimport 'echarts/lib/component/toolbox';\r\n// import { Rect } from 'echarts/lib/util/graphic';\r\n\r\n// import 'zrender/lib/vml/vml';\r\n\r\nconst titleConfig = {\r\n  left: 'center',\r\n  top: 0,\r\n  textStyle: {\r\n    color: '#000000'\r\n  }\r\n};\r\nconst toolboxConfig = {\r\n  feature: {\r\n    saveAsImage: { show: true }\r\n  },\r\n  right: 40\r\n};\r\nconst legendConfig = {\r\n  left: 40\r\n};\r\nconst styles = {\r\n  margin: '40px 0',\r\n  height: '500px'\r\n};\r\nconst tooltipConifg = {\r\n  trigger: 'axis',\r\n  axisPointer: {\r\n    type: 'cross',\r\n    crossStyle: {\r\n      color: '#999'\r\n    }\r\n  }\r\n};\r\n\r\n\r\nfunction CommonCharts(props) {\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title1,\r\n              ...titleConfig\r\n            },\r\n            tooltip: tooltipConifg,\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.xAxis,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.totalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.overallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title2,\r\n              ...titleConfig\r\n            },\r\n            tooltip: tooltipConifg,\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.xAxis,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.newAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.newAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title5,\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '剩余未关',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.graphData.openData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title3,\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            legend: {\r\n              data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n              ...legendConfig\r\n            },\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.xAxis,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '需处理受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '比率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '需处理受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.needHandleAcceptData\r\n              },\r\n              {\r\n                name: '及时关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.needHandleCloseOnTimeRateData\r\n              },\r\n              {\r\n                name: '总体关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.needHandleCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row style={{ margin: '40px 0' }}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title4,\r\n              ...titleConfig\r\n            },\r\n            tooltip: tooltipConifg,\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.xAxis,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            legend: {\r\n              data: ['已关闭', '剩余未关'],\r\n              ...legendConfig\r\n            },\r\n            series: [\r\n              {\r\n                name: '已关闭',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.closeAverageHandleTimeData\r\n              },\r\n              {\r\n                name: '剩余未关',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.openAverageHandleTimeData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommonCharts;\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\n// import the core library.\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\n\r\n// then import echarts modules those you have used manually.\r\nimport echarts from 'echarts/lib/echarts';\r\nimport 'echarts/lib/chart/line';\r\nimport 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/chart/pie';\r\n// import 'echarts/lib/chart/scatter';\r\n// import 'echarts/lib/chart/radar';\r\n\r\n// import 'echarts/lib/chart/map';\r\n// import 'echarts/lib/chart/treemap';\r\n// import 'echarts/lib/chart/graph';\r\n// import 'echarts/lib/chart/gauge';\r\n// import 'echarts/lib/chart/funnel';\r\n// import 'echarts/lib/chart/parallel';\r\n// import 'echarts/lib/chart/sankey';\r\n// import 'echarts/lib/chart/boxplot';\r\n// import 'echarts/lib/chart/candlestick';\r\n// import 'echarts/lib/chart/effectScatter';\r\n// import 'echarts/lib/chart/lines';\r\n// import 'echarts/lib/chart/heatmap';\r\n\r\n// import 'echarts/lib/component/graphic';\r\n// import 'echarts/lib/component/grid';\r\nimport 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/tooltip';\r\n// import 'echarts/lib/component/polar';\r\n// import 'echarts/lib/component/geo';\r\n// import 'echarts/lib/component/parallel';\r\n// import 'echarts/lib/component/singleAxis';\r\n// import 'echarts/lib/component/brush';\r\n\r\nimport 'echarts/lib/component/title';\r\n\r\n// import 'echarts/lib/component/dataZoom';\r\n// import 'echarts/lib/component/visualMap';\r\n\r\n// import 'echarts/lib/component/markPoint';\r\n// import 'echarts/lib/component/markLine';\r\n// import 'echarts/lib/component/markArea';\r\n\r\n// import 'echarts/lib/component/timeline';\r\nimport 'echarts/lib/component/toolbox';\r\n// import { Rect } from 'echarts/lib/util/graphic';\r\n\r\n// import 'zrender/lib/vml/vml';\r\n\r\nimport  { CATEGORIES } from '../constants';\r\n\r\nimport Charts from './CommonCharts';\r\n\r\nconst titleConfig = {\r\n  left: 'center',\r\n  top: 0,\r\n  textStyle: {\r\n    color: '#000000'\r\n  }\r\n};\r\nconst toolboxConfig = {\r\n  feature: {\r\n    saveAsImage: { show: true }\r\n  },\r\n  right: 40\r\n};\r\nconst legendConfig = {\r\n  left: 40\r\n};\r\nconst styles = {\r\n  margin: '40px 0',\r\n  height: '500px'\r\n};\r\nconst tooltipConifg = {\r\n  trigger: 'axis',\r\n  axisPointer: {\r\n    type: 'cross',\r\n    crossStyle: {\r\n      color: '#999'\r\n    }\r\n  }\r\n};\r\n\r\nfunction ChartView(props) {\r\n\r\n  let cityCategoryCloseAverageHandleTimeSeries = [];\r\n  let newAddedCities = [];\r\n  for (let cityName in props.cityGraphData.cityCategoryCloseAverageHandleTimeData) {\r\n    newAddedCities = [\r\n      ...newAddedCities, cityName\r\n    ];\r\n    cityCategoryCloseAverageHandleTimeSeries = [\r\n      ...cityCategoryCloseAverageHandleTimeSeries,\r\n      {\r\n        name: cityName,\r\n        type: 'bar',\r\n        barMaxWidth: 20,\r\n        label: {\r\n          position: 'top',\r\n          color: '#333',\r\n          show: true,\r\n          formatter: '{c}'\r\n        },\r\n        data: props.cityGraphData.cityCategoryCloseAverageHandleTimeData[cityName]\r\n      }\r\n    ];\r\n  }\r\n\r\n  let citySecondCategoryOpenAverageHandleTimeSeries = [];\r\n  let openAverageHandleTimeCities = [];\r\n  for (let cityName in props.citySecondCategoryOpenAverageHandleTimeData) {\r\n    openAverageHandleTimeCities = [\r\n      ...openAverageHandleTimeCities, cityName\r\n    ];\r\n    citySecondCategoryOpenAverageHandleTimeSeries = [\r\n      ...citySecondCategoryOpenAverageHandleTimeSeries,\r\n      {\r\n        name: cityName,\r\n        type: 'bar',\r\n        barMaxWidth: 20,\r\n        label: {\r\n          position: 'top',\r\n          color: '#333',\r\n          show: true,\r\n          formatter: '{c}'\r\n        },\r\n        data: props.citySecondCategoryOpenAverageHandleTimeData[cityName]\r\n      }\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Charts graphData={props.areaGraphData} xAxis={props.allAreas}\r\n        title= {{\r\n          title1: \"大区日常维修总体关闭率\",\r\n          title2: \"大区新增维修关闭率\",\r\n          title3: \"大区需处理关闭率\",\r\n          title4: \"大区新增平均处理时长\",\r\n          title5: \"大区剩余未关分布图\",\r\n        }}\r\n        />\r\n      <Charts graphData={props.categoryGraphData} xAxis={props.allCategories}\r\n        title= {{\r\n          title1: \"分类日常维修总体关闭率\",\r\n          title2: \"分类新增维修关闭率\",\r\n          title3: \"分类需处理关闭率\",\r\n          title4: \"分类新增平均处理时长\",\r\n          title5: \"分类剩余未关分布图\",\r\n        }}\r\n      />\r\n      <Charts graphData={props.cityGraphData} xAxis={props.allCities}\r\n        title={{\r\n          title1: \"各城市日常维修总体关闭率\",\r\n          title2: \"各城市新增维修关闭率\",\r\n          title3: \"各城市需处理关闭率\",\r\n          title4: \"各城市新增平均处理时长\",\r\n          title5: \"各城市剩余未关分布图\",\r\n        }}\r\n      />\r\n      <Charts graphData={props.projectGraphData} xAxis={props.allProjects}\r\n        title={{\r\n          title1: \"各项目日常维修总体关闭率\",\r\n          title2: \"各项目新增维修关闭率\",\r\n          title3: \"各项目需处理关闭率\",\r\n          title4: \"各项目新增平均处理时长\",\r\n          title5: \"各项目剩余未关分布图\",\r\n        }}\r\n      />\r\n      <Charts graphData={props.stageGraphData} xAxis={props.allStages}\r\n        title= {{\r\n          title1: \"各项目分期日常维修总体关闭率\",\r\n          title2: \"各项目分期新增维修关闭率\",\r\n          title3: \"各项目分期需处理关闭率\",\r\n          title4: \"各项目分期新增平均处理时长\",\r\n          title5: \"各项目分期剩余未关分布图\",\r\n        }}\r\n        />\r\n      {/* <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关分类图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '一级分类',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.categoryOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row> */}\r\n    </div>\r\n  );\r\n\r\n  // return (\r\n  //   <div>\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各城市日常维修总体关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.allCities,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '累计受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '累计受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#333',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityGraphData.totalAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityGraphData.overallCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各项目日常维修总体关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.allProjects,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '累计受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '累计受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectGraphData.totalAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectGraphData.overallCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各项目分期日常维修总体关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.allStages,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 height: 300,\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '累计受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '累计受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.stageGraphData.totalAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.stageGraphData.overallCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '剩余未关城市分布图',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'item',\r\n  //             formatter: '{b}:{c}({d}%)'\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           series: [\r\n  //             {\r\n  //               name: '城市剩余未关',\r\n  //               type: 'pie',\r\n  //               radius: '60%',\r\n  //               label: {\r\n  //                 formatter: '{b}:{c}({d}%)',\r\n  //                 color: '#000'\r\n  //               },\r\n  //               data: props.cityOpenData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '剩余未关二级分类分布图',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'item',\r\n  //             formatter: '{b}:{c}({d}%)'\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           series: [\r\n  //             {\r\n  //               name: '二级分类',\r\n  //               type: 'pie',\r\n  //               radius: '60%',\r\n  //               label: {\r\n  //                 formatter: '{b}:{c}({d}%)',\r\n  //                 color: '#000'\r\n  //               },\r\n  //               data: props.secondCategoryOpenData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各城市新增维修关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.cities,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '新增受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '新增受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNewAddedAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNewAddedCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '项目新增关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.newAddedProjects,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '新增受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '新增受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNewAddedAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNewAddedCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '分期新增关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.newAddedStages,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '新增受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '新增受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.stageNewAddedAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.stageNewAddedCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '新增维修城市分布图',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'item',\r\n  //             formatter: '{b}:{c}({d}%)'\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           series: [\r\n  //             {\r\n  //               name: '城市',\r\n  //               type: 'pie',\r\n  //               radius: '60%',\r\n  //               label: {\r\n  //                 formatter: '{b}:{c}({d}%)',\r\n  //                 color: '#000'\r\n  //               },\r\n  //               data: props.cityNewAddedAcceptData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '新增维修二级分类分布图',\r\n  //             left: 'center',\r\n  //             textStyle: {\r\n  //               color: '#000000'\r\n  //             }\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'item',\r\n  //             formatter: '{b}:{c}({d}%)'\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           series: [\r\n  //             {\r\n  //               name: '城市',\r\n  //               type: 'pie',\r\n  //               radius: '60%',\r\n  //               label: {\r\n  //                 formatter: '{b}:{c}({d}%)',\r\n  //                 color: '#000'\r\n  //               },\r\n  //               data: props.secondCategoryNewAddedAcceptData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各城市需处理关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           legend: {\r\n  //             data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n  //             ...legendConfig\r\n  //           },\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.cities,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '需处理受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '比率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '需处理受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNeedHandleAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '及时关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNeedHandleCloseOnTimeRateData\r\n  //             },\r\n  //             {\r\n  //               name: '总体关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNeedHandleCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各项目需处理关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           legend: {\r\n  //             data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n  //             ...legendConfig\r\n  //           },\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.needHandleProjects,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '需处理受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '比率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '需处理受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNeedHandleAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '及时关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNeedHandleCloseOnTimeRateData\r\n  //             },\r\n  //             {\r\n  //               name: '总体关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNeedHandleCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '平均处理时长城市分布图',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.cities,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '处理时长（天）'\r\n  //             },\r\n  //           ],\r\n  //           legend: {\r\n  //             data: ['已关闭', '剩余未关'],\r\n  //             ...legendConfig\r\n  //           },\r\n  //           series: [\r\n  //             {\r\n  //               name: '已关闭',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#333',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityCloseAverageHandleTimeData\r\n  //             },\r\n  //             {\r\n  //               name: '剩余未关',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#333',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityOpenAverageHandleTimeData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '已关闭维修分类平均处理时长',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: DEFAULT_SECOND_CATEGORIES,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '处理时长（天）'\r\n  //             },\r\n  //           ],\r\n  //           legend: {\r\n  //             data: newAddedCities,\r\n  //             ...legendConfig\r\n  //           },\r\n  //           series: cityCategoryCloseAverageHandleTimeSeries\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '剩余未关维修分类平均处理时长',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: DEFAULT_SECOND_CATEGORIES,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '处理时长（天）'\r\n  //             },\r\n  //           ],\r\n  //           legend: {\r\n  //             data: openAverageHandleTimeCities,\r\n  //             ...legendConfig\r\n  //           },\r\n  //           series: citySecondCategoryOpenAverageHandleTimeSeries\r\n  //         }}\r\n  //       />\r\n  //     </Row> */}\r\n  //   </div>\r\n  // );\r\n}\r\n\r\nexport default ChartView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ProjectTable(props) {\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title=\"名称\"\r\n      key={KEY_PROJECT_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredProjects.length > 0 ?\r\n        props.data.filter(item => props.filteredProjects.indexOf(item[KEY_PROJECT_NAME]) !== -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nProjectTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ProjectTable;\r\n","import {\r\n  KEY_TICKET_TOTAL,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  STAGES,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  STATISTIC_ITEMS,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  CATEGORIES,\r\n  RATE_STATISTIC_ITEMS\r\n} from './constants';\r\n\r\nimport XLSX from 'xlsx';\r\n\r\nexport function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|（.*?）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}\r\n\r\nexport function filterProject(projectName, reg) {\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function filterProjectStage(projectName) {\r\n  let filteredName = null;\r\n  for (let stage of STAGES) {\r\n    if (projectName.indexOf(stage) != -1) {\r\n      filteredName = projectName.substring(0, projectName.indexOf(stage));\r\n      return filteredName;\r\n    }\r\n  }\r\n  return projectName;\r\n}\r\n\r\nexport function formatToTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToRateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of RATE_STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of STATISTIC_ITEMS) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[category] = data[category][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function readExcelData (fileList) {\r\n  return new Promise((resolve, reject) => {\r\n    let fileReader = new FileReader();\r\n    let data = [];\r\n\r\n    let readFile = (index) => {\r\n      if (index < fileList.length) {\r\n        fileReader.onload = (event) => {\r\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\r\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\r\n          data = [...data, ...XLSX.utils.sheet_to_json(sheet, { blankrows: false })];\r\n          readFile(index + 1);\r\n        }\r\n        fileReader.readAsBinaryString(fileList[index]);\r\n      } else {\r\n        resolve(data);\r\n      }\r\n    };\r\n    readFile(0);\r\n  });\r\n}\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select, Button } from 'antd';\r\nimport ProjectTable from './ProjectTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE,\r\n  CATEGORIES,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\nimport {\r\n  formatToTable,\r\n  formatToRateTable\r\n} from '../utils';\r\nimport XLSX from 'xlsx';\r\nimport moment from 'moment';\r\n\r\nclass ProjectView extends React.Component {\r\n  static defaultProps = {\r\n    data: {},\r\n    projects: [],\r\n    name: 'statistic'\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredProjects: [],\r\n      loading: false\r\n    }\r\n    this.exportData = this.exportData.bind(this);\r\n  }\r\n\r\n  filterProjects = (projects) => {\r\n    if (projects.length > 0) {\r\n      this.setState({\r\n        filteredProjects: projects\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredProjects: []\r\n      });\r\n    }\r\n  }\r\n\r\n  exportData() {\r\n    this.setState({\r\n      loading: true\r\n    });\r\n    let header = [KEY_PROJECT_NAME, KEY_STATISTIC_ITEM, ...CATEGORIES, KEY_TICKET_TOTAL];\r\n    let sheet1 = XLSX.utils.json_to_sheet(formatToTable(this.props.data.periodNewAddedResult), {\r\n      header: header\r\n    });\r\n    let sheet2 = XLSX.utils.json_to_sheet(formatToTable(this.props.data.thisYearBeforePeriodResult), {\r\n      header: header\r\n    });\r\n    let sheet3 = XLSX.utils.json_to_sheet(formatToTable(this.props.data.thisYearBeforePeriodTotalResult), {\r\n      header: header\r\n    });\r\n    let sheet4 = XLSX.utils.json_to_sheet(formatToTable(this.props.data.thisYearTotalResult), {\r\n      header: header\r\n    });\r\n    let sheet5 = XLSX.utils.json_to_sheet(formatToTable(this.props.data.lastYearBeforePeriodResult), {\r\n      header: header\r\n    });\r\n    let sheet6 = XLSX.utils.json_to_sheet(formatToTable(this.props.data.lastYearBeforePeriodTotalResult), {\r\n      header: header\r\n    });\r\n    let sheet7 = XLSX.utils.json_to_sheet(formatToTable(this.props.data.beforePeriodNeedHandleResult), {\r\n      header: header\r\n    });\r\n    let sheet8 = XLSX.utils.json_to_sheet(formatToTable(this.props.data.periodTotalResult), {\r\n      header: header\r\n    });\r\n    let sheet9 = XLSX.utils.json_to_sheet(formatToRateTable(this.props.data.rateResult), {\r\n      header: header\r\n    });\r\n    let workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, sheet1, STATISTIC_PERIOD_ADD);\r\n    XLSX.utils.book_append_sheet(workbook, sheet2, STATISTIC_BEFORE_PERIOD_REMAIN);\r\n    XLSX.utils.book_append_sheet(workbook, sheet3, STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL);\r\n    XLSX.utils.book_append_sheet(workbook, sheet4, STATISTIC_THIS_YEAR_TOTAL);\r\n    XLSX.utils.book_append_sheet(workbook, sheet5, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN);\r\n    XLSX.utils.book_append_sheet(workbook, sheet6, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL);\r\n    XLSX.utils.book_append_sheet(workbook, sheet7, STATISTIC_BEFORE_PERIOD_NEED_HANDLE);\r\n    XLSX.utils.book_append_sheet(workbook, sheet8, STATISTIC_BEFORE_PERIOD_TOTAL);\r\n    XLSX.utils.book_append_sheet(workbook, sheet9, STATISTIC_PERIOD_RATE)\r\n    XLSX.writeFile(workbook, this.props.name + '-' + moment(Date.now()).format('YYYY-MM-DD-HH-MM-SS') + '.xlsx')\r\n    this.setState({\r\n      loading: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的项目'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterProjects}\r\n                >\r\n                  {\r\n                    this.props.projects.map((project) => (\r\n                      <Select.Option key={project}>{project}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={8}>\r\n              <Button loading={this.state.loading} onClick={this.exportData}>导出数据</Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={formatToTable(this.props.data.periodNewAddedResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.thisYearBeforePeriodResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearBeforePeriodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={formatToTable(this.props.data.beforePeriodNeedHandleResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={formatToTable(this.props.data.periodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={formatToRateTable(this.props.data.rateResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectView;\r\n","import {\r\n  COL_REPORT_TIME,\r\n  COL_OVERTIME_WARN,\r\n  COL_PROJECT_STAGE,\r\n  COL_FIRST_CLASS,\r\n  COL_CURRENT_STATUS,\r\n  COL_PAUSE,\r\n  COL_CLOSE_TIME_1,\r\n  COL_CLOSE_TIME_2,\r\n  COL_CLOSE_TIME_3,\r\n  TICKET_NOT_RESPONSED,\r\n  KEY_TICKET_TOTAL,\r\n  TICKET_STATUS,\r\n  CATEGORIES,\r\n  STATISTIC_ITEMS,\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME,\r\n  TICKET_CLOSE_HANDLE_TIME_0_7,\r\n  TICKET_CLOSE_HANDLE_TIME_7_15,\r\n  TICKET_CLOSE_HANDLE_TIME_15_30,\r\n  TICKET_CLOSE_HANDLE_TIME_30_60,\r\n  TICKET_CLOSE_HANDLE_TIME_OVER_60,\r\n  TICKET_OPEN_HANDLE_TIME_0_7,\r\n  TICKET_OPEN_HANDLE_TIME_7_15,\r\n  TICKET_OPEN_HANDLE_TIME_15_30,\r\n  TICKET_OPEN_HANDLE_TIME_30_60,\r\n  TICKET_OPEN_HANDLE_TIME_OVER_60,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  CATEGORY_UNCLASSIFY,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  RATE_STATISTIC_ITEMS,\r\n  COL_DUTY_WORKER\r\n} from '../constants';\r\n\r\nimport moment from 'moment';\r\n\r\nexport const initStatisticItem = () => {\r\n  let map = {};\r\n  for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n    map[category] = {};\r\n    for (let itemName of STATISTIC_ITEMS) {\r\n      map[category][itemName] = 0;\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\nexport const initRate = () => {\r\n  let map = {};\r\n  for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n    map[category] = {};\r\n    for (let itemName of RATE_STATISTIC_ITEMS) {\r\n      map[category][itemName] = 0;\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\nexport const getCategory = ticket => ticket[COL_FIRST_CLASS] || CATEGORY_UNCLASSIFY;\r\n\r\nexport const formatStageToTable = (data) => {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nconst STAGE = /\\d*期/;\r\n\r\nexport function filterProjectName(name) {\r\n  let filteredName = name;\r\n  if (name.match(STAGE)) {\r\n    filteredName = name.substring(0, name.match(STAGE).index);\r\n  }\r\n  return filteredName;\r\n}\r\n\r\nconst statisticCloseHandleTime = (ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration) => {\r\n  let closeHandleTime = moment.duration(ticketCloseTime.diff(ticketReportTime))\r\n    .subtract(ticketPauseDuration, 'hours').as('days');\r\n  ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n    closeHandleTime;\r\n\r\n  if (closeHandleTime < 7) {\r\n    ticketStatistic[TICKET_CLOSE_HANDLE_TIME_0_7]++;\r\n  } else if (closeHandleTime < 15) {\r\n    ticketStatistic[TICKET_CLOSE_HANDLE_TIME_7_15]++;\r\n  } else if (closeHandleTime < 30) {\r\n    ticketStatistic[TICKET_CLOSE_HANDLE_TIME_15_30]++;\r\n  } else if (closeHandleTime < 60) {\r\n    ticketStatistic[TICKET_CLOSE_HANDLE_TIME_30_60]++;\r\n  } else {\r\n    ticketStatistic[TICKET_CLOSE_HANDLE_TIME_OVER_60]++;\r\n  }\r\n}\r\n\r\nconst statisticOpenHandleTime = (ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration) => {\r\n  let openHandleTime = moment.duration(moment(closeEndTime).diff(ticketReportTime))\r\n    .subtract(ticketPauseDuration, 'hours').as('days');\r\n  ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n    openHandleTime;\r\n\r\n  if (openHandleTime < 7) {\r\n    ticketStatistic[TICKET_OPEN_HANDLE_TIME_0_7]++;\r\n  } else if (openHandleTime < 15) {\r\n    ticketStatistic[TICKET_OPEN_HANDLE_TIME_7_15]++;\r\n  } else if (openHandleTime < 30) {\r\n    ticketStatistic[TICKET_OPEN_HANDLE_TIME_15_30]++;\r\n  } else if (openHandleTime < 60) {\r\n    ticketStatistic[TICKET_OPEN_HANDLE_TIME_30_60]++;\r\n  } else {\r\n    ticketStatistic[TICKET_OPEN_HANDLE_TIME_OVER_60]++;\r\n  }\r\n}\r\n\r\n// 统计周期内新增\r\nexport const statisticPeriodNewAddedTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 关闭 + 剩余未关\r\n    if (ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.COMMENTED ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      statisticCloseHandleTime(ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) || ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计时间-受理时间-累计暂停时长\r\n      statisticOpenHandleTime(ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期前遗留\r\nexport const statisticThisYearBeforePeriodTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      statisticCloseHandleTime(ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) || ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      statisticOpenHandleTime(ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期前遗留累计\r\nexport const statisticThisYearBeforePeriodTotalTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计周期）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime &&\r\n        ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n  }\r\n\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  return dataMap;\r\n}\r\n\r\n// 上年度统计周期前遗留\r\nexport const statisticLastYearBeforePeriodTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      statisticCloseHandleTime(ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      statisticOpenHandleTime(ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 上年度统计周期前遗留累计\r\nexport const statisticLastYearBeforePeriodTotalTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      statisticCloseHandleTime(ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      statisticOpenHandleTime(ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期累计\r\nexport const statisticThisYearTotalTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      statisticCloseHandleTime(ticketStatistic, ticketCloseTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      statisticOpenHandleTime(ticketStatistic, closeEndTime, ticketReportTime, ticketPauseDuration);\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 统计周期前需处理\r\nexport const statisticBeforePeriodNeedHandleResult = (array, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let result of array) {\r\n    for (let name in result) {\r\n      if (dataMap[name] == null) {\r\n        dataMap[name] = initStatisticItem();\r\n      }\r\n      for (let category in dataMap[name]) {\r\n        for (let item of STATISTIC_ITEMS) {\r\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\r\n            let ticketCloseCount = result[name][category][TICKET_CLOSE];\r\n            let ticketCloseProcessTime = result[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n            dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] +=\r\n              ticketCloseCount * ticketCloseProcessTime;\r\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\r\n            let ticketOpenProcessTime = result[name][category][TICKET_OPEN_PROCESS_TIME];\r\n            let ticketOpenCount = result[name][category][TICKET_OPEN];\r\n            dataMap[name][category][TICKET_OPEN_PROCESS_TIME] +=\r\n              ticketOpenCount * ticketOpenProcessTime;\r\n          }\r\n          else {\r\n            dataMap[name][category][item] +=\r\n              result[name][category][item];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // get average process time\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 统计周期累计\r\nexport const statisticPeriodTotalResult = (array, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let result of array) {\r\n    for (let name in result) {\r\n      if (dataMap[name] == null) {\r\n        dataMap[name] = initStatisticItem();\r\n      }\r\n      for (let category in dataMap[name]) {\r\n        for (let item of STATISTIC_ITEMS) {\r\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\r\n            let ticketCloseCount = result[name][category][TICKET_CLOSE];\r\n            let ticketCloseProcessTime = result[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n            dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] +=\r\n              ticketCloseCount * ticketCloseProcessTime;\r\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\r\n            let ticketOpenProcessTime = result[name][category][TICKET_OPEN_PROCESS_TIME];\r\n            let ticketOpenCount = result[name][category][TICKET_OPEN];\r\n            dataMap[name][category][TICKET_OPEN_PROCESS_TIME] +=\r\n              ticketOpenCount * ticketOpenProcessTime;\r\n          }\r\n          else {\r\n            dataMap[name][category][item] +=\r\n              result[name][category][item];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // get average process time\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n\r\n  return dataMap;\r\n}\r\n\r\nexport const statisticRate = (statisticMap, statisticItem, rateMap) => {\r\n  for (let name in statisticMap) {\r\n    for (let category in rateMap[name]) {\r\n      if (statisticMap[name][category][TICKET_ACCEPT] > 0) {\r\n        if (statisticItem === NEW_ADD_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === REMAIN_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === OVERALL_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === CLOSE_ON_TIME_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE_ON_TIME] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const statistc = (periodTickets, beforePeriodTickets, thisYearTotalTickets,\r\n  lastYearBeforePeriodTickets, startTime, endTime, col, allItems) => {\r\n  let yearStartTime = moment(startTime).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\r\n  let data = {};\r\n  data.periodNewAddedResult = statisticPeriodNewAddedTickets(periodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.thisYearBeforePeriodResult = statisticThisYearBeforePeriodTickets(beforePeriodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.thisYearBeforePeriodTotalResult = statisticThisYearBeforePeriodTotalTickets(beforePeriodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.lastYearBeforePeriodResult = statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.lastYearBeforePeriodTotalResult = statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\r\n    yearStartTime, endTime, col, allItems);\r\n  data.thisYearTotalResult = statisticThisYearTotalTickets(thisYearTotalTickets,\r\n    yearStartTime, endTime, col, allItems);\r\n  data.beforePeriodNeedHandleResult = statisticBeforePeriodNeedHandleResult([\r\n    data.periodNewAddedResult, data.thisYearBeforePeriodResult,\r\n    data.lastYearBeforePeriodResult], allItems);\r\n  data.periodTotalResult = statisticPeriodTotalResult([\r\n    data.lastYearBeforePeriodTotalResult,\r\n    data.thisYearTotalResult\r\n  ], allItems);\r\n  data.rateResult = {};\r\n  for (let name of allItems) {\r\n    data.rateResult[name] = initRate();\r\n  }\r\n  statisticRate(data.periodNewAddedResult, NEW_ADD_CLOSE_RATE, data.rateResult);\r\n  statisticRate(data.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, data.rateResult);\r\n  statisticRate(data.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, data.rateResult);\r\n  statisticRate(data.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, data.rateResult);\r\n  statisticRate(data.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, data.rateResult);\r\n\r\n  return data;\r\n}\r\n\r\nexport const formatGraphData = (data, allItems) => {\r\n  let graphData = {\r\n    totalAcceptData: [],\r\n    overallCloseRateData: [],\r\n    newAddedAcceptData: [],\r\n    newAddedCloseRateData: [],\r\n    needHandleAcceptData: [],\r\n    needHandleCloseOnTimeRateData: [],\r\n    needHandleCloseRateData: [],\r\n    openData: [],\r\n    closeAverageHandleTimeData: [],\r\n    openAverageHandleTimeData: []\r\n  };\r\n  for (let name of allItems) {\r\n    graphData.totalAcceptData = [\r\n      ...graphData.totalAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.periodTotalResult[name][KEY_TICKET_TOTAL][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.overallCloseRateData = [\r\n      ...graphData.overallCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[name][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.newAddedAcceptData = [\r\n      ...graphData.newAddedAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[name][KEY_TICKET_TOTAL][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.newAddedCloseRateData = [\r\n      ...graphData.newAddedCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[name][KEY_TICKET_TOTAL][NEW_ADD_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.needHandleAcceptData = [\r\n      ...graphData.needHandleAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.beforePeriodNeedHandleResult[name][KEY_TICKET_TOTAL][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.needHandleCloseOnTimeRateData = [\r\n      ...graphData.needHandleCloseOnTimeRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[name][KEY_TICKET_TOTAL][CLOSE_ON_TIME_RATE]\r\n      }\r\n    ];\r\n    graphData.needHandleCloseRateData = [\r\n      ...graphData.needHandleCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[name][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.closeAverageHandleTimeData = [\r\n      ...graphData.closeAverageHandleTimeData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[name][KEY_TICKET_TOTAL][TICKET_CLOSE_PROCESS_TIME]\r\n      }\r\n    ];\r\n    graphData.openAverageHandleTimeData = [\r\n      ...graphData.openAverageHandleTimeData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[name][KEY_TICKET_TOTAL][TICKET_OPEN_PROCESS_TIME]\r\n      }\r\n    ];\r\n    graphData.openData = [\r\n      ...graphData.openData,\r\n      {\r\n        name: name,\r\n        value: data.periodTotalResult[name][KEY_TICKET_TOTAL][TICKET_OPEN]\r\n      }\r\n    ]\r\n  }\r\n\r\n  return graphData;\r\n}\r\n\r\nexport const formatCategoryGraphData = (data, allItems, area) => {\r\n  let graphData = {\r\n    totalAcceptData: [],\r\n    overallCloseRateData: [],\r\n    newAddedAcceptData: [],\r\n    newAddedCloseRateData: [],\r\n    needHandleAcceptData: [],\r\n    needHandleCloseOnTimeRateData: [],\r\n    needHandleCloseRateData: [],\r\n    openData: [],\r\n    closeAverageHandleTimeData: [],\r\n    openAverageHandleTimeData: []\r\n  };\r\n  for (let name of allItems) {\r\n    graphData.totalAcceptData = [\r\n      ...graphData.totalAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.periodTotalResult[area][name][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.overallCloseRateData = [\r\n      ...graphData.overallCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[area][name][OVERALL_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.newAddedAcceptData = [\r\n      ...graphData.newAddedAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[area][name][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.newAddedCloseRateData = [\r\n      ...graphData.newAddedCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[area][name][NEW_ADD_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.needHandleAcceptData = [\r\n      ...graphData.needHandleAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.beforePeriodNeedHandleResult[area][name][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.needHandleCloseOnTimeRateData = [\r\n      ...graphData.needHandleCloseOnTimeRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[area][name][CLOSE_ON_TIME_RATE]\r\n      }\r\n    ];\r\n    graphData.needHandleCloseRateData = [\r\n      ...graphData.needHandleCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[area][name][OVERALL_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.closeAverageHandleTimeData = [\r\n      ...graphData.closeAverageHandleTimeData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[area][name][TICKET_CLOSE_PROCESS_TIME]\r\n      }\r\n    ];\r\n    graphData.openAverageHandleTimeData = [\r\n      ...graphData.openAverageHandleTimeData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[area][name][TICKET_OPEN_PROCESS_TIME]\r\n      }\r\n    ];\r\n    graphData.openData = [\r\n      ...graphData.openData,\r\n      {\r\n        name: name,\r\n        value: data.periodTotalResult[area][name][TICKET_OPEN]\r\n      }\r\n    ]\r\n  }\r\n\r\n  return graphData;\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport DataForm from './components/DataForm';\nimport ChartView from './components/ChartView';\nimport ProjectView from './components/ProjectView';\nimport { Row, Col, LocaleProvider, Tabs } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  TICKET_SYSTEM_COUNT,\n  TICKET_ACCEPT,\n  TICKET_OPEN,\n  TICKET_VALIDATE,\n  TICKET_PAUSE,\n  TICKET_INVALID,\n  TICKET_CLOSE,\n  TICKET_CLOSE_NORMAL,\n  TICKET_CLOSE_ABNORMAL,\n  TICKET_CLOSE_ON_TIME,\n  TICKET_RESPONSE_IN_30_MIN,\n  TICKET_RESPONSE_IN_30_HOUR,\n  TICKET_CLOSE_PROCESS_TIME,\n  TICKET_OPEN_PROCESS_TIME,\n  DEFAULT_STATISTIC_ITEMS,\n  KEY_REPORT_TIME,\n  KEY_PROJECT_NAME,\n  KEY_SECOND_CATEGORY,\n  KEY_TICKET_STATUS,\n  KEY_IS_PROCESS_EXCCED,\n  KEY_FIRST_RESPONSE_TIME,\n  KEY_PROCESS_TIME,\n  KEY_CLOSE_TIME,\n  DEFAULT_SECOND_CATEGORIES,\n  KEY_STATISTIC_ITEM,\n  KEY_TICKET_TOTAL,\n  KEY_CITY_NAME,\n  NEW_ADD_CLOSE_RATE,\n  REMAIN_CLOSE_RATE,\n  OVERALL_CLOSE_RATE,\n  RESPONSE_IN_30_MIN_RATE,\n  RESPONSE_IN_30_HOUR_RATE,\n  CLOSE_ON_TIME_RATE,\n  TOTAL_OVERALL_CLOSE_RATE,\n  RATE_STATISTIC_ITEMS,\n  CATEGORY_UNCLASSIFY,\n  COL_FIRST_CLASS,\n  COL_CURRENT_STATUS,\n  COL_PROJECT_STAGE,\n  COL_PROJECT,\n  COL_CITY_COMPANY,\n  COL_AREA,\n  COL_REPORT_TIME,\n  CATEGORIES,\n  COL_DUTY_WORKER\n} from './constants';\n\nimport {\n  filterProjectName,\n  parseTime,\n  filterProjectStage,\n  formatToAreaTable,\n  formatToAreaTateTable,\n  readExcelData\n} from './utils';\n\nimport { connect } from 'react-redux';\nimport { addCategories, addTicketStates } from './store/actions';\n\nimport * as Util from './functions/utils';\n\n// global variables\nlet allCategory = [];\nlet allTicketState = [];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stageGraphData: {},\n      cityGraphData: {},\n      projectGraphData: {},\n      areaGraphData: {},\n      categoryGraphData: {}\n    }\n  }\n\n  start = (fileList, startTime, endTime) => {\n    const { addCategories, addTicketStates } = this.props;\n    this.setState({ loading: true });\n    readExcelData(fileList).then((data) => {\n      let allStages = [], allProjects = [], allCities = [], allAreas = [], allWorkers = [];\n      // get all categories and ticket states\n      for (let ticket of data) {\n        let category = Util.getCategory(ticket);\n        if (allCategory.indexOf(category) === -1) {\n          allCategory = [...allCategory, category];\n        }\n        let state = ticket[COL_CURRENT_STATUS];\n        if (allTicketState.indexOf(state) === -1) {\n          allTicketState = [...allTicketState, state];\n        }\n\n        // get all stages\n        let stage = ticket[COL_PROJECT_STAGE];\n        if (allStages.indexOf(stage) === -1) {\n          allStages = [\n            ...allStages,\n            stage\n          ];\n        }\n        // get all projects\n        let project = ticket[COL_PROJECT];\n        if (allProjects.indexOf(project) === -1) {\n          allProjects = [\n            ...allProjects,\n            project\n          ];\n        }\n        // get all cities\n        let city = ticket[COL_CITY_COMPANY];\n        if (allCities.indexOf(city) === -1) {\n          allCities = [\n            ...allCities,\n            city\n          ];\n        }\n        // get all area\n        let area = ticket[COL_AREA];\n        if (allAreas.indexOf(area) === -1) {\n          allAreas = [\n            ...allAreas,\n            area\n          ];\n        }\n        // get all workers\n        let worker = ticket[COL_DUTY_WORKER];\n        if (allWorkers.indexOf(worker) === -1) {\n          allWorkers = [\n            ...allWorkers,\n            worker\n          ];\n        }\n      }\n      addCategories(allCategory);\n      addTicketStates(allTicketState);\n\n      let allCategories = CATEGORIES;\n\n      this.setState({\n        allStages,\n        allProjects,\n        allCities,\n        allAreas,\n        allCategories,\n        allWorkers\n      });\n\n      let yearStartTime = moment(startTime).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n      let periodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime >= startTime && ticketReportTime <= endTime;\n      });\n      let beforePeriodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime >= yearStartTime && ticketReportTime < startTime;\n      });\n      let thisYearTotalTickets = data.filter((ticket) => {\n        let reportTime = moment(ticket[KEY_REPORT_TIME]);\n        return reportTime <= endTime && reportTime >= yearStartTime;\n      });\n      let lastYearBeforePeriodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime < yearStartTime\n      });\n\n      // 统计负责维保工程师\n      let workerData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_DUTY_WORKER, allWorkers);\n      this.setState({\n        workerData\n      });\n\n      // 统计分期\n      let stageData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_PROJECT_STAGE, allStages)\n      this.setState({\n        stageData\n      });\n\n      // 统计项目\n      let projectData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_PROJECT, allProjects)\n      this.setState({\n        projectData\n      });\n\n      // 统计城市\n      let cityData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_CITY_COMPANY, allCities)\n      this.setState({\n        cityData\n      });\n\n      // 统计大区\n      let areaData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_AREA, allAreas)\n      this.setState({\n        areaData\n      });\n\n      // 画图\n      let stageGraphData = Util.formatGraphData(stageData, allStages);\n      this.setState({\n        stageGraphData\n      })\n\n      let projectGraphData = Util.formatGraphData(projectData, allProjects);\n      this.setState({\n        projectGraphData\n      });\n\n      let cityGraphData = Util.formatGraphData(cityData, allCities);\n      this.setState({\n        cityGraphData\n      });\n\n      let areaGraphData = Util.formatGraphData(areaData, allAreas);\n      this.setState({\n        areaGraphData\n      });\n\n      // 统计分类分布图\n      let categoryGraphData = Util.formatCategoryGraphData(areaData, allCategories, allAreas[0]);\n      this.setState({\n        categoryGraphData\n      });\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const tabChart = (\n      <ChartView\n        stageGraphData={this.state.stageGraphData}\n        projectGraphData={this.state.projectGraphData}\n        cityGraphData={this.state.cityGraphData}\n        areaGraphData={this.state.areaGraphData}\n        categoryGraphData={this.state.categoryGraphData}\n        allStages={this.state.allStages}\n        allProjects={this.state.allProjects}\n        allCities={this.state.allCities}\n        allAreas={this.state.allAreas}\n        allCategories={this.state.allCategories}\n      />\n    );\n\n    const tabArea = (\n      <ProjectView\n        data={this.state.areaData}\n        projects={this.state.allAreas}\n        name=\"大区\"\n      />\n    );\n\n    const tabCity = (\n      <ProjectView\n        data={this.state.cityData}\n        projects={this.state.allCities}\n        name=\"城市\"\n      />\n    )\n\n    const tabProject = (\n      <ProjectView\n        data={this.state.projectData}\n        projects={this.state.allProjects}\n        name=\"项目\"\n      />\n    );\n\n    const tabStage = (\n      <ProjectView\n        data={this.state.stageData}\n        projects={this.state.allStages}\n        name=\"项目分期\"\n      />\n    );\n\n    const tabWorker = (\n      <ProjectView\n        data={this.state.workerData}\n        projects={this.state.allWorkers}\n        name=\"工程师\"\n      />\n    );\n\n    return (\n      <LocaleProvider locale={zh_CN}>\n        <div>\n          <h2 className=\"text--center heading\">统计辅助工具</h2>\n          <DataForm\n            onStart={this.start}\n            onExport={this.exportExcel}\n            loading={this.state.loading}\n          />\n          <Row style={{ margin: '40px 0' }}>\n            <Col span={22} offset={1}>\n              <Tabs type=\"card\">\n                <Tabs.TabPane tab=\"统计图\" key=\"统计图\">{tabChart}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"大区\" key=\"大区\">{tabArea}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"城市\" key=\"城市\">{tabCity}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"项目\" key=\"项目\">{tabProject}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"分期\" key=\"分期\">{tabStage}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"工程师\" key=\"工程师\">{tabWorker}</Tabs.TabPane>\n              </Tabs>\n            </Col>\n          </Row>\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  addCategories,\n  addTicketStates\n}\n\nconst ConnectedApp = connect(null, mapDispatchToProps)(App);\n\nexport default ConnectedApp;\n","import {\r\n  ADD_CATEGORY,\r\n  ADD_CATEGORIES,\r\n  ADD_TICKET_STATES\r\n} from '../action-types';\r\n\r\nexport const addCategory = category => ({\r\n  type: ADD_CATEGORY,\r\n  payload: {\r\n    category\r\n  }\r\n});\r\n\r\nexport const addCategories = categories => ({\r\n  type: ADD_CATEGORIES,\r\n  payload: {\r\n    categories\r\n  }\r\n});\r\n\r\nexport const addTicketStates = ticketStates => ({\r\n  type: ADD_TICKET_STATES,\r\n  payload: {\r\n    ticketStates\r\n  }\r\n})\r\n","export const ADD_CATEGORY = 'ADD_CATEGORY';\r\nexport const ADD_CATEGORIES = 'ADD_CATEGORIES';\r\nexport const ADD_TICKET_STATES = 'ADD_TICKET_STATES';\r\n","import { combineReducers } from 'redux';\r\nimport category from './category';\r\nimport ticketState from './ticket-state';\r\n\r\nconst reducer = combineReducers({\r\n  category,\r\n  ticketState\r\n});\r\n\r\nexport default reducer;\r\n","import {\r\n  ADD_CATEGORY,\r\n  ADD_CATEGORIES\r\n} from '../action-types';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_CATEGORY:\r\n      const { category } = action.payload;\r\n      return [\r\n        ...state,\r\n        category\r\n      ];\r\n    case ADD_CATEGORIES:\r\n      const { categories } = action.payload;\r\n      return [\r\n        ...state,\r\n        ...categories\r\n      ]\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  ADD_TICKET_STATES\r\n} from '../action-types';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_TICKET_STATES:\r\n      const { ticketStates } = action.payload;\r\n      return [\r\n        ...state,\r\n        ...ticketStates\r\n      ];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}