{"version":3,"sources":["components/DataForm.js","components/ChartView.js","constants.js","components/AreaTable.js","components/AreaView.js","components/CityTable.js","components/CityView.js","components/ProjectTable.js","utils.js","components/ProjectView.js","App.js","serviceWorker.js","index.js"],"names":["DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startDate","Date","set","hour","minute","second","endDate","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","toConsumableArray","concat","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","style","margin","onExport","React","Component","defaultPorps","WrapDataForm","create","ChartView","titleConfig","left","top","textStyle","color","toolboxConfig","feature","saveAsImage","show","right","styles","height","core_default","echarts","option","title","objectSpread","text","tooltip","trigger","axisPointer","crossStyle","toolbox","xAxis","data","cities","yAxis","name","min","max","series","barMaxWidth","position","formatter","cityTotalAcceptData","yAxisIndex","cityOverallCloseRateData","projects","interval","axisLabel","rotate","projectTotalAcceptData","projectOverallCloseRateData","stages","stageTotalAcceptData","stageOverallCloseRateData","radius","cityOpenData","secondCategoryOpenData","cityNewAddedAcceptData","cityNewAddedCloseRateData","secondCategoryNewAddedAcceptData","legend","cityCloseAverageHandleTimeData","cityOpenAverageHandleTimeData","defaultProps","TICKET_SYSTEM_COUNT","TICKET_ACCEPT","TICKET_OPEN","TICKET_VALIDATE","TICKET_PAUSE","TICKET_INVALID","TICKET_CLOSE","TICKET_CLOSE_NORMAL","TICKET_CLOSE_ABNORMAL","TICKET_CLOSE_ON_TIME","TICKET_RESPONSE_IN_30_MIN","TICKET_RESPONSE_IN_30_HOUR","TICKET_CLOSE_PROCESS_TIME","TICKET_OPEN_PROCESS_TIME","DEFAULT_STATISTIC_ITEMS","KEY_REPORT_TIME","KEY_PROJECT_NAME","KEY_SECOND_CATEGORY","KEY_TICKET_STATUS","KEY_IS_PROCESS_EXCCED","KEY_FIRST_RESPONSE_TIME","KEY_PROCESS_TIME","KEY_CLOSE_TIME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","KEY_CITY_NAME","DEFAULT_SECOND_CATEGORIES","NEW_ADD_CLOSE_RATE","REMAIN_CLOSE_RATE","OVERALL_CLOSE_RATE","RESPONSE_IN_30_MIN_RATE","RESPONSE_IN_30_HOUR_RATE","CLOSE_ON_TIME_RATE","TOTAL_OVERALL_CLOSE_RATE","RATE_STATISTIC_ITEMS","STATISTIC_PERIOD_ADD","STATISTIC_BEFORE_PERIOD_REMAIN","STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_THIS_YEAR_TOTAL","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_BEFORE_PERIOD_NEED_HANDLE","STATISTIC_BEFORE_PERIOD_TOTAL","STATISTIC_PERIOD_RATE","STAGES","AreaTable","otherColumns","map","item","es_table","Column","dataIndex","key","width","currentPageData","dataSource","pagination","pageSize","scroll","y","size","AreaView","components_AreaTable","periodNewAddedData","thisYearBeforePeriodData","thisYearBeforePeriodTotalData","thisYearTotalData","lastYearBeforePeriodData","lastYearBeforePeriodTotalData","beforePeriodNeedHandleData","periodTotalData","rateData","CityTable","cityColumn","filteredCities","length","filter","CityView","filterCities","es_select","mode","onChange","city","Option","components_CityTable","ProjectTable","projectColumn","filteredProjects","filterProjectName","projectName","sub","match","substring","parseTime","timeString","time","day","window","parseInt","filterProjectStage","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","stage","return","formatToTable","tableData","rowKey","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","statisticItem","rowData","_arr","_i","secondCategory","push","formatToAreaTable","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_arr2","_i2","formatToRateTable","_arr3","_i3","_arr4","_i4","formatToAreaTateTable","_arr5","_i5","_arr6","_i6","ProjectView","filterProjects","project","components_ProjectTable","periodNewAddedResult","thisYearBeforePeriodResult","thisYearBeforePeriodTotalResult","thisYearTotalResult","lastYearBeforePeriodResult","lastYearBeforePeriodTotalResult","beforePeriodNeedHandleResult","periodTotalResult","rateResult","TICKET_STATUS_IN_PROGRESS","TICKET_STATUS_PAUSE","TICKET_STATUS_VALIDATE","TICKET_STATUS_CLOSE","TICKET_STATUS_ABNORMAL_CLOSE","TICKET_STATUS_INVALID","NO","initProjectRate","itemName","initProject","isInProgress","ticketStatus","statisticRate","statisticMap","rateMap","toFixed","statisticCityRate","globalRowKey","formatCityData","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","formatToCityRateTable","_arr7","_i7","mergeStageResult","resultArray","filterFunc","mergeResult","forEach","result","filteredProjectName","_arr8","_i8","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","ticketCloseCount","ticketCloseProcessTime","ticketOpenProcessTime","ticketOpenCount","Number","mergeProjectResult","_arr9","_i9","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","statisticCity","closeTimeStart","closeTimeEnd","dataMap","ticket","ticketStatistic","ticketCloseTime","moment","_parseTime","_parseTime2","_parseTime3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","statistic","reportTime","yearStartDate","month","date","thisYearbeforePeriodTickets","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_parseTime4","_parseTime5","_parseTime6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","statisticThisYearBeforePeriodTickets","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","statisticThisYearBeforeStartDateTotalTickets","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_parseTime13","_parseTime14","_parseTime15","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","statisticThisYearTotalTickets","lastYearBeforePeriodTickets","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_parseTime7","_parseTime8","_parseTime9","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","statisticLastYearBeforePeriodTickets","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","_parseTime10","_parseTime11","_parseTime12","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","statisticLastYearBeforePeriodTotalTickets","_arr10","_i10","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","_arr11","_i11","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","stageRateResult","stageResult","projectResult","projectRateResult","cityResult","cityRateResult","App","start","fileReader","FileReader","readFile","onload","event","workbook","XLSX","read","target","sheet","Sheets","SheetNames","cityName","utils","sheet_to_json","blankrows","readAsBinaryString","readExcels","cityData","projectData","allCities","allCityResult","allProjectResult","allStageResult","table","areaResult","areaRateResult","areaData","_loop","stageData","secondCategoryCloseAverageHandleTimeData","secondCategoryOpenAverageHandleTimeData","_iteratorNormalCompletion26","_didIteratorError26","_iteratorError26","_step26","_iterator26","ticketAccept","stageName","exportExcel","header","newAddedData","thisYearBeforeStartData","sheet1","json_to_sheet","sheet2","sheet3","sheet4","sheet5","sheet6","sheet7","sheet8","sheet9","book_new","book_append_sheet","writeFile","now","format","error","tabChart","components_ChartView","tabArea","components_AreaView","tabCity","components_CityView","tabProject","components_ProjectView","tabStage","locale_provider","locale","zh_CN","className","components_DataForm","tabs","TabPane","tab","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6adda91.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {},\n    onExport: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func,\n    onExport: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startDate = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endDate = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startDate, endDate);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              { \n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }   \n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在统计...': '开始统计'\n              }\n            </Button>\n            <Button style={{ margin: '0 20px' }} onClick={this.props.onExport}>导出Excel表格</Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","import React from 'react';\r\nimport { Row } from 'antd';\r\n// import the core library.\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\n\r\n// then import echarts modules those you have used manually.\r\nimport echarts from 'echarts/lib/echarts';\r\nimport 'echarts/lib/chart/line';\r\nimport 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/chart/pie';\r\n// import 'echarts/lib/chart/scatter';\r\n// import 'echarts/lib/chart/radar';\r\n\r\n// import 'echarts/lib/chart/map';\r\n// import 'echarts/lib/chart/treemap';\r\n// import 'echarts/lib/chart/graph';\r\n// import 'echarts/lib/chart/gauge';\r\n// import 'echarts/lib/chart/funnel';\r\n// import 'echarts/lib/chart/parallel';\r\n// import 'echarts/lib/chart/sankey';\r\n// import 'echarts/lib/chart/boxplot';\r\n// import 'echarts/lib/chart/candlestick';\r\n// import 'echarts/lib/chart/effectScatter';\r\n// import 'echarts/lib/chart/lines';\r\n// import 'echarts/lib/chart/heatmap';\r\n\r\n// import 'echarts/lib/component/graphic';\r\n// import 'echarts/lib/component/grid';\r\nimport 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/tooltip';\r\n// import 'echarts/lib/component/polar';\r\n// import 'echarts/lib/component/geo';\r\n// import 'echarts/lib/component/parallel';\r\n// import 'echarts/lib/component/singleAxis';\r\n// import 'echarts/lib/component/brush';\r\n\r\nimport 'echarts/lib/component/title';\r\n\r\n// import 'echarts/lib/component/dataZoom';\r\n// import 'echarts/lib/component/visualMap';\r\n\r\n// import 'echarts/lib/component/markPoint';\r\n// import 'echarts/lib/component/markLine';\r\n// import 'echarts/lib/component/markArea';\r\n\r\n// import 'echarts/lib/component/timeline';\r\nimport 'echarts/lib/component/toolbox';\r\n// import { Rect } from 'echarts/lib/util/graphic';\r\n\r\n// import 'zrender/lib/vml/vml';\r\n\r\nChartView.defaultProps = {\r\n  projectTotalAcceptData: []\r\n}\r\n\r\nfunction ChartView(props) {\r\n  const titleConfig = {\r\n    left: 'center',\r\n    top: 0,\r\n    textStyle: {\r\n      color: '#000000'\r\n    }\r\n  };\r\n  const toolboxConfig = {\r\n    feature: {\r\n      saveAsImage: { show: true }\r\n    },\r\n    right: 40\r\n  };\r\n  const legendConfig = {\r\n    left: 40\r\n  };\r\n  const styles = {\r\n    height: '500px',\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各城市日常维修总体关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityTotalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityOverallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各项目日常维修总体关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.projects,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectTotalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectOverallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各项目分期日常维修总体关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.stages,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageTotalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageOverallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关城市分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '城市剩余未关',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.cityOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关二级分类分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '二级分类',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.secondCategoryOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各城市新增维修关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNewAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNewAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '新增维修城市分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.cityNewAddedAcceptData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '新增维修二级分类分布图',\r\n              left: 'center',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.secondCategoryNewAddedAcceptData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '平均处理时长城市分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            legend: {\r\n              data: ['已关闭', '剩余未关'],\r\n              ...legendConfig\r\n            },\r\n            series: [\r\n              {\r\n                name: '已关闭',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityCloseAverageHandleTimeData\r\n              },\r\n              {\r\n                name: '剩余未关',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityOpenAverageHandleTimeData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChartView;\r\n","// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '判定无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关平均处理时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '剩余未关平均处理时长（天）';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\nexport const KEY_CITY_NAME = '城市';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const NEW_ADD_CLOSE_RATE = '新增关闭率';\r\nexport const REMAIN_CLOSE_RATE = '遗留关闭率';\r\nexport const OVERALL_CLOSE_RATE = '总体关闭率';\r\nexport const RESPONSE_IN_30_MIN_RATE = '响应及时率（0.5h）'\r\nexport const RESPONSE_IN_30_HOUR_RATE = '响应及时率（30h）';\r\nexport const CLOSE_ON_TIME_RATE = '及时关闭率';\r\nexport const TOTAL_OVERALL_CLOSE_RATE = '累计总体关闭率';\r\n\r\nexport const RATE_STATISTIC_ITEMS = [\r\n  REMAIN_CLOSE_RATE,\r\n  NEW_ADD_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_RATE = '本年度统计周期内';\r\n\r\nexport const STAGES = [\r\n  '一期',\r\n  '二期',\r\n  '三期',\r\n  '四期',\r\n  '五期',\r\n  '六期',\r\n  '七期',\r\n  '八期',\r\n  '九期',\r\n  '十期'\r\n];","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction AreaTable(props) {\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default AreaTable;\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\nimport AreaTable from './AreaTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass AreaView extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_PERIOD_ADD}\r\n            data={this.props.periodNewAddedData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n            data={this.props.thisYearBeforePeriodData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n            data={this.props.thisYearBeforePeriodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_THIS_YEAR_TOTAL}\r\n            data={this.props.thisYearTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n            data={this.props.lastYearBeforePeriodData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n            data={this.props.lastYearBeforePeriodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n            data={this.props.beforePeriodNeedHandleData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n            data={this.props.periodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_PERIOD_RATE}\r\n            data={this.props.rateData}\r\n          />\r\n        </div>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AreaView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_CITY_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction CityTable(props) {\r\n  const cityColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_CITY_NAME}\r\n      title={KEY_CITY_NAME}\r\n      key={KEY_CITY_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredCities.length > 0 ?\r\n        props.data.filter(item => props.filteredCities.indexOf(item[KEY_CITY_NAME]) != -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {cityColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nCityTable.defaultProps = {\r\n  filteredCities: []\r\n}\r\n\r\nexport default CityTable;\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport CityTable from './CityTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass CityView extends React.Component {\r\n  static defaultProps = {\r\n    cities: []\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredCities: []\r\n    }\r\n  }\r\n\r\n  filterCities = (filteredCities) => {\r\n    if (filteredCities != null && filteredCities.length > 0) {\r\n      this.setState({\r\n        filteredCities: filteredCities\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredCities: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的城市'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterCities}\r\n                >\r\n                  {\r\n                    this.props.cities.map((city) => (\r\n                      <Select.Option key={city}>{city}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={this.props.periodNewAddedData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.thisYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.thisYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={this.props.thisYearTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.lastYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.lastYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={this.props.beforePeriodNeedHandleData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={this.props.periodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={this.props.rateData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CityView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ProjectTable(props) {\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title={KEY_PROJECT_NAME}\r\n      key={KEY_PROJECT_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredProjects.length > 0 ?\r\n        props.data.filter(item => props.filteredProjects.indexOf(item[KEY_PROJECT_NAME]) != -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nProjectTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ProjectTable;\r\n","import {\r\n  DEFAULT_STATISTIC_ITEMS,\r\n  KEY_TICKET_TOTAL,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  STAGES,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES\r\n} from './constants';\r\n\r\nexport function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|（.*?）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}\r\n\r\nexport function filterProject(projectName, reg) {\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function filterProjectStage(projectName) {\r\n  let filteredName = null;\r\n  for (let stage of STAGES) {\r\n    if (projectName.indexOf(stage) != -1) {\r\n      filteredName = projectName.substring(0, projectName.indexOf(stage));\r\n      return filteredName;\r\n    }\r\n  }\r\n  return projectName;\r\n}\r\n\r\nexport function formatToTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let projectName in data) {\r\n    for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = projectName;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[secondCategory] = data[secondCategory][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToRateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let projectName in data) {\r\n    for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n      RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = projectName;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[secondCategory] = data[secondCategory][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport ProjectTable from './ProjectTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\nimport {\r\n  formatToTable,\r\n  formatToRateTable\r\n} from '../utils';\r\n\r\nclass ProjectView extends React.Component {\r\n  static defaultProps = {\r\n    data: {}\r\n  }\r\n\r\n  // static getDirevedStateFromProps() {\r\n\r\n  // }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredProjects: []\r\n    }\r\n  }\r\n\r\n  filterProjects = (projects) => {\r\n    if (projects.length > 0) {\r\n      this.setState({\r\n        filteredProjects: projects\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredProjects: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let projects = [];\r\n    for (let item in this.props.data) {\r\n      for (let projectName in this.props.data[item]) {\r\n        if (projects.indexOf(projectName) === -1) {\r\n          projects = [...projects, projectName];\r\n        }\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的项目'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterProjects}\r\n                >\r\n                  {\r\n                    projects.map((project) => (\r\n                      <Select.Option key={project}>{project}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={formatToTable(this.props.data.periodNewAddedResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.thisYearBeforePeriodResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearBeforePeriodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={formatToTable(this.props.data.beforePeriodNeedHandleResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={formatToTable(this.props.data.periodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={formatToRateTable(this.props.data.rateResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectView;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport DataForm from './components/DataForm';\nimport ChartView from './components/ChartView';\nimport AreaView from './components/AreaView';\nimport CityView from './components/CityView';\nimport ProjectView from './components/ProjectView';\nimport XLSX from 'xlsx';\nimport { Row, Col, message, LocaleProvider, Tabs } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  TICKET_SYSTEM_COUNT,\n  TICKET_ACCEPT,\n  TICKET_OPEN,\n  TICKET_VALIDATE,\n  TICKET_PAUSE,\n  TICKET_INVALID,\n  TICKET_CLOSE,\n  TICKET_CLOSE_NORMAL,\n  TICKET_CLOSE_ABNORMAL,\n  TICKET_CLOSE_ON_TIME,\n  TICKET_RESPONSE_IN_30_MIN,\n  TICKET_RESPONSE_IN_30_HOUR,\n  TICKET_CLOSE_PROCESS_TIME,\n  TICKET_OPEN_PROCESS_TIME,\n  DEFAULT_STATISTIC_ITEMS,\n  KEY_REPORT_TIME,\n  KEY_PROJECT_NAME,\n  KEY_SECOND_CATEGORY,\n  KEY_TICKET_STATUS,\n  KEY_IS_PROCESS_EXCCED,\n  KEY_FIRST_RESPONSE_TIME,\n  KEY_PROCESS_TIME,\n  KEY_CLOSE_TIME,\n  DEFAULT_SECOND_CATEGORIES,\n  KEY_STATISTIC_ITEM,\n  KEY_TICKET_TOTAL,\n  KEY_CITY_NAME,\n  STATISTIC_PERIOD_ADD,\n  STATISTIC_BEFORE_PERIOD_REMAIN,\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_THIS_YEAR_TOTAL,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\n  STATISTIC_BEFORE_PERIOD_TOTAL,\n  STATISTIC_PERIOD_RATE,\n  STAGES,\n  NEW_ADD_CLOSE_RATE,\n  REMAIN_CLOSE_RATE,\n  OVERALL_CLOSE_RATE,\n  RESPONSE_IN_30_MIN_RATE,\n  RESPONSE_IN_30_HOUR_RATE,\n  CLOSE_ON_TIME_RATE,\n  TOTAL_OVERALL_CLOSE_RATE,\n  RATE_STATISTIC_ITEMS\n} from './constants';\n\nimport {\n  filterProjectName,\n  parseTime,\n  filterProjectStage,\n  formatToAreaTable,\n  formatToAreaTateTable\n} from './utils';\n\n// ticket status\nconst TICKET_STATUS_IN_PROGRESS = '处理中';\nconst TICKET_STATUS_PAUSE = '暂停处理';\nconst TICKET_STATUS_VALIDATE = '待复验';\nconst TICKET_STATUS_CLOSE = '已关闭';\nconst TICKET_STATUS_ABNORMAL_CLOSE = '非正常关闭';\nconst TICKET_STATUS_INVALID = '判定无效';\n\nconst YES = '是';\nconst NO = '否';\n\nfunction initProjectRate() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of RATE_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction initProject() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of DEFAULT_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction isInProgress(ticketStatus) {\n  return ticketStatus.indexOf(TICKET_STATUS_IN_PROGRESS) === 0;\n}\n\n// 统计周期内新增\nfunction statistic(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 统计周期前遗留\nfunction statisticThisYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 本年度统计周期前遗留累计\nfunction statisticThisYearBeforeStartDateTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n  }\n\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticThisYearTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if (((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) &&\n      ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticRate(statisticMap, statisticItem, rateMap) {\n  for (let projectName in statisticMap) {\n    if (rateMap[projectName] == null) {\n      rateMap[projectName] = initProjectRate();\n    }\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      if (statisticItem === NEW_ADD_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === REMAIN_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE_ON_TIME] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      }\n    }\n  }\n}\n\nfunction statisticCityRate(statisticMap, statisticItem, rateMap) {\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    if ( rateMap[secondCategory] == null) {\n      rateMap[secondCategory] = {};\n    }\n    if (statisticItem === NEW_ADD_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === REMAIN_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE_ON_TIME] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    }\n  }\n}\n\nfunction readExcels(fileList) {\n  return new Promise((resolve, reject) => {\n    let fileReader = new FileReader();\n    let data = {};\n\n    let readFile = (index) => {\n      if (index < fileList.length) {\n        fileReader.onload = (event) => {\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\n          let cityName = fileList[index].name.substring(0, fileList[index].name.indexOf('.'));\n          data[cityName] = XLSX.utils.sheet_to_json(sheet, { blankrows: false });\n          readFile(index + 1);\n        }\n        fileReader.readAsBinaryString(fileList[index]);\n      } else {\n        resolve(data);\n      }\n    };\n    readFile(0);\n  });\n}\n\nlet globalRowKey = 0;\n\nfunction formatCityData(data, city) {\n  let tableData = [];\n  for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction formatToCityRateTable(data, city) {\n  let tableData = [];\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction mergeStageResult(resultArray, filterFunc) {\n  let mergeResult = {};\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      let filteredProjectName = filterFunc(projectName);\n      if (mergeResult[filteredProjectName] == null) {\n        mergeResult[filteredProjectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[filteredProjectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[filteredProjectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[filteredProjectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in mergeResult) {\n    for (let secondCategory in mergeResult[projectName]) {\n      let ticketCloseProcessTime = mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = mergeResult[projectName][secondCategory][TICKET_CLOSE];\n      mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = mergeResult[projectName][secondCategory][TICKET_OPEN];\n      mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return mergeResult;\n}\n\nfunction mergeProjectResult(resultArray) {\n  let mergeResult = initProject();\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let secondCategory in mergeResult) {\n    let ticketCloseProcessTime = mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME];\n    let ticketCloseCount = mergeResult[secondCategory][TICKET_CLOSE];\n    mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n      ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n    let ticketOpenProcessTime = mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME];\n    let ticketOpenCount = mergeResult[secondCategory][TICKET_OPEN];\n    mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] =\n      ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n  }\n\n  return mergeResult;\n}\n\n\nfunction statisticCity(data, startDate, endDate) {\n  // 统计分期\n  let periodNewAddedTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime >= startDate && reportTime <= endDate;\n  });\n  let periodNewAddedResult = statistic(periodNewAddedTickets, startDate, endDate);\n\n  let yearStartDate = moment(startDate).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n  let thisYearbeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < startDate && reportTime >= yearStartDate;\n  });\n\n  let thisYearBeforePeriodResult = statisticThisYearBeforePeriodTickets(thisYearbeforePeriodTickets,\n    startDate, endDate);\n\n  let thisYearBeforePeriodTotalResult = statisticThisYearBeforeStartDateTotalTickets(\n    thisYearbeforePeriodTickets, yearStartDate, endDate);\n\n  let thisYearTotalTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime <= endDate && reportTime >= yearStartDate;\n  });\n  let thisYearTotalResult = statisticThisYearTotalTickets(thisYearTotalTickets,\n    yearStartDate, endDate);\n\n  let lastYearBeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < yearStartDate;\n  });\n  let lastYearBeforePeriodResult = statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\n    startDate, endDate);\n  \n  let lastYearBeforePeriodTotalResult = statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\n    yearStartDate, endDate);\n\n  let beforePeriodNeedHandleResult = {};\n  [periodNewAddedResult, thisYearBeforePeriodResult, lastYearBeforePeriodResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (beforePeriodNeedHandleResult[projectName] == null) {\n        beforePeriodNeedHandleResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            beforePeriodNeedHandleResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in beforePeriodNeedHandleResult) {\n    for (let secondCategory in beforePeriodNeedHandleResult[projectName]) {\n      let ticketCloseProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let periodTotalResult = {};\n  [lastYearBeforePeriodTotalResult, thisYearTotalResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (periodTotalResult[projectName] == null) {\n        periodTotalResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            periodTotalResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in periodTotalResult) {\n    for (let secondCategory in periodTotalResult[projectName]) {\n      let ticketCloseProcessTime = periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = periodTotalResult[projectName][secondCategory][TICKET_CLOSE];\n      periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = periodTotalResult[projectName][secondCategory][TICKET_OPEN];\n      periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let stageRateResult = {};\n  statisticRate(periodNewAddedResult, NEW_ADD_CLOSE_RATE, stageRateResult);\n  statisticRate(thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, stageRateResult);\n  statisticRate(periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, stageRateResult);\n  \n  let stageResult = {\n    periodNewAddedResult: periodNewAddedResult,\n    thisYearBeforePeriodResult: thisYearBeforePeriodResult,\n    thisYearBeforePeriodTotalResult: thisYearBeforePeriodTotalResult,\n    lastYearBeforePeriodResult: lastYearBeforePeriodResult,\n    lastYearBeforePeriodTotalResult: lastYearBeforePeriodTotalResult,\n    beforePeriodNeedHandleResult: beforePeriodNeedHandleResult,\n    thisYearTotalResult: thisYearTotalResult,\n    periodTotalResult: periodTotalResult,\n    rateResult: stageRateResult\n  };\n\n  // 统计项目\n  let projectResult = {\n    periodNewAddedResult:  mergeStageResult([periodNewAddedResult], filterProjectStage),\n    thisYearBeforePeriodResult: mergeStageResult([thisYearBeforePeriodResult], filterProjectStage),\n    thisYearBeforePeriodTotalResult: mergeStageResult([thisYearBeforePeriodTotalResult], filterProjectStage),\n    thisYearTotalResult: mergeStageResult([thisYearTotalResult], filterProjectStage),\n    lastYearBeforePeriodResult: mergeStageResult([lastYearBeforePeriodResult], filterProjectStage),\n    lastYearBeforePeriodTotalResult: mergeStageResult([lastYearBeforePeriodTotalResult], filterProjectStage),\n    beforePeriodNeedHandleResult: mergeStageResult([beforePeriodNeedHandleResult], filterProjectStage),\n    periodTotalResult: mergeStageResult([periodTotalResult], filterProjectStage)\n  };\n  let projectRateResult = {}\n  statisticRate(projectResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, projectRateResult);\n  statisticRate(projectResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, projectRateResult);\n  projectResult.rateResult = projectRateResult;\n\n  let cityResult = {\n    periodNewAddedResult:  mergeProjectResult([projectResult.periodNewAddedResult]),\n    thisYearBeforePeriodResult: mergeProjectResult([projectResult.thisYearBeforePeriodResult]),\n    thisYearBeforePeriodTotalResult: mergeProjectResult([projectResult.thisYearBeforePeriodTotalResult]),\n    thisYearTotalResult: mergeProjectResult([projectResult.thisYearTotalResult]),\n    lastYearBeforePeriodResult: mergeProjectResult([projectResult.lastYearBeforePeriodResult]),\n    lastYearBeforePeriodTotalResult: mergeProjectResult([projectResult.lastYearBeforePeriodTotalResult]),\n    beforePeriodNeedHandleResult: mergeProjectResult([projectResult.beforePeriodNeedHandleResult]),\n    periodTotalResult: mergeProjectResult([projectResult.periodTotalResult])\n  };\n  let cityRateResult = {}\n  statisticCityRate(cityResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, cityRateResult);\n  cityResult.rateResult = cityRateResult;\n\n  let result = {\n    stageResult,\n    projectResult,\n    cityResult\n  };\n  return result;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityData: {\n        periodNewAddedData: [],\n        thisYearBeforePeriodData: [],\n        thisYearBeforePeriodTotalData: [],\n        thisYearTotalData: [],\n        lastYearBeforePeriodData: [],\n        lastYearBeforePeriodTotalData: [],\n        beforePeriodNeedHandleData: [],\n        periodTotalData: [],\n        rateData: [],\n        cities: []\n      },\n      areaData: {\n        periodNewAddedData: [],\n        thisYearBeforePeriodData: [],\n        thisYearBeforePeriodTotalData: [],\n        thisYearTotalData: [],\n        lastYearBeforePeriodData: [],\n        lastYearBeforePeriodTotalData: [],\n        beforePeriodNeedHandleData: [],\n        periodTotalData: [],\n        rateData: []\n      },\n      loading: false\n    };\n  }\n\n  start = (fileList, startDate, endDate) => {\n    this.setState({ loading: true });\n    readExcels(fileList).then((data) => {\n      // clear previous data\n      this.setState({\n        cityData: {\n          periodNewAddedData: [],\n          thisYearBeforePeriodData: [],\n          thisYearBeforePeriodTotalData: [],\n          thisYearTotalData: [],\n          lastYearBeforePeriodData: [],\n          lastYearBeforePeriodTotalData: [],\n          beforePeriodNeedHandleData: [],\n          periodTotalData: [],\n          rateData: [],\n          cities: [],\n          cityOpenData: []\n        },\n        projectData: {},\n        stageResult: {}\n      });\n      let allCities = [];\n      let allCityResult = {};\n      let allProjectResult = {};\n      let allStageResult = {};\n      for (let cityName in data) {\n        allCities.push(cityName);\n        let result = statisticCity(data[cityName], startDate, endDate);\n        allCityResult[cityName] = result.cityResult;\n        for (let table in result.projectResult) {\n          allProjectResult[table] = {\n            ...allProjectResult[table],\n            ...result.projectResult[table]\n          }\n        }\n        for (let table in result.stageResult) {\n          allStageResult[table] = {\n            ...allStageResult[table],\n            ...result.stageResult[table]\n          }\n        }\n      }\n\n      // 统计大区\n      let areaResult = {\n        periodNewAddedResult: initProject(),\n        thisYearBeforePeriodResult: initProject(),\n        thisYearBeforePeriodTotalResult: initProject(),\n        thisYearTotalResult: initProject(),\n        lastYearBeforePeriodResult: initProject(),\n        lastYearBeforePeriodTotalResult: initProject(),\n        beforePeriodNeedHandleResult: initProject(),\n        periodTotalResult: initProject()\n      };\n      // statistic area result\n      for (let table in areaResult) {\n        for (let cityName in allCityResult) {\n          for (let secondCategory in areaResult[table]) {\n            let result = allCityResult[cityName][table][secondCategory];\n            for (let item in result) {\n              if (item === TICKET_CLOSE_PROCESS_TIME) {\n                let ticketCloseCount = result[TICKET_CLOSE];\n                let ticketCloseProcessTime = result[TICKET_CLOSE_PROCESS_TIME];\n                areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n                  ticketCloseCount * ticketCloseProcessTime;\n              } else if (item === TICKET_OPEN_PROCESS_TIME) {\n                let ticketOpenProcessTime = result[TICKET_OPEN_PROCESS_TIME];\n                let ticketOpenCount = result[TICKET_OPEN];\n                areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n                  ticketOpenCount * ticketOpenProcessTime;\n              }\n              else {\n                areaResult[table][secondCategory][item] += result[item];\n              }\n            }\n          }\n        }\n      }\n      // get average process time\n      for (let table in areaResult) {\n        for (let secondCategory in areaResult[table]) {\n          let ticketCloseProcessTime = areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n          let ticketCloseCount = areaResult[table][secondCategory][TICKET_CLOSE];\n          areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n            ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n          let ticketOpenProcessTime = areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME];\n          let ticketOpenCount = areaResult[table][secondCategory][TICKET_OPEN];\n          areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n            ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n        }\n      }\n      let areaRateResult = {}\n      statisticCityRate(areaResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, areaRateResult);\n      statisticCityRate(areaResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, areaRateResult);\n      statisticCityRate(areaResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, areaRateResult);\n      statisticCityRate(areaResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, areaRateResult);\n      statisticCityRate(areaResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, areaRateResult);\n      statisticCityRate(areaResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, areaRateResult);\n      statisticCityRate(areaResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, areaRateResult);\n      areaResult.rateResult = areaRateResult;\n      this.setState({\n        areaData: {\n          periodNewAddedData: formatToAreaTable(areaResult.periodNewAddedResult),\n          thisYearBeforePeriodData: formatToAreaTable(areaResult.thisYearBeforePeriodResult),\n          thisYearBeforePeriodTotalData: formatToAreaTable(areaResult.thisYearBeforePeriodTotalResult),\n          thisYearTotalData: formatToAreaTable(areaResult.thisYearTotalResult),\n          lastYearBeforePeriodData: formatToAreaTable(areaResult.lastYearBeforePeriodResult),\n          lastYearBeforePeriodTotalData: formatToAreaTable(areaResult.lastYearBeforePeriodTotalResult),\n          beforePeriodNeedHandleData: formatToAreaTable(areaResult.beforePeriodNeedHandleResult),\n          periodTotalData: formatToAreaTable(areaResult.periodTotalResult),\n          rateData: formatToAreaTateTable(areaResult.rateResult)\n        }\n      });\n\n      // 统计城市\n      for (let cityName in allCityResult) {\n        this.setState((state) => ({\n          cityData: {\n            periodNewAddedData:  [...state.cityData.periodNewAddedData,\n              ...formatCityData(allCityResult[cityName].periodNewAddedResult, cityName)],\n            thisYearBeforePeriodData: [...state.cityData.thisYearBeforePeriodData,\n              ...formatCityData(allCityResult[cityName].thisYearBeforePeriodResult, cityName)],\n            thisYearBeforePeriodTotalData: [...state.cityData.thisYearBeforePeriodTotalData,\n              ...formatCityData(allCityResult[cityName].thisYearBeforePeriodTotalResult, cityName)],\n            thisYearTotalData: [...state.cityData.thisYearTotalData,\n              ...formatCityData(allCityResult[cityName].thisYearTotalResult, cityName)],\n            lastYearBeforePeriodData: [...state.cityData.lastYearBeforePeriodData,\n              ...formatCityData(allCityResult[cityName].lastYearBeforePeriodResult, cityName)],\n            lastYearBeforePeriodTotalData: [...state.cityData.lastYearBeforePeriodTotalData,\n              ...formatCityData(allCityResult[cityName].lastYearBeforePeriodTotalResult, cityName)],\n            beforePeriodNeedHandleData: [...state.cityData.beforePeriodNeedHandleData,\n              ...formatCityData(allCityResult[cityName].beforePeriodNeedHandleResult, cityName)],\n            periodTotalData: [...state.cityData.periodTotalData,\n              ...formatCityData(allCityResult[cityName].periodTotalResult, cityName)],\n            rateData: [...state.cityData.rateData,\n              ...formatToCityRateTable(allCityResult[cityName].rateResult, cityName)],\n            cities: [...state.cityData.cities, cityName]\n          }\n        }));\n      }\n\n      // 统计项目\n      this.setState({\n        projectData: allProjectResult\n      });\n\n      // 统计分期\n      this.setState( {\n        stageData: allStageResult\n      });\n\n      // 画图\n      // 截至本年度统计周期受理累计\n      let cityTotalAcceptData = [];\n      // 城市总体关闭率\n      let cityOverallCloseRateData = [];\n      // 城市剩余未关\n      let cityOpenData = [];\n      // 城市新增受理\n      let cityNewAddedAcceptData = [];\n      // 城市新增关闭率\n      let cityNewAddedCloseRateData = [];\n      // 城市已关平均处理时长\n      let cityCloseAverageHandleTimeData = [];\n      // 城市剩余未关平均处理时长\n      let cityOpenAverageHandleTimeData = [];\n      for (let cityName in allCityResult) {\n        cityTotalAcceptData = [\n          ...cityTotalAcceptData,\n          {\n            name: cityName,\n            value: allCityResult[cityName].periodTotalResult[KEY_TICKET_TOTAL][TICKET_ACCEPT] \n          }\n        ];\n        cityOverallCloseRateData = [\n          ...cityOverallCloseRateData,\n          {\n            name: cityName,\n            value: allCityResult[cityName].rateResult[KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n          }\n        ];\n        cityOpenData = [\n          ...cityOpenData,\n          { \n            name: cityName,\n            value: allCityResult[cityName].periodTotalResult[KEY_TICKET_TOTAL][TICKET_OPEN] \n          }\n        ];\n\n        cityNewAddedAcceptData = [\n          ...cityNewAddedAcceptData, {\n            name: cityName,\n            value: allCityResult[cityName].periodNewAddedResult[KEY_TICKET_TOTAL][TICKET_ACCEPT]\n          }\n        ];\n        cityNewAddedCloseRateData = [\n          ...cityNewAddedCloseRateData, {\n            name: cityName,\n            value: allCityResult[cityName].rateResult[KEY_TICKET_TOTAL][NEW_ADD_CLOSE_RATE]\n          }\n        ];\n        cityCloseAverageHandleTimeData = [\n          ...cityCloseAverageHandleTimeData,\n          {\n            name: cityName,\n            value: allCityResult[cityName].periodNewAddedResult[KEY_TICKET_TOTAL][TICKET_CLOSE_PROCESS_TIME]\n          }\n        ];\n        cityOpenAverageHandleTimeData = [\n          ...cityOpenAverageHandleTimeData,\n          {\n            name: cityName,\n            value:  allCityResult[cityName].beforePeriodNeedHandleResult[KEY_TICKET_TOTAL][TICKET_OPEN_PROCESS_TIME]\n          }\n        ];\n      }\n      this.setState({\n        cityTotalAcceptData,\n        cityOverallCloseRateData,\n        cityOpenData,\n        cityNewAddedAcceptData,\n        cityNewAddedCloseRateData,\n        cityCloseAverageHandleTimeData,\n        cityOpenAverageHandleTimeData\n      });\n\n      // 二级分类剩余未关\n      let secondCategoryOpenData = [];\n      // 二级分类新增受理\n      let secondCategoryNewAddedAcceptData = [];\n      // 二级分类已关闭平均处理时长\n      let secondCategoryCloseAverageHandleTimeData = [];\n      // 二级分类剩余未关平均处理时长\n      let secondCategoryOpenAverageHandleTimeData = [];\n      for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n        secondCategoryOpenData = [...secondCategoryOpenData, {\n          name: secondCategory,\n          value: areaResult.periodTotalResult[secondCategory][TICKET_OPEN]\n        }];\n        secondCategoryNewAddedAcceptData = [\n          ...secondCategoryNewAddedAcceptData,\n          {\n            name: secondCategory,\n            value: areaResult.periodNewAddedResult[secondCategory][TICKET_ACCEPT]\n          }\n        ];\n        secondCategoryCloseAverageHandleTimeData = [\n          ...secondCategoryCloseAverageHandleTimeData,\n          {\n            name: secondCategory,\n            value: areaResult.periodNewAddedResult[secondCategory][TICKET_CLOSE_PROCESS_TIME]\n          }\n        ];\n        secondCategoryOpenAverageHandleTimeData = [\n          ...secondCategoryOpenAverageHandleTimeData,\n          {\n            name: secondCategory,\n            value: areaResult.periodNewAddedResult[secondCategory][TICKET_OPEN_PROCESS_TIME]\n          }\n        ]\n      }\n      this.setState({\n        secondCategoryOpenData,\n        secondCategoryNewAddedAcceptData,\n        secondCategoryCloseAverageHandleTimeData,\n        secondCategoryOpenAverageHandleTimeData\n      });\n\n      // 项目受理累计和关闭率\n      let projectTotalAcceptData = [];\n      let projectOverallCloseRateData = [];\n      let projects = [];\n      for (let projectName in allProjectResult.periodTotalResult) {\n        projects = [...projects, projectName];\n        let ticketAccept = allProjectResult.periodTotalResult[projectName][KEY_TICKET_TOTAL][TICKET_ACCEPT];\n        projectTotalAcceptData = [\n          ...projectTotalAcceptData,\n          { name: projectName, value: ticketAccept }\n        ];\n        projectOverallCloseRateData = [\n          ...projectOverallCloseRateData,\n          {\n            name: projectName,\n            value: allProjectResult.rateResult[projectName][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n          }\n        ];\n      }\n\n      this.setState({\n        projectTotalAcceptData,\n        projectOverallCloseRateData,\n        projects\n      });\n\n      // 项目分期累计和关闭率\n      let stageTotalAcceptData = [];\n      let stageOverallCloseRateData = [];\n      let stages = [];\n      for (let stageName in allStageResult.periodTotalResult) {\n        stages = [...stages, stageName];\n        let ticketAccept = allStageResult.periodTotalResult[stageName][KEY_TICKET_TOTAL][TICKET_ACCEPT];\n        stageTotalAcceptData = [\n          ...stageTotalAcceptData,\n          { name: stageName, value: ticketAccept }\n        ];\n        stageOverallCloseRateData = [\n          ...stageOverallCloseRateData,\n          {\n            name: stageName,\n            value: allStageResult.rateResult[stageName][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n          }\n        ];\n      }\n\n      this.setState({\n        stageTotalAcceptData,\n        stageOverallCloseRateData,\n        stages\n      });\n\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  exportExcel = () => {\n    let header = [KEY_PROJECT_NAME, KEY_STATISTIC_ITEM, ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL];\n    if (this.state.newAddedData.length > 0 || this.state.thisYearBeforeStartData.length > 0 ||\n      this.state.thisYearBeforePeriodTotalData.length > 0 || this.state.thisYearTotalData.length > 0 ||\n      this.state.lastYearBeforePeriodData.length > 0 ||\n      this.state.lastYearBeforePeriodTotalData.length > 0 ||\n      this.state.beforePeriodNeedHandleData.length > 0 ||\n      this.state.periodTotalData.length > 0) {\n      let sheet1 = XLSX.utils.json_to_sheet(this.state.periodNewAddedData, {\n        header: header\n      });\n      let sheet2 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodData, {\n        header: header\n      });\n      let sheet3 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodTotalData, {\n        header: header\n      });\n      let sheet4 = XLSX.utils.json_to_sheet(this.state.thisYearTotalData, {\n        header: header\n      });\n      let sheet5 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodData, {\n        header: header\n      });\n      let sheet6 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodTotalData, {\n        header: header\n      });\n      let sheet7 = XLSX.utils.json_to_sheet(this.state.beforePeriodNeedHandleData, {\n        header: header\n      });\n      let sheet8 = XLSX.utils.json_to_sheet(this.state.periodTotalData, {\n        header: header\n      });\n      let sheet9 = XLSX.utils.json_to_sheet(this.state.rateData, {\n        header: header\n      });\n      let workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, sheet1, STATISTIC_PERIOD_ADD);\n      XLSX.utils.book_append_sheet(workbook, sheet2, STATISTIC_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet3, STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet4, STATISTIC_THIS_YEAR_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet5, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet6, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet7, STATISTIC_BEFORE_PERIOD_NEED_HANDLE);\n      XLSX.utils.book_append_sheet(workbook, sheet8, STATISTIC_BEFORE_PERIOD_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet9, STATISTIC_PERIOD_RATE)\n      XLSX.writeFile(workbook, 'statistic-' + moment(Date.now()).format('YYYY-MM-DD-HH-MM-SS') + '.xlsx')\n    } else {\n      message.error('请先点击“开始统计”按钮进行统计！');\n    }\n  }\n\n  render() {\n    const tabChart = (\n      <ChartView\n        cityTotalAcceptData={this.state.cityTotalAcceptData}\n        cityOverallCloseRateData={this.state.cityOverallCloseRateData}\n        projectTotalAcceptData={this.state.projectTotalAcceptData}\n        projectOverallCloseRateData={this.state.projectOverallCloseRateData}\n        stageTotalAcceptData={this.state.stageTotalAcceptData}\n        stageOverallCloseRateData={this.state.stageOverallCloseRateData}\n        cityOpenData={this.state.cityOpenData}\n        secondCategoryOpenData={this.state.secondCategoryOpenData}\n        cityNewAddedAcceptData={this.state.cityNewAddedAcceptData}\n        cityNewAddedCloseRateData={this.state.cityNewAddedCloseRateData}\n        secondCategoryNewAddedAcceptData={this.state.secondCategoryNewAddedAcceptData}\n        cityCloseAverageHandleTimeData={this.state.cityCloseAverageHandleTimeData}\n        cityOpenAverageHandleTimeData={this.state.cityOpenAverageHandleTimeData}\n        secondCategoryCloseAverageHandleTimeData={this.state.secondCategoryCloseAverageHandleTimeData}\n        secondCategoryOpenAverageHandleTimeData={this.state.secondCategoryOpenAverageHandleTimeData}\n        cities={this.state.cityData.cities}\n        projects={this.state.projects}\n        stages={this.state.stages}\n      />\n    );\n\n    const tabArea = (\n      <AreaView\n        periodNewAddedData={this.state.areaData.periodNewAddedData}\n        thisYearBeforePeriodData={this.state.areaData.thisYearBeforePeriodData}\n        thisYearBeforePeriodTotalData={this.state.areaData.thisYearBeforePeriodTotalData}\n        thisYearTotalData={this.state.areaData.thisYearTotalData}\n        lastYearBeforePeriodData={this.state.areaData.lastYearBeforePeriodData}\n        lastYearBeforePeriodTotalData={this.state.areaData.lastYearBeforePeriodTotalData}\n        beforePeriodNeedHandleData={this.state.areaData.beforePeriodNeedHandleData}\n        periodTotalData={this.state.areaData.periodTotalData}\n        rateData={this.state.areaData.rateData}\n      />\n    );\n\n    const tabCity = (\n      <CityView\n        periodNewAddedData={this.state.cityData.periodNewAddedData}\n        thisYearBeforePeriodData={this.state.cityData.thisYearBeforePeriodData}\n        thisYearBeforePeriodTotalData={this.state.cityData.thisYearBeforePeriodTotalData}\n        thisYearTotalData={this.state.cityData.thisYearTotalData}\n        lastYearBeforePeriodData={this.state.cityData.lastYearBeforePeriodData}\n        lastYearBeforePeriodTotalData={this.state.cityData.lastYearBeforePeriodTotalData}\n        beforePeriodNeedHandleData={this.state.cityData.beforePeriodNeedHandleData}\n        periodTotalData={this.state.cityData.periodTotalData}\n        rateData={this.state.cityData.rateData}\n        cities={this.state.cityData.cities}\n        cityOpenData={this.state.cityData.cityOpenData}\n        secondCategoryOpenData={this.state.secondCategoryOpenData}\n      />\n    );\n\n    const tabProject = (\n      <ProjectView\n        data={this.state.projectData}\n      />\n    );\n\n    const tabStage = (\n      <ProjectView\n        data={this.state.stageData}\n      />\n    );\n \n    return (\n      <LocaleProvider locale={zh_CN}>\n        <div>\n          <h2 className=\"text--center heading\">统计辅助工具</h2>\n          <DataForm\n            onStart={this.start}\n            onExport={this.exportExcel}\n            loading={this.state.loading}\n          />\n          <Row style={{ margin: '40px 0' }}>\n            <Col span={22} offset={1}>\n              <Tabs type=\"card\">\n                <Tabs.TabPane tab=\"统计图\" key=\"统计图\">{tabChart}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"大区\" key=\"大区\">{tabArea}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"城市\" key=\"城市\">{tabCity}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"项目\" key=\"项目\">{tabProject}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"分期\" key=\"分期\">{tabStage}</Tabs.TabPane>\n              </Tabs>\n            </Col>\n          </Row>\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}