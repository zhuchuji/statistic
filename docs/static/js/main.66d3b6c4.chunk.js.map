{"version":3,"sources":["components/DataForm.js","constants.js","components/CityTable.js","components/CityView.js","components/ProjectTable.js","utils.js","components/ProjectView.js","App.js","serviceWorker.js","index.js"],"names":["DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startDate","Date","set","hour","minute","second","endDate","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","toConsumableArray","concat","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","style","margin","onExport","React","Component","defaultPorps","WrapDataForm","create","TICKET_SYSTEM_COUNT","TICKET_ACCEPT","TICKET_OPEN","TICKET_VALIDATE","TICKET_PAUSE","TICKET_INVALID","TICKET_CLOSE","TICKET_CLOSE_NORMAL","TICKET_CLOSE_ABNORMAL","TICKET_CLOSE_ON_TIME","TICKET_RESPONSE_IN_30_MIN","TICKET_RESPONSE_IN_30_HOUR","TICKET_CLOSE_PROCESS_TIME","TICKET_OPEN_PROCESS_TIME","DEFAULT_STATISTIC_ITEMS","KEY_REPORT_TIME","KEY_PROJECT_NAME","KEY_SECOND_CATEGORY","KEY_TICKET_STATUS","KEY_IS_PROCESS_EXCCED","KEY_FIRST_RESPONSE_TIME","KEY_PROCESS_TIME","KEY_CLOSE_TIME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","KEY_CITY_NAME","DEFAULT_SECOND_CATEGORIES","NEW_ADD_CLOSE_RATE","REMAIN_CLOSE_RATE","OVERALL_CLOSE_RATE","RESPONSE_IN_30_MIN_RATE","RESPONSE_IN_30_HOUR_RATE","CLOSE_ON_TIME_RATE","TOTAL_OVERALL_CLOSE_RATE","RATE_STATISTIC_ITEMS","STATISTIC_PERIOD_ADD","STATISTIC_BEFORE_PERIOD_REMAIN","STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_THIS_YEAR_TOTAL","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_BEFORE_PERIOD_NEED_HANDLE","STATISTIC_BEFORE_PERIOD_TOTAL","STATISTIC_PERIOD_RATE","STAGES","CityTable","cityColumn","table","Column","dataIndex","title","key","width","otherColumns","map","item","currentPageData","dataSource","filteredCities","length","data","filter","pagination","pageSize","scroll","y","size","defaultProps","CityView","filterCities","es_select","mode","onChange","cities","city","Option","components_CityTable","periodNewAddedData","thisYearBeforePeriodData","thisYearBeforePeriodTotalData","thisYearTotalData","lastYearBeforePeriodData","lastYearBeforePeriodTotalData","beforePeriodNeedHandleData","periodTotalData","rateData","ProjectTable","projectColumn","filteredProjects","filterProjectName","projectName","sub","match","substring","parseTime","timeString","time","day","min","window","parseInt","filterProjectStage","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","stage","return","formatToTable","tableData","rowKey","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","statisticItem","rowData","_arr","_i","secondCategory","push","formatToRateTable","_arr2","_i2","_arr3","_i3","ProjectView","filterCity","projectData","projects","project","filterProjects","components_ProjectTable","TICKET_STATUS_IN_PROGRESS","TICKET_STATUS_PAUSE","TICKET_STATUS_VALIDATE","TICKET_STATUS_CLOSE","TICKET_STATUS_ABNORMAL_CLOSE","TICKET_STATUS_INVALID","NO","initProjectRate","itemName","initProject","isInProgress","ticketStatus","statisticRate","statisticMap","rateMap","toFixed","statisticCityRate","_arr4","_i4","globalRowKey","formatCityData","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","_arr5","_i5","formatToCityRateTable","_arr6","_i6","_arr7","_i7","mergeStageResult","resultArray","filterFunc","mergeResult","forEach","result","filteredProjectName","_arr8","_i8","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","ticketCloseCount","ticketCloseProcessTime","ticketOpenProcessTime","ticketOpenCount","Number","mergeProjectResult","_arr9","_i9","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","statisticCity","periodNewAddedResult","closeTimeStart","closeTimeEnd","dataMap","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","ticket","ticketStatistic","ticketCloseTime","moment","_parseTime","_parseTime2","_parseTime3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","statistic","reportTime","yearStartDate","month","date","thisYearbeforePeriodTickets","thisYearBeforePeriodResult","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_parseTime4","_parseTime5","_parseTime6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","statisticThisYearBeforePeriodTickets","thisYearBeforePeriodTotalResult","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","statisticThisYearBeforeStartDateTotalTickets","thisYearTotalResult","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_parseTime13","_parseTime14","_parseTime15","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","statisticThisYearTotalTickets","lastYearBeforePeriodTickets","lastYearBeforePeriodResult","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_parseTime7","_parseTime8","_parseTime9","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","statisticLastYearBeforePeriodTickets","lastYearBeforePeriodTotalResult","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","_parseTime10","_parseTime11","_parseTime12","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","statisticLastYearBeforePeriodTotalTickets","beforePeriodNeedHandleResult","_arr10","_i10","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","periodTotalResult","_arr11","_i11","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","stageRateResult","stageResult","rateResult","projectResult","projectRateResult","cityResult","cityRateResult","App","start","fileReader","FileReader","readFile","onload","event","workbook","XLSX","read","target","sheet","Sheets","SheetNames","cityName","name","utils","sheet_to_json","blankrows","readAsBinaryString","readExcels","cityData","allCities","_loop","objectSpread","defineProperty","exportExcel","header","newAddedData","thisYearBeforeStartData","sheet1","json_to_sheet","sheet2","sheet3","sheet4","sheet5","sheet6","sheet7","sheet8","sheet9","book_new","book_append_sheet","writeFile","now","format","error","tabCity","components_CityView","tabProject","components_ProjectView","locale_provider","locale","zh_CN","className","components_DataForm","tabs","TabPane","tab","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66d3b6c4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {},\n    onExport: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func,\n    onExport: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startDate = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endDate = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startDate, endDate);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              { \n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }   \n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在统计...': '开始统计'\n              }\n            </Button>\n            <Button style={{ margin: '0 20px' }} onClick={this.props.onExport}>导出Excel表格</Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '判定无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关平均处理时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '剩余未关平均处理时长（天）';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\nexport const KEY_CITY_NAME = '城市';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const NEW_ADD_CLOSE_RATE = '新增关闭率';\r\nexport const REMAIN_CLOSE_RATE = '遗留关闭率';\r\nexport const OVERALL_CLOSE_RATE = '总体关闭率';\r\nexport const RESPONSE_IN_30_MIN_RATE = '响应及时率（0.5h）'\r\nexport const RESPONSE_IN_30_HOUR_RATE = '响应及时率（30h）';\r\nexport const CLOSE_ON_TIME_RATE = '及时关闭率';\r\nexport const TOTAL_OVERALL_CLOSE_RATE = '累计总体关闭率';\r\n\r\nexport const RATE_STATISTIC_ITEMS = [\r\n  REMAIN_CLOSE_RATE,\r\n  NEW_ADD_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_RATE = '本年度统计周期内';\r\n\r\nexport const STAGES = [\r\n  '一期',\r\n  '二期',\r\n  '三期',\r\n  '四期',\r\n  '五期',\r\n  '六期',\r\n  '七期',\r\n  '八期',\r\n  '九期',\r\n  '十期'\r\n];","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_CITY_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction CityTable(props) {\r\n  const cityColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_CITY_NAME}\r\n      title={KEY_CITY_NAME}\r\n      key={KEY_CITY_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredCities.length > 0 ?\r\n        props.data.filter(item => props.filteredCities.indexOf(item[KEY_CITY_NAME]) != -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {cityColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nCityTable.defaultProps = {\r\n  filteredCities: []\r\n}\r\n\r\nexport default CityTable;\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport CityTable from './CityTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass CityView extends React.Component {\r\n  static defaultProps = {\r\n    cities: []\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredCities: []\r\n    }\r\n  }\r\n\r\n  filterCities = (filteredCities) => {\r\n    if (filteredCities != null && filteredCities.length > 0) {\r\n      this.setState({\r\n        filteredCities: filteredCities\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredCities: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的城市'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterCities}\r\n                >\r\n                  {\r\n                    this.props.cities.map((city) => (\r\n                      <Select.Option key={city}>{city}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={this.props.periodNewAddedData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.thisYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.thisYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={this.props.thisYearTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.lastYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.lastYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={this.props.beforePeriodNeedHandleData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={this.props.periodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={this.props.rateData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CityView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ProjectTable(props) {\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title={KEY_PROJECT_NAME}\r\n      key={KEY_PROJECT_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredProjects.length > 0 ?\r\n        props.data.filter(item => props.filteredProjects.indexOf(item[KEY_PROJECT_NAME]) != -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nProjectTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ProjectTable;\r\n","import {\r\n  DEFAULT_STATISTIC_ITEMS,\r\n  KEY_TICKET_TOTAL,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  STAGES,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES\r\n} from './constants';\r\n\r\nexport function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|（.*?）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}\r\n\r\nexport function filterProject(projectName, reg) {\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function filterProjectStage(projectName) {\r\n  let filteredName = null;\r\n  for (let stage of STAGES) {\r\n    if (projectName.indexOf(stage) != -1) {\r\n      filteredName = projectName.substring(0, projectName.indexOf(stage));\r\n      return filteredName;\r\n    }\r\n  }\r\n  return projectName;\r\n}\r\n\r\nexport function formatToTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let projectName in data) {\r\n    for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = projectName;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToRateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let projectName in data) {\r\n    for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n      RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = projectName;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport ProjectTable from './ProjectTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\nimport {\r\n  formatToTable,\r\n  formatToRateTable\r\n} from '../utils';\r\n\r\nclass ProjectView extends React.Component {\r\n  static defaultProps = {\r\n    cities: [],\r\n    projectData: {}\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      projects: [],\r\n      data: {}\r\n    }\r\n  }\r\n\r\n  filterCity = (city) => {\r\n    if (this.props.projectData[city] != null) {\r\n      this.setState({\r\n        data: this.props.projectData[city]\r\n      });\r\n      let projects = [];\r\n      for (let item in this.props.projectData[city]) {\r\n        for (let project in this.props.projectData[city][item]) {\r\n          projects = [...projects, project];\r\n        }\r\n      }\r\n      this.setState({\r\n        projects: projects\r\n      });\r\n    }\r\n  }\r\n\r\n  filterProjects = (projects) => {\r\n    if (projects.length > 0) {\r\n      this.setState({\r\n        filteredProjects: projects\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredProjects: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要显示的城市'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterCity}\r\n                >\r\n                  {\r\n                    this.props.cities.map((city) => (\r\n                      <Select.Option key={city}>{city}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的项目'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterProjects}\r\n                >\r\n                  {\r\n                    this.state.projects.map((project) => (\r\n                      <Select.Option key={project}>{project}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={formatToTable(this.state.data.periodNewAddedData)}\r\n              filteredProjects={[]}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.state.data.thisYearBeforePeriodData)}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.state.data.thisYearBeforePeriodTotalData)}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={formatToTable(this.state.data.thisYearTotalData)}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.state.data.lastYearBeforePeriodData)}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.state.data.lastYearBeforePeriodTotalData)}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={formatToTable(this.state.data.beforePeriodNeedHandleData)}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={formatToTable(this.state.data.periodTotalData)}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={formatToRateTable(this.state.data.rateData)}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectView;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport DataForm from './components/DataForm';\nimport CityView from './components/CityView';\nimport ProjectView from './components/ProjectView';\nimport XLSX from 'xlsx';\nimport { Row, Col, message, LocaleProvider, Select, Tabs, Form } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  TICKET_SYSTEM_COUNT,\n  TICKET_ACCEPT,\n  TICKET_OPEN,\n  TICKET_VALIDATE,\n  TICKET_PAUSE,\n  TICKET_INVALID,\n  TICKET_CLOSE,\n  TICKET_CLOSE_NORMAL,\n  TICKET_CLOSE_ABNORMAL,\n  TICKET_CLOSE_ON_TIME,\n  TICKET_RESPONSE_IN_30_MIN,\n  TICKET_RESPONSE_IN_30_HOUR,\n  TICKET_CLOSE_PROCESS_TIME,\n  TICKET_OPEN_PROCESS_TIME,\n  DEFAULT_STATISTIC_ITEMS,\n  KEY_REPORT_TIME,\n  KEY_PROJECT_NAME,\n  KEY_SECOND_CATEGORY,\n  KEY_TICKET_STATUS,\n  KEY_IS_PROCESS_EXCCED,\n  KEY_FIRST_RESPONSE_TIME,\n  KEY_PROCESS_TIME,\n  KEY_CLOSE_TIME,\n  DEFAULT_SECOND_CATEGORIES,\n  KEY_STATISTIC_ITEM,\n  KEY_TICKET_TOTAL,\n  KEY_CITY_NAME,\n  STATISTIC_PERIOD_ADD,\n  STATISTIC_BEFORE_PERIOD_REMAIN,\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_THIS_YEAR_TOTAL,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\n  STATISTIC_BEFORE_PERIOD_TOTAL,\n  STATISTIC_PERIOD_RATE,\n  STAGES,\n  NEW_ADD_CLOSE_RATE,\n  REMAIN_CLOSE_RATE,\n  OVERALL_CLOSE_RATE,\n  RESPONSE_IN_30_MIN_RATE,\n  RESPONSE_IN_30_HOUR_RATE,\n  CLOSE_ON_TIME_RATE,\n  TOTAL_OVERALL_CLOSE_RATE,\n  RATE_STATISTIC_ITEMS\n} from './constants';\n\nimport {\n  filterProjectName,\n  parseTime,\n  filterProjectStage\n} from './utils';\n\n// ticket status\nconst TICKET_STATUS_IN_PROGRESS = '处理中';\nconst TICKET_STATUS_PAUSE = '暂停处理';\nconst TICKET_STATUS_VALIDATE = '待复验';\nconst TICKET_STATUS_CLOSE = '已关闭';\nconst TICKET_STATUS_ABNORMAL_CLOSE = '非正常关闭';\nconst TICKET_STATUS_INVALID = '判定无效';\n\nconst IN_PROGRESS_TICKET_TOTAL_HANDLE_TIME = '未关闭处理时长总数';\n\nconst YES = '是';\nconst NO = '否';\n\nfunction initProjectRate() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of RATE_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction initProject() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of DEFAULT_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction isInProgress(ticketStatus) {\n  return ticketStatus.indexOf(TICKET_STATUS_IN_PROGRESS) === 0;\n}\n\n// 统计周期内新增\nfunction statistic(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 统计周期前遗留\nfunction statisticThisYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 本年度统计周期前遗留累计\nfunction statisticThisYearBeforeStartDateTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n  }\n\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticThisYearTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if (((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) &&\n      ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticRate(statisticMap, statisticItem, rateMap) {\n  for (let projectName in statisticMap) {\n    if (rateMap[projectName] == null) {\n      rateMap[projectName] = initProjectRate();\n    }\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      if (statisticItem === NEW_ADD_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === REMAIN_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE_ON_TIME] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      }\n    }\n  }\n}\n\nfunction statisticCityRate(statisticMap, statisticItem, rateMap) {\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    if ( rateMap[secondCategory] == null) {\n      rateMap[secondCategory] = {};\n    }\n    if (statisticItem === NEW_ADD_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === REMAIN_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE_ON_TIME] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    }\n  }\n}\n\nfunction readExcels(fileList) {\n  return new Promise((resolve, reject) => {\n    let fileReader = new FileReader();\n    let data = {};\n\n    let readFile = (index) => {\n      if (index < fileList.length) {\n        fileReader.onload = (event) => {\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\n          let cityName = fileList[index].name.substring(0, fileList[index].name.indexOf('.'));\n          data[cityName] = XLSX.utils.sheet_to_json(sheet, { blankrows: false });\n          readFile(index + 1);\n        }\n        fileReader.readAsBinaryString(fileList[index]);\n      } else {\n        resolve(data);\n      }\n    };\n    readFile(0);\n  });\n}\n\nlet globalRowKey = 0;\n\nfunction formatCityData(data, city) {\n  let tableData = [];\n  for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction formatToCityRateTable(data, city) {\n  let tableData = [];\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction mergeStageResult(resultArray, filterFunc) {\n  let mergeResult = {};\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      let filteredProjectName = filterFunc(projectName);\n      if (mergeResult[filteredProjectName] == null) {\n        mergeResult[filteredProjectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[filteredProjectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[filteredProjectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[filteredProjectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in mergeResult) {\n    for (let secondCategory in mergeResult[projectName]) {\n      let ticketCloseProcessTime = mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = mergeResult[projectName][secondCategory][TICKET_CLOSE];\n      mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = mergeResult[projectName][secondCategory][TICKET_OPEN];\n      mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return mergeResult;\n}\n\nfunction mergeProjectResult(resultArray) {\n  let mergeResult = initProject();\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let secondCategory in mergeResult) {\n    let ticketCloseProcessTime = mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME];\n    let ticketCloseCount = mergeResult[secondCategory][TICKET_CLOSE];\n    mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n      ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n    let ticketOpenProcessTime = mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME];\n    let ticketOpenCount = mergeResult[secondCategory][TICKET_OPEN];\n    mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] =\n      ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n  }\n\n  return mergeResult;\n}\n\nfunction statisticCity(data, startDate, endDate) {\n  // 统计分期\n  let periodNewAddedTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime >= startDate && reportTime <= endDate;\n  });\n  let periodNewAddedResult = statistic(periodNewAddedTickets, startDate, endDate);\n\n  let yearStartDate = moment(startDate).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n  let thisYearbeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < startDate && reportTime >= yearStartDate;\n  });\n\n  let thisYearBeforePeriodResult = statisticThisYearBeforePeriodTickets(thisYearbeforePeriodTickets,\n    startDate, endDate);\n\n  let thisYearBeforePeriodTotalResult = statisticThisYearBeforeStartDateTotalTickets(\n    thisYearbeforePeriodTickets, yearStartDate, endDate);\n\n  let thisYearTotalTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime <= endDate && reportTime >= yearStartDate;\n  });\n  let thisYearTotalResult = statisticThisYearTotalTickets(thisYearTotalTickets,\n    yearStartDate, endDate);\n\n  let lastYearBeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < yearStartDate;\n  });\n  let lastYearBeforePeriodResult = statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\n    startDate, endDate);\n  \n  let lastYearBeforePeriodTotalResult = statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\n    yearStartDate, endDate);\n\n  let beforePeriodNeedHandleResult = {};\n  [periodNewAddedResult, thisYearBeforePeriodResult, lastYearBeforePeriodResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (beforePeriodNeedHandleResult[projectName] == null) {\n        beforePeriodNeedHandleResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            beforePeriodNeedHandleResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in beforePeriodNeedHandleResult) {\n    for (let secondCategory in beforePeriodNeedHandleResult[projectName]) {\n      let ticketCloseProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let periodTotalResult = {};\n  [lastYearBeforePeriodTotalResult, thisYearTotalResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (periodTotalResult[projectName] == null) {\n        periodTotalResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            periodTotalResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in periodTotalResult) {\n    for (let secondCategory in periodTotalResult[projectName]) {\n      let ticketCloseProcessTime = periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = periodTotalResult[projectName][secondCategory][TICKET_CLOSE];\n      periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = periodTotalResult[projectName][secondCategory][TICKET_OPEN];\n      periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let stageRateResult = {};\n  statisticRate(periodNewAddedResult, NEW_ADD_CLOSE_RATE, stageRateResult);\n  statisticRate(thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, stageRateResult);\n  statisticRate(periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, stageRateResult);\n  \n  let stageResult = {\n    periodNewAddedResult: periodNewAddedResult,\n    thisYearBeforePeriodResult: thisYearBeforePeriodResult,\n    thisYearBeforePeriodTotalResult: thisYearBeforePeriodTotalResult,\n    lastYearBeforePeriodResult: lastYearBeforePeriodResult,\n    lastYearBeforePeriodTotalResult: lastYearBeforePeriodTotalResult,\n    beforePeriodNeedHandleResult: beforePeriodNeedHandleResult,\n    thisYearTotalResult: thisYearTotalResult,\n    periodTotalResult: periodTotalResult,\n    rateResult: stageRateResult\n  };\n\n  // 统计项目\n  let projectResult = {\n    periodNewAddedResult:  mergeStageResult([periodNewAddedResult], filterProjectStage),\n    thisYearBeforePeriodResult: mergeStageResult([thisYearBeforePeriodResult], filterProjectStage),\n    thisYearBeforePeriodTotalResult: mergeStageResult([thisYearBeforePeriodTotalResult], filterProjectStage),\n    thisYearTotalResult: mergeStageResult([thisYearTotalResult], filterProjectStage),\n    lastYearBeforePeriodResult: mergeStageResult([lastYearBeforePeriodResult], filterProjectStage),\n    lastYearBeforePeriodTotalResult: mergeStageResult([lastYearBeforePeriodTotalResult], filterProjectStage),\n    beforePeriodNeedHandleResult: mergeStageResult([beforePeriodNeedHandleResult], filterProjectStage),\n    periodTotalResult: mergeStageResult([periodTotalResult], filterProjectStage)\n  };\n  let projectRateResult = {}\n  statisticRate(projectResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, projectRateResult);\n  statisticRate(projectResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, projectRateResult);\n  projectResult.rateResult = projectRateResult;\n\n  let cityResult = {\n    periodNewAddedResult:  mergeProjectResult([projectResult.periodNewAddedResult]),\n    thisYearBeforePeriodResult: mergeProjectResult([projectResult.thisYearBeforePeriodResult]),\n    thisYearBeforePeriodTotalResult: mergeProjectResult([projectResult.thisYearBeforePeriodTotalResult]),\n    thisYearTotalResult: mergeProjectResult([projectResult.thisYearTotalResult]),\n    lastYearBeforePeriodResult: mergeProjectResult([projectResult.lastYearBeforePeriodResult]),\n    lastYearBeforePeriodTotalResult: mergeProjectResult([projectResult.lastYearBeforePeriodTotalResult]),\n    beforePeriodNeedHandleResult: mergeProjectResult([projectResult.beforePeriodNeedHandleResult]),\n    periodTotalResult: mergeProjectResult([projectResult.periodTotalResult])\n  };\n  let cityRateResult = {}\n  statisticCityRate(cityResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, cityRateResult);\n  cityResult.rateResult = cityRateResult;\n\n  let result = {\n    stageResult,\n    projectResult,\n    cityResult\n  };\n  return result;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityData: {\n        periodNewAddedData: [],\n        thisYearBeforePeriodData: [],\n        thisYearBeforePeriodTotalData: [],\n        thisYearTotalData: [],\n        lastYearBeforePeriodData: [],\n        lastYearBeforePeriodTotalData: [],\n        beforePeriodNeedHandleData: [],\n        periodTotalData: [],\n        rateData: [],\n        cities: []\n      },\n      loading: false\n    };\n  }\n\n  start = (fileList, startDate, endDate) => {\n    this.setState({ loading: true });\n    readExcels(fileList).then((data) => {\n      // clear previous data\n      this.setState({\n        cityData: {\n          periodNewAddedData: [],\n          thisYearBeforePeriodData: [],\n          thisYearBeforePeriodTotalData: [],\n          thisYearTotalData: [],\n          lastYearBeforePeriodData: [],\n          lastYearBeforePeriodTotalData: [],\n          beforePeriodNeedHandleData: [],\n          periodTotalData: [],\n          rateData: [],\n          cities: []\n        }\n      });\n      this.setState({\n        projectData: {}\n      });\n      let allCities = [];\n      for (let cityName in data) {\n        allCities.push(cityName);\n        let result = statisticCity(data[cityName], startDate, endDate);\n        this.setState((state) => ({\n          cityData: {\n            periodNewAddedData:  [...state.cityData.periodNewAddedData, ...formatCityData(result.cityResult.periodNewAddedResult, cityName)],\n            thisYearBeforePeriodData: [...state.cityData.thisYearBeforePeriodData, ...formatCityData(result.cityResult.thisYearBeforePeriodResult, cityName)],\n            thisYearBeforePeriodTotalData: [...state.cityData.thisYearBeforePeriodTotalData, ...formatCityData(result.cityResult.thisYearBeforePeriodTotalResult, cityName)],\n            thisYearTotalData: [...state.cityData.thisYearTotalData, ...formatCityData(result.cityResult.thisYearTotalResult, cityName)],\n            lastYearBeforePeriodData: [...state.cityData.lastYearBeforePeriodData, ...formatCityData(result.cityResult.lastYearBeforePeriodResult, cityName)],\n            lastYearBeforePeriodTotalData: [...state.cityData.lastYearBeforePeriodTotalData, ...formatCityData(result.cityResult.lastYearBeforePeriodTotalResult, cityName)],\n            beforePeriodNeedHandleData: [...state.cityData.beforePeriodNeedHandleData, ...formatCityData(result.cityResult.beforePeriodNeedHandleResult, cityName)],\n            periodTotalData: [...state.cityData.periodTotalData, ...formatCityData(result.cityResult.periodTotalResult, cityName)],\n            rateData: [...state.cityData.rateData, ...formatToCityRateTable(result.cityResult.rateResult, cityName)],\n            cities: allCities\n          }\n        }));\n        this.setState(state => ({\n          projectData: {\n            ...state.projectData,\n            [cityName]: result.projectResult\n          }\n        }));\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  exportExcel = () => {\n    let header = [KEY_PROJECT_NAME, KEY_STATISTIC_ITEM, ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL];\n    if (this.state.newAddedData.length > 0 || this.state.thisYearBeforeStartData.length > 0 ||\n      this.state.thisYearBeforePeriodTotalData.length > 0 || this.state.thisYearTotalData.length > 0 ||\n      this.state.lastYearBeforePeriodData.length > 0 ||\n      this.state.lastYearBeforePeriodTotalData.length > 0 ||\n      this.state.beforePeriodNeedHandleData.length > 0 ||\n      this.state.periodTotalData.length > 0) {\n      let sheet1 = XLSX.utils.json_to_sheet(this.state.periodNewAddedData, {\n        header: header\n      });\n      let sheet2 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodData, {\n        header: header\n      });\n      let sheet3 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodTotalData, {\n        header: header\n      });\n      let sheet4 = XLSX.utils.json_to_sheet(this.state.thisYearTotalData, {\n        header: header\n      });\n      let sheet5 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodData, {\n        header: header\n      });\n      let sheet6 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodTotalData, {\n        header: header\n      });\n      let sheet7 = XLSX.utils.json_to_sheet(this.state.beforePeriodNeedHandleData, {\n        header: header\n      });\n      let sheet8 = XLSX.utils.json_to_sheet(this.state.periodTotalData, {\n        header: header\n      });\n      let sheet9 = XLSX.utils.json_to_sheet(this.state.rateData, {\n        header: header\n      });\n      let workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, sheet1, STATISTIC_PERIOD_ADD);\n      XLSX.utils.book_append_sheet(workbook, sheet2, STATISTIC_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet3, STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet4, STATISTIC_THIS_YEAR_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet5, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet6, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet7, STATISTIC_BEFORE_PERIOD_NEED_HANDLE);\n      XLSX.utils.book_append_sheet(workbook, sheet8, STATISTIC_BEFORE_PERIOD_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet9, STATISTIC_PERIOD_RATE)\n      XLSX.writeFile(workbook, 'statistic-' + moment(Date.now()).format('YYYY-MM-DD-HH-MM-SS') + '.xlsx')\n    } else {\n      message.error('请先点击“开始统计”按钮进行统计！');\n    }\n  }\n\n  render() {\n\n    const tabCity = (\n      <CityView\n        periodNewAddedData={this.state.cityData.periodNewAddedData}\n        thisYearBeforePeriodData={this.state.cityData.thisYearBeforePeriodData}\n        thisYearBeforePeriodTotalData={this.state.cityData.thisYearBeforePeriodTotalData}\n        thisYearTotalData={this.state.cityData.thisYearTotalData}\n        lastYearBeforePeriodData={this.state.cityData.lastYearBeforePeriodData}\n        lastYearBeforePeriodTotalData={this.state.cityData.lastYearBeforePeriodTotalData}\n        beforePeriodNeedHandleData={this.state.cityData.beforePeriodNeedHandleData}\n        periodTotalData={this.state.cityData.periodTotalData}\n        rateData={this.state.cityData.rateData}\n        cities={this.state.cityData.cities}\n      />\n    );\n\n    const tabProject = (\n      <ProjectView\n        cities={this.state.cityData.cities}\n        projectData={this.state.projectData}\n      />\n    );\n \n    return (\n      <LocaleProvider locale={zh_CN}>\n        <div>\n          <h2 className=\"text--center heading\">统计辅助工具</h2>\n          <DataForm\n            onStart={this.start}\n            onExport={this.exportExcel}\n            loading={this.state.loading}\n          />\n          <Row style={{ margin: '40px 0' }}>\n            <Col span={22} offset={1}>\n              <Tabs type=\"card\">\n                {/* <Tabs.TabPane tab=\"大区\" key=\"大区\">大区统计</Tabs.TabPane> */}\n                <Tabs.TabPane tab=\"城市\" key=\"城市\">{tabCity}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"项目\" key=\"项目\">{tabProject}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"分期\" key=\"分期\"></Tabs.TabPane>\n              </Tabs>\n            </Col>\n          </Row>\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}