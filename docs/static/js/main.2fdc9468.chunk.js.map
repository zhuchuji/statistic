{"version":3,"sources":["components/DataForm.js","components/ChartView.js","constants.js","components/AreaTable.js","components/AreaView.js","components/CityTable.js","components/CityView.js","components/ProjectTable.js","utils.js","components/ProjectView.js","App.js","serviceWorker.js","index.js"],"names":["DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startDate","Date","set","hour","minute","second","endDate","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","toConsumableArray","concat","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","style","margin","onExport","React","Component","defaultPorps","WrapDataForm","create","ChartView","core_default","echarts","option","title","text","textStyle","left","top","color","tooltip","trigger","formatter","series","name","center","data","cityOpenData","secondCategoryOpenData","cityNewAddedAcceptData","secondCategoryNewAddedAcceptData","TICKET_SYSTEM_COUNT","TICKET_ACCEPT","TICKET_OPEN","TICKET_VALIDATE","TICKET_PAUSE","TICKET_INVALID","TICKET_CLOSE","TICKET_CLOSE_NORMAL","TICKET_CLOSE_ABNORMAL","TICKET_CLOSE_ON_TIME","TICKET_RESPONSE_IN_30_MIN","TICKET_RESPONSE_IN_30_HOUR","TICKET_CLOSE_PROCESS_TIME","TICKET_OPEN_PROCESS_TIME","DEFAULT_STATISTIC_ITEMS","KEY_REPORT_TIME","KEY_PROJECT_NAME","KEY_SECOND_CATEGORY","KEY_TICKET_STATUS","KEY_IS_PROCESS_EXCCED","KEY_FIRST_RESPONSE_TIME","KEY_PROCESS_TIME","KEY_CLOSE_TIME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","KEY_CITY_NAME","DEFAULT_SECOND_CATEGORIES","NEW_ADD_CLOSE_RATE","REMAIN_CLOSE_RATE","OVERALL_CLOSE_RATE","RESPONSE_IN_30_MIN_RATE","RESPONSE_IN_30_HOUR_RATE","CLOSE_ON_TIME_RATE","TOTAL_OVERALL_CLOSE_RATE","RATE_STATISTIC_ITEMS","STATISTIC_PERIOD_ADD","STATISTIC_BEFORE_PERIOD_REMAIN","STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_THIS_YEAR_TOTAL","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_BEFORE_PERIOD_NEED_HANDLE","STATISTIC_BEFORE_PERIOD_TOTAL","STATISTIC_PERIOD_RATE","STAGES","AreaTable","otherColumns","map","item","es_table","Column","dataIndex","key","width","currentPageData","dataSource","pagination","pageSize","scroll","y","size","AreaView","components_AreaTable","periodNewAddedData","thisYearBeforePeriodData","thisYearBeforePeriodTotalData","thisYearTotalData","lastYearBeforePeriodData","lastYearBeforePeriodTotalData","beforePeriodNeedHandleData","periodTotalData","rateData","CityTable","cityColumn","filteredCities","length","filter","defaultProps","CityView","filterCities","es_select","mode","onChange","cities","city","Option","components_CityTable","ProjectTable","projectColumn","filteredProjects","filterProjectName","projectName","sub","match","substring","parseTime","timeString","time","day","min","window","parseInt","filterProjectStage","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","stage","return","formatToTable","tableData","rowKey","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","statisticItem","rowData","_arr","_i","secondCategory","push","formatToAreaTable","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_arr2","_i2","formatToRateTable","_arr3","_i3","_arr4","_i4","ProjectView","filterCity","projectData","projects","project","filterProjects","components_ProjectTable","periodNewAddedResult","thisYearBeforePeriodResult","thisYearBeforePeriodTotalResult","thisYearTotalResult","lastYearBeforePeriodResult","lastYearBeforePeriodTotalResult","beforePeriodNeedHandleResult","periodTotalResult","rateResult","TICKET_STATUS_IN_PROGRESS","TICKET_STATUS_PAUSE","TICKET_STATUS_VALIDATE","TICKET_STATUS_CLOSE","TICKET_STATUS_ABNORMAL_CLOSE","TICKET_STATUS_INVALID","NO","initProjectRate","itemName","initProject","isInProgress","ticketStatus","statisticRate","statisticMap","rateMap","toFixed","statisticCityRate","globalRowKey","formatCityData","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","_arr5","_i5","formatToCityRateTable","_arr6","_i6","_arr7","_i7","mergeStageResult","resultArray","filterFunc","mergeResult","forEach","result","filteredProjectName","_arr8","_i8","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","ticketCloseCount","ticketCloseProcessTime","ticketOpenProcessTime","ticketOpenCount","Number","mergeProjectResult","_arr9","_i9","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","statisticCity","closeTimeStart","closeTimeEnd","dataMap","ticket","ticketStatistic","ticketCloseTime","moment","_parseTime","_parseTime2","_parseTime3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","statistic","reportTime","yearStartDate","month","date","thisYearbeforePeriodTickets","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_parseTime4","_parseTime5","_parseTime6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","statisticThisYearBeforePeriodTickets","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","statisticThisYearBeforeStartDateTotalTickets","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_parseTime13","_parseTime14","_parseTime15","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","statisticThisYearTotalTickets","lastYearBeforePeriodTickets","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_parseTime7","_parseTime8","_parseTime9","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","statisticLastYearBeforePeriodTickets","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","_parseTime10","_parseTime11","_parseTime12","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","statisticLastYearBeforePeriodTotalTickets","_arr10","_i10","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","_arr11","_i11","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","stageRateResult","stageResult","projectResult","projectRateResult","cityResult","cityRateResult","App","start","fileReader","FileReader","readFile","onload","event","workbook","XLSX","read","target","sheet","Sheets","SheetNames","cityName","utils","sheet_to_json","blankrows","readAsBinaryString","readExcels","cityData","allCities","allCityResult","_loop","objectSpread","defineProperty","areaResult","table","areaData","console","log","_iteratorNormalCompletion26","_didIteratorError26","_iteratorError26","_step26","_iterator26","_iteratorNormalCompletion27","_didIteratorError27","_iteratorError27","_step27","_iterator27","exportExcel","header","newAddedData","thisYearBeforeStartData","sheet1","json_to_sheet","sheet2","sheet3","sheet4","sheet5","sheet6","sheet7","sheet8","sheet9","book_new","book_append_sheet","writeFile","now","format","error","tabChart","components_ChartView","tabArea","components_AreaView","tabCity","components_CityView","tabProject","components_ProjectView","tabStage","locale_provider","locale","zh_CN","className","components_DataForm","tabs","TabPane","tab","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2fdc9468.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {},\n    onExport: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func,\n    onExport: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startDate = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endDate = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startDate, endDate);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              { \n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }   \n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在统计...': '开始统计'\n              }\n            </Button>\n            <Button style={{ margin: '0 20px' }} onClick={this.props.onExport}>导出Excel表格</Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","import React from 'react';\r\nimport { Row, Col } from 'antd';\r\n// import the core library.\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\n\r\n// then import echarts modules those you have used manually.\r\nimport echarts from 'echarts/lib/echarts';\r\n// import 'echarts/lib/chart/line';\r\n// import 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/chart/pie';\r\n// import 'echarts/lib/chart/scatter';\r\n// import 'echarts/lib/chart/radar';\r\n\r\n// import 'echarts/lib/chart/map';\r\n// import 'echarts/lib/chart/treemap';\r\n// import 'echarts/lib/chart/graph';\r\n// import 'echarts/lib/chart/gauge';\r\n// import 'echarts/lib/chart/funnel';\r\n// import 'echarts/lib/chart/parallel';\r\n// import 'echarts/lib/chart/sankey';\r\n// import 'echarts/lib/chart/boxplot';\r\n// import 'echarts/lib/chart/candlestick';\r\n// import 'echarts/lib/chart/effectScatter';\r\n// import 'echarts/lib/chart/lines';\r\n// import 'echarts/lib/chart/heatmap';\r\n\r\n// import 'echarts/lib/component/graphic';\r\n// import 'echarts/lib/component/grid';\r\n// import 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/tooltip';\r\n// import 'echarts/lib/component/polar';\r\n// import 'echarts/lib/component/geo';\r\n// import 'echarts/lib/component/parallel';\r\n// import 'echarts/lib/component/singleAxis';\r\n// import 'echarts/lib/component/brush';\r\n\r\nimport 'echarts/lib/component/title';\r\n\r\n// import 'echarts/lib/component/dataZoom';\r\n// import 'echarts/lib/component/visualMap';\r\n\r\n// import 'echarts/lib/component/markPoint';\r\n// import 'echarts/lib/component/markLine';\r\n// import 'echarts/lib/component/markArea';\r\n\r\n// import 'echarts/lib/component/timeline';\r\n// import 'echarts/lib/component/toolbox';\r\n\r\n// import 'zrender/lib/vml/vml';\r\n\r\nfunction ChartView(props) {\r\n  return (\r\n    <Row>\r\n      <Col span={12}>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关城市分布',\r\n              textStyle: {\r\n                left: 'center',\r\n                top: 10,\r\n                color: '#333'\r\n              }\r\n            },\r\n            tooltip : {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                center: ['50%', '50%'],\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)'\r\n                },\r\n                data: props.cityOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n      <Col span={12}>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关二级分类分布',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip : {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            series: [\r\n              {\r\n                name: '二级分类',\r\n                type: 'pie',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)'\r\n                },\r\n                data: props.secondCategoryOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n      <Col span={12}>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '新增维修城市分布图',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip : {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)'\r\n                },\r\n                data: props.cityNewAddedAcceptData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n      <Col span={12}>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '新增维修二级分类分布图',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip : {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)'\r\n                },\r\n                data: props.secondCategoryNewAddedAcceptData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ChartView;","// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '判定无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关平均处理时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '剩余未关平均处理时长（天）';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\nexport const KEY_CITY_NAME = '城市';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const NEW_ADD_CLOSE_RATE = '新增关闭率';\r\nexport const REMAIN_CLOSE_RATE = '遗留关闭率';\r\nexport const OVERALL_CLOSE_RATE = '总体关闭率';\r\nexport const RESPONSE_IN_30_MIN_RATE = '响应及时率（0.5h）'\r\nexport const RESPONSE_IN_30_HOUR_RATE = '响应及时率（30h）';\r\nexport const CLOSE_ON_TIME_RATE = '及时关闭率';\r\nexport const TOTAL_OVERALL_CLOSE_RATE = '累计总体关闭率';\r\n\r\nexport const RATE_STATISTIC_ITEMS = [\r\n  REMAIN_CLOSE_RATE,\r\n  NEW_ADD_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_RATE = '本年度统计周期内';\r\n\r\nexport const STAGES = [\r\n  '一期',\r\n  '二期',\r\n  '三期',\r\n  '四期',\r\n  '五期',\r\n  '六期',\r\n  '七期',\r\n  '八期',\r\n  '九期',\r\n  '十期'\r\n];","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction AreaTable(props) {\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default AreaTable;\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\nimport AreaTable from './AreaTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass AreaView extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_PERIOD_ADD}\r\n            data={this.props.periodNewAddedData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n            data={this.props.thisYearBeforePeriodData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n            data={this.props.thisYearBeforePeriodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_THIS_YEAR_TOTAL}\r\n            data={this.props.thisYearTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n            data={this.props.lastYearBeforePeriodData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n            data={this.props.lastYearBeforePeriodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n            data={this.props.beforePeriodNeedHandleData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n            data={this.props.periodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_PERIOD_RATE}\r\n            data={this.props.rateData}\r\n          />\r\n        </div>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AreaView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_CITY_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction CityTable(props) {\r\n  const cityColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_CITY_NAME}\r\n      title={KEY_CITY_NAME}\r\n      key={KEY_CITY_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredCities.length > 0 ?\r\n        props.data.filter(item => props.filteredCities.indexOf(item[KEY_CITY_NAME]) != -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {cityColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nCityTable.defaultProps = {\r\n  filteredCities: []\r\n}\r\n\r\nexport default CityTable;\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport CityTable from './CityTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass CityView extends React.Component {\r\n  static defaultProps = {\r\n    cities: []\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredCities: []\r\n    }\r\n  }\r\n\r\n  filterCities = (filteredCities) => {\r\n    if (filteredCities != null && filteredCities.length > 0) {\r\n      this.setState({\r\n        filteredCities: filteredCities\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredCities: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的城市'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterCities}\r\n                >\r\n                  {\r\n                    this.props.cities.map((city) => (\r\n                      <Select.Option key={city}>{city}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={this.props.periodNewAddedData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.thisYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.thisYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={this.props.thisYearTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.lastYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.lastYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={this.props.beforePeriodNeedHandleData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={this.props.periodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={this.props.rateData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CityView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ProjectTable(props) {\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title={KEY_PROJECT_NAME}\r\n      key={KEY_PROJECT_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredProjects.length > 0 ?\r\n        props.data.filter(item => props.filteredProjects.indexOf(item[KEY_PROJECT_NAME]) != -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nProjectTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ProjectTable;\r\n","import {\r\n  DEFAULT_STATISTIC_ITEMS,\r\n  KEY_TICKET_TOTAL,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  STAGES,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES\r\n} from './constants';\r\n\r\nexport function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|（.*?）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}\r\n\r\nexport function filterProject(projectName, reg) {\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function filterProjectStage(projectName) {\r\n  let filteredName = null;\r\n  for (let stage of STAGES) {\r\n    if (projectName.indexOf(stage) != -1) {\r\n      filteredName = projectName.substring(0, projectName.indexOf(stage));\r\n      return filteredName;\r\n    }\r\n  }\r\n  return projectName;\r\n}\r\n\r\nexport function formatToTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let projectName in data) {\r\n    for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = projectName;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[secondCategory] = data[secondCategory][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToRateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let projectName in data) {\r\n    for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n      RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = projectName;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport ProjectTable from './ProjectTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\nimport {\r\n  formatToTable,\r\n  formatToRateTable\r\n} from '../utils';\r\n\r\nclass ProjectView extends React.Component {\r\n  static defaultProps = {\r\n    cities: [],\r\n    projectData: {}\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      projects: [],\r\n      data: {}\r\n    }\r\n  }\r\n\r\n  filterCity = (city) => {\r\n    if (this.props.projectData[city] != null) {\r\n      this.setState({\r\n        data: this.props.projectData[city]\r\n      });\r\n      let projects = [];\r\n      for (let item in this.props.projectData[city]) {\r\n        for (let project in this.props.projectData[city][item]) {\r\n          if (projects.indexOf(project) == -1) {\r\n            projects = [...projects, project];\r\n          }\r\n        }\r\n      }\r\n      this.setState({\r\n        projects: projects\r\n      });\r\n    }\r\n  }\r\n\r\n  filterProjects = (projects) => {\r\n    if (projects.length > 0) {\r\n      this.setState({\r\n        filteredProjects: projects\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredProjects: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要显示的城市'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterCity}\r\n                >\r\n                  {\r\n                    this.props.cities.map((city) => (\r\n                      <Select.Option key={city}>{city}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的项目'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterProjects}\r\n                >\r\n                  {\r\n                    this.state.projects.map((project) => (\r\n                      <Select.Option key={project}>{project}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={formatToTable(this.state.data.periodNewAddedResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.state.data.thisYearBeforePeriodResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.state.data.thisYearBeforePeriodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={formatToTable(this.state.data.thisYearTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.state.data.lastYearBeforePeriodResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.state.data.lastYearBeforePeriodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={formatToTable(this.state.data.beforePeriodNeedHandleResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={formatToTable(this.state.data.periodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={formatToRateTable(this.state.data.rateResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectView;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport DataForm from './components/DataForm';\nimport ChartView from './components/ChartView';\nimport AreaView from './components/AreaView';\nimport CityView from './components/CityView';\nimport ProjectView from './components/ProjectView';\nimport XLSX from 'xlsx';\nimport { Row, Col, message, LocaleProvider, Tabs } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  TICKET_SYSTEM_COUNT,\n  TICKET_ACCEPT,\n  TICKET_OPEN,\n  TICKET_VALIDATE,\n  TICKET_PAUSE,\n  TICKET_INVALID,\n  TICKET_CLOSE,\n  TICKET_CLOSE_NORMAL,\n  TICKET_CLOSE_ABNORMAL,\n  TICKET_CLOSE_ON_TIME,\n  TICKET_RESPONSE_IN_30_MIN,\n  TICKET_RESPONSE_IN_30_HOUR,\n  TICKET_CLOSE_PROCESS_TIME,\n  TICKET_OPEN_PROCESS_TIME,\n  DEFAULT_STATISTIC_ITEMS,\n  KEY_REPORT_TIME,\n  KEY_PROJECT_NAME,\n  KEY_SECOND_CATEGORY,\n  KEY_TICKET_STATUS,\n  KEY_IS_PROCESS_EXCCED,\n  KEY_FIRST_RESPONSE_TIME,\n  KEY_PROCESS_TIME,\n  KEY_CLOSE_TIME,\n  DEFAULT_SECOND_CATEGORIES,\n  KEY_STATISTIC_ITEM,\n  KEY_TICKET_TOTAL,\n  KEY_CITY_NAME,\n  STATISTIC_PERIOD_ADD,\n  STATISTIC_BEFORE_PERIOD_REMAIN,\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_THIS_YEAR_TOTAL,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\n  STATISTIC_BEFORE_PERIOD_TOTAL,\n  STATISTIC_PERIOD_RATE,\n  STAGES,\n  NEW_ADD_CLOSE_RATE,\n  REMAIN_CLOSE_RATE,\n  OVERALL_CLOSE_RATE,\n  RESPONSE_IN_30_MIN_RATE,\n  RESPONSE_IN_30_HOUR_RATE,\n  CLOSE_ON_TIME_RATE,\n  TOTAL_OVERALL_CLOSE_RATE,\n  RATE_STATISTIC_ITEMS\n} from './constants';\n\nimport {\n  filterProjectName,\n  parseTime,\n  filterProjectStage,\n  formatToTable,\n  formatToAreaTable\n} from './utils';\n\n// ticket status\nconst TICKET_STATUS_IN_PROGRESS = '处理中';\nconst TICKET_STATUS_PAUSE = '暂停处理';\nconst TICKET_STATUS_VALIDATE = '待复验';\nconst TICKET_STATUS_CLOSE = '已关闭';\nconst TICKET_STATUS_ABNORMAL_CLOSE = '非正常关闭';\nconst TICKET_STATUS_INVALID = '判定无效';\n\nconst YES = '是';\nconst NO = '否';\n\nfunction initProjectRate() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of RATE_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction initProject() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of DEFAULT_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction isInProgress(ticketStatus) {\n  return ticketStatus.indexOf(TICKET_STATUS_IN_PROGRESS) === 0;\n}\n\n// 统计周期内新增\nfunction statistic(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 统计周期前遗留\nfunction statisticThisYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 本年度统计周期前遗留累计\nfunction statisticThisYearBeforeStartDateTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n  }\n\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticThisYearTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if (((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) &&\n      ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticRate(statisticMap, statisticItem, rateMap) {\n  for (let projectName in statisticMap) {\n    if (rateMap[projectName] == null) {\n      rateMap[projectName] = initProjectRate();\n    }\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      if (statisticItem === NEW_ADD_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === REMAIN_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE_ON_TIME] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      }\n    }\n  }\n}\n\nfunction statisticCityRate(statisticMap, statisticItem, rateMap) {\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    if ( rateMap[secondCategory] == null) {\n      rateMap[secondCategory] = {};\n    }\n    if (statisticItem === NEW_ADD_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === REMAIN_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE_ON_TIME] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    }\n  }\n}\n\nfunction readExcels(fileList) {\n  return new Promise((resolve, reject) => {\n    let fileReader = new FileReader();\n    let data = {};\n\n    let readFile = (index) => {\n      if (index < fileList.length) {\n        fileReader.onload = (event) => {\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\n          let cityName = fileList[index].name.substring(0, fileList[index].name.indexOf('.'));\n          data[cityName] = XLSX.utils.sheet_to_json(sheet, { blankrows: false });\n          readFile(index + 1);\n        }\n        fileReader.readAsBinaryString(fileList[index]);\n      } else {\n        resolve(data);\n      }\n    };\n    readFile(0);\n  });\n}\n\nlet globalRowKey = 0;\n\nfunction formatCityData(data, city) {\n  let tableData = [];\n  for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction formatToCityRateTable(data, city) {\n  let tableData = [];\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction mergeStageResult(resultArray, filterFunc) {\n  let mergeResult = {};\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      let filteredProjectName = filterFunc(projectName);\n      if (mergeResult[filteredProjectName] == null) {\n        mergeResult[filteredProjectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[filteredProjectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[filteredProjectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[filteredProjectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in mergeResult) {\n    for (let secondCategory in mergeResult[projectName]) {\n      let ticketCloseProcessTime = mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = mergeResult[projectName][secondCategory][TICKET_CLOSE];\n      mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = mergeResult[projectName][secondCategory][TICKET_OPEN];\n      mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return mergeResult;\n}\n\nfunction mergeProjectResult(resultArray) {\n  let mergeResult = initProject();\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let secondCategory in mergeResult) {\n    let ticketCloseProcessTime = mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME];\n    let ticketCloseCount = mergeResult[secondCategory][TICKET_CLOSE];\n    mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n      ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n    let ticketOpenProcessTime = mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME];\n    let ticketOpenCount = mergeResult[secondCategory][TICKET_OPEN];\n    mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] =\n      ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n  }\n\n  return mergeResult;\n}\n\n\nfunction statisticCity(data, startDate, endDate) {\n  // 统计分期\n  let periodNewAddedTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime >= startDate && reportTime <= endDate;\n  });\n  let periodNewAddedResult = statistic(periodNewAddedTickets, startDate, endDate);\n\n  let yearStartDate = moment(startDate).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n  let thisYearbeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < startDate && reportTime >= yearStartDate;\n  });\n\n  let thisYearBeforePeriodResult = statisticThisYearBeforePeriodTickets(thisYearbeforePeriodTickets,\n    startDate, endDate);\n\n  let thisYearBeforePeriodTotalResult = statisticThisYearBeforeStartDateTotalTickets(\n    thisYearbeforePeriodTickets, yearStartDate, endDate);\n\n  let thisYearTotalTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime <= endDate && reportTime >= yearStartDate;\n  });\n  let thisYearTotalResult = statisticThisYearTotalTickets(thisYearTotalTickets,\n    yearStartDate, endDate);\n\n  let lastYearBeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < yearStartDate;\n  });\n  let lastYearBeforePeriodResult = statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\n    startDate, endDate);\n  \n  let lastYearBeforePeriodTotalResult = statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\n    yearStartDate, endDate);\n\n  let beforePeriodNeedHandleResult = {};\n  [periodNewAddedResult, thisYearBeforePeriodResult, lastYearBeforePeriodResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (beforePeriodNeedHandleResult[projectName] == null) {\n        beforePeriodNeedHandleResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            beforePeriodNeedHandleResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in beforePeriodNeedHandleResult) {\n    for (let secondCategory in beforePeriodNeedHandleResult[projectName]) {\n      let ticketCloseProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let periodTotalResult = {};\n  [lastYearBeforePeriodTotalResult, thisYearTotalResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (periodTotalResult[projectName] == null) {\n        periodTotalResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            periodTotalResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in periodTotalResult) {\n    for (let secondCategory in periodTotalResult[projectName]) {\n      let ticketCloseProcessTime = periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = periodTotalResult[projectName][secondCategory][TICKET_CLOSE];\n      periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = periodTotalResult[projectName][secondCategory][TICKET_OPEN];\n      periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let stageRateResult = {};\n  statisticRate(periodNewAddedResult, NEW_ADD_CLOSE_RATE, stageRateResult);\n  statisticRate(thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, stageRateResult);\n  statisticRate(periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, stageRateResult);\n  \n  let stageResult = {\n    periodNewAddedResult: periodNewAddedResult,\n    thisYearBeforePeriodResult: thisYearBeforePeriodResult,\n    thisYearBeforePeriodTotalResult: thisYearBeforePeriodTotalResult,\n    lastYearBeforePeriodResult: lastYearBeforePeriodResult,\n    lastYearBeforePeriodTotalResult: lastYearBeforePeriodTotalResult,\n    beforePeriodNeedHandleResult: beforePeriodNeedHandleResult,\n    thisYearTotalResult: thisYearTotalResult,\n    periodTotalResult: periodTotalResult,\n    rateResult: stageRateResult\n  };\n\n  // 统计项目\n  let projectResult = {\n    periodNewAddedResult:  mergeStageResult([periodNewAddedResult], filterProjectStage),\n    thisYearBeforePeriodResult: mergeStageResult([thisYearBeforePeriodResult], filterProjectStage),\n    thisYearBeforePeriodTotalResult: mergeStageResult([thisYearBeforePeriodTotalResult], filterProjectStage),\n    thisYearTotalResult: mergeStageResult([thisYearTotalResult], filterProjectStage),\n    lastYearBeforePeriodResult: mergeStageResult([lastYearBeforePeriodResult], filterProjectStage),\n    lastYearBeforePeriodTotalResult: mergeStageResult([lastYearBeforePeriodTotalResult], filterProjectStage),\n    beforePeriodNeedHandleResult: mergeStageResult([beforePeriodNeedHandleResult], filterProjectStage),\n    periodTotalResult: mergeStageResult([periodTotalResult], filterProjectStage)\n  };\n  let projectRateResult = {}\n  statisticRate(projectResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, projectRateResult);\n  statisticRate(projectResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, projectRateResult);\n  projectResult.rateResult = projectRateResult;\n\n  let cityResult = {\n    periodNewAddedResult:  mergeProjectResult([projectResult.periodNewAddedResult]),\n    thisYearBeforePeriodResult: mergeProjectResult([projectResult.thisYearBeforePeriodResult]),\n    thisYearBeforePeriodTotalResult: mergeProjectResult([projectResult.thisYearBeforePeriodTotalResult]),\n    thisYearTotalResult: mergeProjectResult([projectResult.thisYearTotalResult]),\n    lastYearBeforePeriodResult: mergeProjectResult([projectResult.lastYearBeforePeriodResult]),\n    lastYearBeforePeriodTotalResult: mergeProjectResult([projectResult.lastYearBeforePeriodTotalResult]),\n    beforePeriodNeedHandleResult: mergeProjectResult([projectResult.beforePeriodNeedHandleResult]),\n    periodTotalResult: mergeProjectResult([projectResult.periodTotalResult])\n  };\n  let cityRateResult = {}\n  statisticCityRate(cityResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, cityRateResult);\n  cityResult.rateResult = cityRateResult;\n\n  let result = {\n    stageResult,\n    projectResult,\n    cityResult\n  };\n  return result;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityData: {\n        periodNewAddedData: [],\n        thisYearBeforePeriodData: [],\n        thisYearBeforePeriodTotalData: [],\n        thisYearTotalData: [],\n        lastYearBeforePeriodData: [],\n        lastYearBeforePeriodTotalData: [],\n        beforePeriodNeedHandleData: [],\n        periodTotalData: [],\n        rateData: [],\n        cities: []\n      },\n      areaData: {\n        periodNewAddedData: [],\n        thisYearBeforePeriodData: [],\n        thisYearBeforePeriodTotalData: [],\n        thisYearTotalData: [],\n        lastYearBeforePeriodData: [],\n        lastYearBeforePeriodTotalData: [],\n        beforePeriodNeedHandleData: [],\n        periodTotalData: [],\n        rateData: []\n      },\n      loading: false\n    };\n  }\n\n  start = (fileList, startDate, endDate) => {\n    this.setState({ loading: true });\n    readExcels(fileList).then((data) => {\n      // clear previous data\n      this.setState({\n        cityData: {\n          periodNewAddedData: [],\n          thisYearBeforePeriodData: [],\n          thisYearBeforePeriodTotalData: [],\n          thisYearTotalData: [],\n          lastYearBeforePeriodData: [],\n          lastYearBeforePeriodTotalData: [],\n          beforePeriodNeedHandleData: [],\n          periodTotalData: [],\n          rateData: [],\n          cities: [],\n          cityOpenData: []\n        },\n        projectData: {},\n        stageResult: {}\n      });\n      let allCities = [];\n      let allCityResult = {};\n      for (let cityName in data) {\n        allCities.push(cityName);\n        let result = statisticCity(data[cityName], startDate, endDate);\n        allCityResult[cityName] = result.cityResult;\n        this.setState((state) => ({\n          cityData: {\n            periodNewAddedData:  [...state.cityData.periodNewAddedData, ...formatCityData(result.cityResult.periodNewAddedResult, cityName)],\n            thisYearBeforePeriodData: [...state.cityData.thisYearBeforePeriodData, ...formatCityData(result.cityResult.thisYearBeforePeriodResult, cityName)],\n            thisYearBeforePeriodTotalData: [...state.cityData.thisYearBeforePeriodTotalData, ...formatCityData(result.cityResult.thisYearBeforePeriodTotalResult, cityName)],\n            thisYearTotalData: [...state.cityData.thisYearTotalData, ...formatCityData(result.cityResult.thisYearTotalResult, cityName)],\n            lastYearBeforePeriodData: [...state.cityData.lastYearBeforePeriodData, ...formatCityData(result.cityResult.lastYearBeforePeriodResult, cityName)],\n            lastYearBeforePeriodTotalData: [...state.cityData.lastYearBeforePeriodTotalData, ...formatCityData(result.cityResult.lastYearBeforePeriodTotalResult, cityName)],\n            beforePeriodNeedHandleData: [...state.cityData.beforePeriodNeedHandleData, ...formatCityData(result.cityResult.beforePeriodNeedHandleResult, cityName)],\n            periodTotalData: [...state.cityData.periodTotalData, ...formatCityData(result.cityResult.periodTotalResult, cityName)],\n            rateData: [...state.cityData.rateData, ...formatToCityRateTable(result.cityResult.rateResult, cityName)],\n            cities: allCities\n          }\n        }));\n        this.setState(state => ({\n          projectData: {\n            ...state.projectData,\n            [cityName]: result.projectResult\n          }\n        }));\n        this.setState(state => ({\n          stageResult: {\n            ...state.stageResult,\n            [cityName]: result.stageResult\n          }\n        }));\n      }\n      let areaResult = {\n        periodNewAddedResult: initProject(),\n        thisYearBeforePeriodResult: initProject(),\n        thisYearBeforePeriodTotalResult: initProject(),\n        thisYearTotalResult: initProject(),\n        lastYearBeforePeriodResult: initProject(),\n        lastYearBeforePeriodTotalResult: initProject(),\n        beforePeriodNeedHandleResult: initProject(),\n        periodTotalResult: initProject()\n      };\n      // statistic area result\n      for (let table in areaResult) {\n        for (let cityName in allCityResult) {\n          for (let secondCategory in areaResult[table]) {\n            let result = allCityResult[cityName][table][secondCategory];\n            for (let item in result) {\n              if (item === TICKET_CLOSE_PROCESS_TIME) {\n                let ticketCloseCount = result[TICKET_CLOSE];\n                let ticketCloseProcessTime = result[TICKET_CLOSE_PROCESS_TIME];\n                areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n                  ticketCloseCount * ticketCloseProcessTime;\n              } else if (item === TICKET_OPEN_PROCESS_TIME) {\n                let ticketOpenProcessTime = result[TICKET_OPEN_PROCESS_TIME];\n                let ticketOpenCount = result[TICKET_OPEN];\n                areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n                  ticketOpenCount * ticketOpenProcessTime;\n              }\n              else {\n                areaResult[table][secondCategory][item] += result[item];\n              }\n            }\n          }\n        }\n      }\n      // get average process time\n      for (let table in areaResult) {\n        for (let secondCategory in areaResult[table]) {\n          let ticketCloseProcessTime = areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n          let ticketCloseCount = areaResult[table][secondCategory][TICKET_CLOSE];\n          areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n            ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n          let ticketOpenProcessTime = areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME];\n          let ticketOpenCount = areaResult[table][secondCategory][TICKET_OPEN];\n          areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n            ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n        }\n      }\n      this.setState({\n        areaData: {\n          periodNewAddedData: formatToAreaTable(areaResult.periodNewAddedResult),\n          thisYearBeforePeriodData: formatToAreaTable(areaResult.thisYearBeforePeriodResult),\n          thisYearBeforePeriodTotalData: formatToAreaTable(areaResult.thisYearBeforePeriodTotalResult),\n          thisYearTotalData: formatToAreaTable(areaResult.thisYearTotalResult),\n          lastYearBeforePeriodData: formatToAreaTable(areaResult.lastYearBeforePeriodResult),\n          lastYearBeforePeriodTotalData: formatToAreaTable(areaResult.lastYearBeforePeriodTotalResult),\n          beforePeriodNeedHandleData: formatToAreaTable(areaResult.beforePeriodNeedHandleResult),\n          periodTotalData: formatToAreaTable(areaResult.periodTotalResult),\n          rateData: [] \n        }\n      });\n\n\n      console.log(allCityResult);\n\n      // 画图：剩余未关城市分布饼状图\n      let cityOpenData = [];\n      for (let cityName in allCityResult) {\n        let value = allCityResult[cityName].beforePeriodNeedHandleResult[KEY_TICKET_TOTAL][TICKET_OPEN];\n        cityOpenData = [...cityOpenData, { name: cityName, value}];\n      }\n      this.setState({\n        cityOpenData\n      });\n\n      // 画图：剩余未关二级分类饼状图\n      let secondCategoryOpenData = [];\n      for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n        let value = areaResult.beforePeriodNeedHandleResult[secondCategory][TICKET_OPEN];\n        secondCategoryOpenData = [...secondCategoryOpenData, {\n          name: secondCategory,\n          value\n        }]\n      }\n      this.setState({\n        secondCategoryOpenData\n      });\n\n      // 画图：新增受理城市分布图\n      let cityNewAddedAcceptData = [];\n      for (let cityName in allCityResult) {\n        let value = allCityResult[cityName].periodNewAddedResult[KEY_TICKET_TOTAL][TICKET_ACCEPT];\n        cityNewAddedAcceptData = [\n          ...cityNewAddedAcceptData, {\n            name: cityName,\n            value\n          }\n        ]\n      }\n      this.setState({\n        cityNewAddedAcceptData\n      })\n\n      // 画图：新增受理二级分类分布图\n      let secondCategoryNewAddedAcceptData = [];\n      for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n        let value = areaResult.periodNewAddedResult[secondCategory][TICKET_ACCEPT];\n        secondCategoryNewAddedAcceptData = [...secondCategoryNewAddedAcceptData, {\n          name: secondCategory,\n          value\n        }]\n      }\n      this.setState({\n        secondCategoryNewAddedAcceptData\n      });\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  exportExcel = () => {\n    let header = [KEY_PROJECT_NAME, KEY_STATISTIC_ITEM, ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL];\n    if (this.state.newAddedData.length > 0 || this.state.thisYearBeforeStartData.length > 0 ||\n      this.state.thisYearBeforePeriodTotalData.length > 0 || this.state.thisYearTotalData.length > 0 ||\n      this.state.lastYearBeforePeriodData.length > 0 ||\n      this.state.lastYearBeforePeriodTotalData.length > 0 ||\n      this.state.beforePeriodNeedHandleData.length > 0 ||\n      this.state.periodTotalData.length > 0) {\n      let sheet1 = XLSX.utils.json_to_sheet(this.state.periodNewAddedData, {\n        header: header\n      });\n      let sheet2 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodData, {\n        header: header\n      });\n      let sheet3 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodTotalData, {\n        header: header\n      });\n      let sheet4 = XLSX.utils.json_to_sheet(this.state.thisYearTotalData, {\n        header: header\n      });\n      let sheet5 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodData, {\n        header: header\n      });\n      let sheet6 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodTotalData, {\n        header: header\n      });\n      let sheet7 = XLSX.utils.json_to_sheet(this.state.beforePeriodNeedHandleData, {\n        header: header\n      });\n      let sheet8 = XLSX.utils.json_to_sheet(this.state.periodTotalData, {\n        header: header\n      });\n      let sheet9 = XLSX.utils.json_to_sheet(this.state.rateData, {\n        header: header\n      });\n      let workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, sheet1, STATISTIC_PERIOD_ADD);\n      XLSX.utils.book_append_sheet(workbook, sheet2, STATISTIC_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet3, STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet4, STATISTIC_THIS_YEAR_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet5, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet6, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet7, STATISTIC_BEFORE_PERIOD_NEED_HANDLE);\n      XLSX.utils.book_append_sheet(workbook, sheet8, STATISTIC_BEFORE_PERIOD_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet9, STATISTIC_PERIOD_RATE)\n      XLSX.writeFile(workbook, 'statistic-' + moment(Date.now()).format('YYYY-MM-DD-HH-MM-SS') + '.xlsx')\n    } else {\n      message.error('请先点击“开始统计”按钮进行统计！');\n    }\n  }\n\n  render() {\n    const tabChart = (\n      <ChartView\n        cityOpenData={this.state.cityOpenData}\n        secondCategoryOpenData={this.state.secondCategoryOpenData}\n        cityNewAddedAcceptData={this.state.cityNewAddedAcceptData}\n        secondCategoryNewAddedAcceptData={this.state.secondCategoryNewAddedAcceptData}\n      />\n    );\n\n    const tabArea = (\n      <AreaView\n        periodNewAddedData={this.state.areaData.periodNewAddedData}\n        thisYearBeforePeriodData={this.state.areaData.thisYearBeforePeriodData}\n        thisYearBeforePeriodTotalData={this.state.areaData.thisYearBeforePeriodTotalData}\n        thisYearTotalData={this.state.areaData.thisYearTotalData}\n        lastYearBeforePeriodData={this.state.areaData.lastYearBeforePeriodData}\n        lastYearBeforePeriodTotalData={this.state.areaData.lastYearBeforePeriodTotalData}\n        beforePeriodNeedHandleData={this.state.areaData.beforePeriodNeedHandleData}\n        periodTotalData={this.state.areaData.periodTotalData}\n        rateData={this.state.areaData.rateData}\n      />\n    );\n\n    const tabCity = (\n      <CityView\n        periodNewAddedData={this.state.cityData.periodNewAddedData}\n        thisYearBeforePeriodData={this.state.cityData.thisYearBeforePeriodData}\n        thisYearBeforePeriodTotalData={this.state.cityData.thisYearBeforePeriodTotalData}\n        thisYearTotalData={this.state.cityData.thisYearTotalData}\n        lastYearBeforePeriodData={this.state.cityData.lastYearBeforePeriodData}\n        lastYearBeforePeriodTotalData={this.state.cityData.lastYearBeforePeriodTotalData}\n        beforePeriodNeedHandleData={this.state.cityData.beforePeriodNeedHandleData}\n        periodTotalData={this.state.cityData.periodTotalData}\n        rateData={this.state.cityData.rateData}\n        cities={this.state.cityData.cities}\n        cityOpenData={this.state.cityData.cityOpenData}\n        secondCategoryOpenData={this.state.secondCategoryOpenData}\n      />\n    );\n\n    const tabProject = (\n      <ProjectView\n        cities={this.state.cityData.cities}\n        projectData={this.state.projectData}\n      />\n    );\n\n    const tabStage = (\n      <ProjectView\n        cities={this.state.cityData.cities}\n        projectData={this.state.stageResult}\n      />\n    );\n \n    return (\n      <LocaleProvider locale={zh_CN}>\n        <div>\n          <h2 className=\"text--center heading\">统计辅助工具</h2>\n          <DataForm\n            onStart={this.start}\n            onExport={this.exportExcel}\n            loading={this.state.loading}\n          />\n          <Row style={{ margin: '40px 0' }}>\n            <Col span={22} offset={1}>\n              <Tabs type=\"card\">\n                <Tabs.TabPane tab=\"统计图\" key=\"统计图\">{tabChart}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"大区\" key=\"大区\">{tabArea}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"城市\" key=\"城市\">{tabCity}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"项目\" key=\"项目\">{tabProject}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"分期\" key=\"分期\">{tabStage}</Tabs.TabPane>\n              </Tabs>\n            </Col>\n          </Row>\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}