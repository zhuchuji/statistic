{"version":3,"sources":["components/DataForm.js","constants.js","components/AreaTable.js","components/AreaView.js","components/CityTable.js","components/CityView.js","components/ProjectTable.js","utils.js","components/ProjectView.js","App.js","serviceWorker.js","index.js"],"names":["DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startDate","Date","set","hour","minute","second","endDate","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","toConsumableArray","concat","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","style","margin","onExport","React","Component","defaultPorps","WrapDataForm","create","TICKET_SYSTEM_COUNT","TICKET_ACCEPT","TICKET_OPEN","TICKET_VALIDATE","TICKET_PAUSE","TICKET_INVALID","TICKET_CLOSE","TICKET_CLOSE_NORMAL","TICKET_CLOSE_ABNORMAL","TICKET_CLOSE_ON_TIME","TICKET_RESPONSE_IN_30_MIN","TICKET_RESPONSE_IN_30_HOUR","TICKET_CLOSE_PROCESS_TIME","TICKET_OPEN_PROCESS_TIME","DEFAULT_STATISTIC_ITEMS","KEY_REPORT_TIME","KEY_PROJECT_NAME","KEY_SECOND_CATEGORY","KEY_TICKET_STATUS","KEY_IS_PROCESS_EXCCED","KEY_FIRST_RESPONSE_TIME","KEY_PROCESS_TIME","KEY_CLOSE_TIME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","KEY_CITY_NAME","DEFAULT_SECOND_CATEGORIES","NEW_ADD_CLOSE_RATE","REMAIN_CLOSE_RATE","OVERALL_CLOSE_RATE","RESPONSE_IN_30_MIN_RATE","RESPONSE_IN_30_HOUR_RATE","CLOSE_ON_TIME_RATE","TOTAL_OVERALL_CLOSE_RATE","RATE_STATISTIC_ITEMS","STATISTIC_PERIOD_ADD","STATISTIC_BEFORE_PERIOD_REMAIN","STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_THIS_YEAR_TOTAL","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_BEFORE_PERIOD_NEED_HANDLE","STATISTIC_BEFORE_PERIOD_TOTAL","STATISTIC_PERIOD_RATE","STAGES","AreaTable","otherColumns","map","item","es_table","Column","dataIndex","title","key","width","currentPageData","dataSource","data","pagination","pageSize","scroll","y","size","AreaView","components_AreaTable","periodNewAddedData","thisYearBeforePeriodData","thisYearBeforePeriodTotalData","thisYearTotalData","lastYearBeforePeriodData","lastYearBeforePeriodTotalData","beforePeriodNeedHandleData","periodTotalData","rateData","CityTable","cityColumn","filteredCities","length","filter","defaultProps","CityView","filterCities","es_select","mode","onChange","cities","city","Option","components_CityTable","ProjectTable","projectColumn","filteredProjects","filterProjectName","projectName","sub","match","substring","parseTime","timeString","time","day","min","window","parseInt","filterProjectStage","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","stage","return","formatToTable","tableData","rowKey","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","statisticItem","rowData","_arr","_i","secondCategory","push","formatToAreaTable","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_arr2","_i2","formatToRateTable","_arr3","_i3","_arr4","_i4","ProjectView","filterCity","projectData","projects","project","filterProjects","components_ProjectTable","periodNewAddedResult","thisYearBeforePeriodResult","thisYearBeforePeriodTotalResult","thisYearTotalResult","lastYearBeforePeriodResult","lastYearBeforePeriodTotalResult","beforePeriodNeedHandleResult","periodTotalResult","rateResult","TICKET_STATUS_IN_PROGRESS","TICKET_STATUS_PAUSE","TICKET_STATUS_VALIDATE","TICKET_STATUS_CLOSE","TICKET_STATUS_ABNORMAL_CLOSE","TICKET_STATUS_INVALID","NO","initProjectRate","itemName","initProject","isInProgress","ticketStatus","statisticRate","statisticMap","rateMap","toFixed","statisticCityRate","globalRowKey","formatCityData","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","_arr5","_i5","formatToCityRateTable","_arr6","_i6","_arr7","_i7","mergeStageResult","resultArray","filterFunc","mergeResult","forEach","result","filteredProjectName","_arr8","_i8","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","ticketCloseCount","ticketCloseProcessTime","ticketOpenProcessTime","ticketOpenCount","Number","mergeProjectResult","_arr9","_i9","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","statisticCity","closeTimeStart","closeTimeEnd","dataMap","ticket","ticketStatistic","ticketCloseTime","moment","_parseTime","_parseTime2","_parseTime3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","statistic","reportTime","yearStartDate","month","date","thisYearbeforePeriodTickets","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_parseTime4","_parseTime5","_parseTime6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","statisticThisYearBeforePeriodTickets","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","statisticThisYearBeforeStartDateTotalTickets","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_parseTime13","_parseTime14","_parseTime15","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","statisticThisYearTotalTickets","lastYearBeforePeriodTickets","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_parseTime7","_parseTime8","_parseTime9","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","statisticLastYearBeforePeriodTickets","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","_parseTime10","_parseTime11","_parseTime12","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","statisticLastYearBeforePeriodTotalTickets","_arr10","_i10","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","_arr11","_i11","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","stageRateResult","stageResult","projectResult","projectRateResult","cityResult","cityRateResult","App","start","fileReader","FileReader","readFile","onload","event","workbook","XLSX","read","target","sheet","Sheets","SheetNames","cityName","name","utils","sheet_to_json","blankrows","readAsBinaryString","readExcels","cityData","allCities","allCityResult","_loop","objectSpread","defineProperty","areaResult","table","areaData","exportExcel","header","newAddedData","thisYearBeforeStartData","sheet1","json_to_sheet","sheet2","sheet3","sheet4","sheet5","sheet6","sheet7","sheet8","sheet9","book_new","book_append_sheet","writeFile","now","format","error","tabArea","components_AreaView","tabCity","components_CityView","tabProject","components_ProjectView","tabStage","locale_provider","locale","zh_CN","className","components_DataForm","tabs","TabPane","tab","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qgBAIMA,cAUJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA4BRQ,mBAAqB,SAACC,EAAMC,EAAOC,GACjC,IAAMC,EAAOX,EAAKD,MAAMY,KACpBF,GAASA,EAAQE,EAAKC,cAAc,aACtCF,EAAS,uEAETA,KAlCeV,EAsCnBa,iBAAmB,SAACL,EAAMC,EAAOC,GAC/B,IAAMC,EAAOX,EAAKD,MAAMY,KACpBF,GAASA,EAAQE,EAAKC,cAAc,WACtCF,EAAS,uEAETA,KAzCFV,EAAKc,MAAQ,CACXC,SAAU,IAEZf,EAAKgB,eAAiBhB,EAAKgB,eAAeC,KAApBhB,OAAAiB,EAAA,EAAAjB,QAAAiB,EAAA,EAAAjB,CAAAD,KALLA,8EAQJ,IAAAmB,EAAAhB,KACb,OAAO,IAAIiB,QAAQ,SAACC,EAASC,GAC3BH,EAAKpB,MAAMY,KAAKY,eAAe,SAACC,EAAKC,GAC9BD,EAGHF,IAFAD,iDAQS,IAAAK,EAAAvB,KACfA,KAAKwB,eAAeC,KAAK,WACvB,IAAMjB,EAAOe,EAAK3B,MAAMY,KACpBkB,EAAY,IAAIC,KAAKnB,EAAKC,cAAc,aAAamB,IAAI,CAAEC,KAAM,EAAGC,OAAQ,EAAGC,OAAQ,KACvFC,EAAU,IAAIL,KAAKnB,EAAKC,cAAc,WAAWmB,IAAI,CAAEC,KAAM,GAAIC,OAAQ,GAAIC,OAAQ,MACzFR,EAAK3B,MAAMqC,QAAQV,EAAKZ,MAAMC,SAAUc,EAAWM,KAClDE,MAAM,+CAqBF,IAAAC,EAAAnC,KACCoC,EAAsBpC,KAAKJ,MAAMY,KAAjC4B,kBAER,OACEC,EAAAC,EAAAC,cAAAC,EAAA,GAAMC,OAAO,cACXJ,EAAAC,EAAAC,cAAAG,EAAA,OACEL,EAAAC,EAAAC,cAAAI,EAAA,GAAKC,KAAM,IACTP,EAAAC,EAAAC,cAAAC,EAAA,EAAMK,KAAN,CACEC,MAAM,iCACNC,SAAU,CAAEH,KAAM,GAClBI,WAAY,CAAEJ,KAAM,KAGlBR,EAAkB,QAAS,CACzBa,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,6DADrCf,CAGEC,EAAAC,EAAAC,cAAAa,EAAA,GACEC,OAAO,YACPC,UAAQ,EACR1C,SAAUZ,KAAKW,MAAMC,SACrB2C,aAAc,SAACC,GAIb,OAHArB,EAAKsB,SAAS,SAAAC,GAAkB,IAAf9C,EAAe8C,EAAf9C,SACf,MAAO,CAAEA,SAAQd,OAAA6D,EAAA,EAAA7D,CAAOc,GAAPgD,OAAA,CAAiBJ,QAE7B,GAETK,SAAU,SAACL,GACTrB,EAAKsB,SAAS,SAAAK,GAAkB,IAAflD,EAAekD,EAAflD,SACTmD,EAAQnD,EAASoD,QAAQR,GACzBS,EAAcrD,EAASsD,QAE7B,OADAD,EAAYE,OAAOJ,EAAO,GACnB,CACLnD,SAAUqD,OAKhB5B,EAAAC,EAAAC,cAAA6B,EAAA,iEAOZ/B,EAAAC,EAAAC,cAAAG,EAAA,OACEL,EAAAC,EAAAC,cAAAI,EAAA,GAAKC,KAAM,GACTP,EAAAC,EAAAC,cAAAC,EAAA,EAAMK,KAAN,CACEC,MAAM,mDACNC,SAAU,CAAEH,KAAM,IAClBI,WAAY,CAAEJ,KAAM,KAGlBR,EAAkB,YAAa,CAC7Ba,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,sEAC3B,CAAEkB,UAAWrE,KAAKU,oBAHtB0B,CAKGC,EAAAC,EAAAC,cAAA+B,EAAA,WAITjC,EAAAC,EAAAC,cAAAI,EAAA,GAAKC,KAAM,GACTP,EAAAC,EAAAC,cAAAC,EAAA,EAAMK,KAAN,CACEC,MAAM,mDACNC,SAAU,CAAEH,KAAM,IAClBI,WAAY,CAAEJ,KAAM,KAGlBR,EAAkB,UAAW,CAC3Ba,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,sEAC3B,CAAEkB,UAAWrE,KAAKI,sBAHtBgC,CAKGC,EAAAC,EAAAC,cAAA+B,EAAA,YAKXjC,EAAAC,EAAAC,cAAAG,EAAA,OACEL,EAAAC,EAAAC,cAAAI,EAAA,GAAK4B,OAAQ,GACXlC,EAAAC,EAAAC,cAAA6B,EAAA,GAAQI,QAASxE,KAAKJ,MAAM4E,QAASC,KAAK,UAAUC,QAAS1E,KAAKa,gBAE9Db,KAAKJ,MAAM4E,QAAU,8BAAW,4BAGpCnC,EAAAC,EAAAC,cAAA6B,EAAA,GAAQO,MAAO,CAAEC,OAAQ,UAAYF,QAAS1E,KAAKJ,MAAMiF,UAAzD,2CA9IWC,IAAMC,WAAvBpF,EACGqF,aAAe,CACpB/C,QAAS,aACT4C,SAAU,cAmJd,IAEeI,EAFMzC,EAAA,EAAK0C,QAAL1C,CAAc7C,oBCzJtBwF,EAAsB,2BACtBC,EAAgB,eAChBC,EAAc,2BACdC,EAAkB,qBAClBC,EAAe,2BACfC,EAAiB,2BACjBC,EAAe,eACfC,EAAsB,2BACtBC,EAAwB,iCACxBC,EAAuB,2BACvBC,EAA4B,iDAC5BC,EAA6B,gDAC7BC,EAA4B,qEAC5BC,EAA2B,iFAE3BC,EAA0B,CACrCd,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAIWE,EAAkB,2BAClBC,EAAmB,eACnBC,EAAsB,2BACtBC,EAAoB,2BACpBC,EAAwB,uCACxBC,EAA0B,uCAC1BC,EAAmB,2BACnBC,EAAiB,uCACjBC,EAAqB,2BACrBC,EAAmB,eACnBC,EAAgB,eAGhBC,GAA4B,CACvC,uCACA,eACA,eACA,qBACA,qBACA,2BACA,2BACA,2BACA,uCACA,2BACA,gBAGWC,GAAqB,iCACrBC,GAAoB,iCACpBC,GAAqB,iCACrBC,GAA0B,iDAC1BC,GAA2B,gDAC3BC,GAAqB,iCACrBC,GAA2B,6CAE3BC,GAAuB,CAClCN,GACAD,GACAE,GACAC,GACAC,GACAC,GACAC,IAGWE,GAAuB,+DACvBC,GAAiC,2EACjCC,GAAuC,uFACvCC,GAA4B,iCAC5BC,GAA2C,2EAC3CC,GAAiD,uFACjDC,GAAsC,iFACtCC,GAAgC,qEAChCC,GAAwB,mDAExBC,GAAS,CACpB,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,gBCnEaC,OAxBf,SAAmBpI,GACjB,IAAMqI,EAAe,CAACvB,GAAD9C,OAAA9D,OAAA6D,EAAA,EAAA7D,CAChB+G,IADgB,CACWF,IAAkBuB,IAAI,SAACC,GAAD,OACpD9F,EAAAC,EAAAC,cAAA6F,EAAA,EAAOC,OAAP,CACEC,UAAWH,EACXI,MAAOJ,EACPK,IAAKL,EACLM,MAAO,QAIX,OACEpG,EAAAC,EAAAC,cAAA6F,EAAA,GACEG,MAAO,SAACG,GAAsB,OAAO9I,EAAM2I,OAC3CI,WAAY/I,EAAMgJ,KAClBC,WAAY,CAAEC,SAAU,IACxBC,OAAQ,CAAEC,EAAG,KACbC,KAAK,SAEJhB,ICoDQiB,oLA7DX,OACE7G,EAAAC,EAAAC,cAAAG,EAAA,OACEL,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAAC4G,GAAD,CACEZ,MAAOjB,GACPsB,KAAM5I,KAAKJ,MAAMwJ,sBAGrB/G,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAAC4G,GAAD,CACEZ,MAAOhB,GACPqB,KAAM5I,KAAKJ,MAAMyJ,4BAGrBhH,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAAC4G,GAAD,CACEZ,MAAOf,GACPoB,KAAM5I,KAAKJ,MAAM0J,iCAGrBjH,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAAC4G,GAAD,CACEZ,MAAOd,GACPmB,KAAM5I,KAAKJ,MAAM2J,qBAGrBlH,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAAC4G,GAAD,CACEZ,MAAOb,GACPkB,KAAM5I,KAAKJ,MAAM4J,4BAGrBnH,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAAC4G,GAAD,CACEZ,MAAOZ,GACPiB,KAAM5I,KAAKJ,MAAM6J,iCAGrBpH,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAAC4G,GAAD,CACEZ,MAAOX,GACPgB,KAAM5I,KAAKJ,MAAM8J,8BAGrBrH,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAAC4G,GAAD,CACEZ,MAAOV,GACPe,KAAM5I,KAAKJ,MAAM+J,mBAGrBtH,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAAC4G,GAAD,CACEZ,MAAOT,GACPc,KAAM5I,KAAKJ,MAAMgK,oBAxDN9E,IAAMC,6BCN7B,SAAS8E,GAAUjK,GACjB,IAAMkK,EACJzH,EAAAC,EAAAC,cAAA6F,EAAA,EAAOC,OAAP,CACEC,UAAW1B,EACX2B,MAAO3B,EACP4B,IAAK5B,EACL6B,MAAO,MAILR,EAAe,CAACvB,GAAD9C,OAAA9D,OAAA6D,EAAA,EAAA7D,CAChB+G,IADgB,CACWF,IAAkBuB,IAAI,SAACC,GAAD,OACpD9F,EAAAC,EAAAC,cAAA6F,EAAA,EAAOC,OAAP,CACEC,UAAWH,EACXI,MAAOJ,EACPK,IAAKL,EACLM,MAAO,QAIX,OACEpG,EAAAC,EAAAC,cAAA6F,EAAA,GACEG,MAAO,SAACG,GAAsB,OAAO9I,EAAM2I,OAC3CI,WAAY/I,EAAMmK,eAAeC,OAAS,EACxCpK,EAAMgJ,KAAKqB,OAAO,SAAA9B,GAAI,OAA0D,GAAtDvI,EAAMmK,eAAe/F,QAAQmE,EAAKvB,MAAyBhH,EAAMgJ,KAC7FC,WAAY,CAAEC,SAAU,IACxBC,OAAQ,CAAEC,EAAG,KACbC,KAAK,SAEJa,EACA7B,GAKP4B,GAAUK,aAAe,CACvBH,eAAgB,IAGHF,UCjCTM,eAKJ,SAAAA,EAAYvK,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmK,IACjBtK,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqK,GAAAhK,KAAAH,KAAMJ,KAMRwK,aAAe,SAACL,GACQ,MAAlBA,GAA0BA,EAAeC,OAAS,EACpDnK,EAAK4D,SAAS,CACZsG,eAAgBA,IAGlBlK,EAAK4D,SAAS,CACZsG,eAAgB,MAZpBlK,EAAKc,MAAQ,CACXoJ,eAAgB,IAHDlK,wEAoBjB,OACEwC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAAC,EAAA,OACEH,EAAAC,EAAAC,cAAAG,EAAA,OACEL,EAAAC,EAAAC,cAAAI,EAAA,GAAKC,KAAM,IACTP,EAAAC,EAAAC,cAAAC,EAAA,EAAMK,KAAN,CACEC,MAAM,yDACNC,SAAU,CAAEH,KAAM,GAClBI,WAAY,CAAEJ,KAAM,KAEpBP,EAAAC,EAAAC,cAAA8H,GAAA,GACEC,KAAK,WACL3F,MAAO,CAAE8D,MAAO,QAChB8B,SAAUvK,KAAKoK,cAGbpK,KAAKJ,MAAM4K,OAAOtC,IAAI,SAACuC,GAAD,OACpBpI,EAAAC,EAAAC,cAAA8H,GAAA,EAAQK,OAAR,CAAelC,IAAKiC,GAAOA,UAQzCpI,EAAAC,EAAAC,cAAAG,EAAA,OACEL,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACoI,GAAD,CACEpC,MAAOjB,GACPsB,KAAM5I,KAAKJ,MAAMwJ,mBACjBW,eAAgB/J,KAAKW,MAAMoJ,kBAG/B1H,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACoI,GAAD,CACEpC,MAAOhB,GACPqB,KAAM5I,KAAKJ,MAAMyJ,yBACjBU,eAAgB/J,KAAKW,MAAMoJ,kBAG/B1H,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACoI,GAAD,CACEpC,MAAOf,GACPoB,KAAM5I,KAAKJ,MAAM0J,8BACjBS,eAAgB/J,KAAKW,MAAMoJ,kBAG/B1H,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACoI,GAAD,CACEpC,MAAOd,GACPmB,KAAM5I,KAAKJ,MAAM2J,kBACjBQ,eAAgB/J,KAAKW,MAAMoJ,kBAG/B1H,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACoI,GAAD,CACEpC,MAAOb,GACPkB,KAAM5I,KAAKJ,MAAM4J,yBACjBO,eAAgB/J,KAAKW,MAAMoJ,kBAG/B1H,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACoI,GAAD,CACEpC,MAAOZ,GACPiB,KAAM5I,KAAKJ,MAAM6J,8BACjBM,eAAgB/J,KAAKW,MAAMoJ,kBAG/B1H,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACoI,GAAD,CACEpC,MAAOX,GACPgB,KAAM5I,KAAKJ,MAAM8J,2BACjBK,eAAgB/J,KAAKW,MAAMoJ,kBAG/B1H,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACoI,GAAD,CACEpC,MAAOV,GACPe,KAAM5I,KAAKJ,MAAM+J,gBACjBI,eAAgB/J,KAAKW,MAAMoJ,kBAG/B1H,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACoI,GAAD,CACEpC,MAAOT,GACPc,KAAM5I,KAAKJ,MAAMgK,SACjBG,eAAgB/J,KAAKW,MAAMoJ,2BA/GlBjF,IAAMC,WAAvBoF,GACGD,aAAe,CACpBM,OAAQ,IAsHGL,UC9Hf,SAASS,GAAahL,GACpB,IAAMiL,EACJxI,EAAAC,EAAAC,cAAA6F,EAAA,EAAOC,OAAP,CACEC,UAAWnC,EACXoC,MAAOpC,EACPqC,IAAKrC,EACLsC,MAAO,MAILR,EAAe,CAACvB,GAAD9C,OAAA9D,OAAA6D,EAAA,EAAA7D,CAChB+G,IADgB,CACWF,IAAkBuB,IAAI,SAACC,GAAD,OACpD9F,EAAAC,EAAAC,cAAA6F,EAAA,EAAOC,OAAP,CACEC,UAAWH,EACXI,MAAOJ,EACPK,IAAKL,EACLM,MAAO,QAIX,OACEpG,EAAAC,EAAAC,cAAA6F,EAAA,GACEG,MAAO,SAACG,GAAsB,OAAO9I,EAAM2I,OAC3CI,WAAY/I,EAAMkL,iBAAiBd,OAAS,EAC1CpK,EAAMgJ,KAAKqB,OAAO,SAAA9B,GAAI,OAA+D,GAA3DvI,EAAMkL,iBAAiB9G,QAAQmE,EAAKhC,MAA4BvG,EAAMgJ,KAClGC,WAAY,CAAEC,SAAU,IACxBC,OAAQ,CAAEC,EAAG,KACbC,KAAK,SAEJ4B,EACA5C,GAKP2C,GAAaV,aAAe,CAC1BY,iBAAkB,IAGLF,UChCR,SAASG,GAAkBC,GAChC,IACIC,EAAMD,EAAYE,MADZ,2BAEV,OAAID,EACYD,EAAYG,UAAU,EAAGH,EAAYhH,QAAQiH,IAGpDD,EAIJ,SAASI,GAAUC,GACxB,IAAIC,EAAOD,EAAWH,MAAM,QACxBK,EAAM,EAAG1J,EAAO,EAAG2J,EAAM,EAM7B,OALIF,GAAQA,EAAKtB,OAAS,IACxBuB,EAAME,OAAOC,SAASJ,EAAK,IAC3BzJ,EAAO4J,OAAOC,SAASJ,EAAK,IAC5BE,EAAMC,OAAOC,SAASJ,EAAK,KAEtB,CAAEC,MAAK1J,OAAM2J,OAaf,SAASG,GAAmBX,GACjC,IAD8CY,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAE9C,QAAAC,EAAAC,EAAkBlE,GAAlBmE,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA0B,KAAjBU,EAAiBN,EAAA1L,MACxB,IAAmC,GAA/B0K,EAAYhH,QAAQsI,GAEtB,OADetB,EAAYG,UAAU,EAAGH,EAAYhH,QAAQsI,KAJlB,MAAAjL,GAAAwK,GAAA,EAAAC,EAAAzK,EAAA,YAAAuK,GAAA,MAAAK,EAAAM,QAAAN,EAAAM,SAAA,WAAAV,EAAA,MAAAC,GAQ9C,OAAOd,EAGF,SAASwB,GAAc5D,GAC5B,IAAI6D,EAAY,GACZC,EAAS,EACb,IAAK,IAAI1B,KAAepC,EAAM,KAAA+D,GAAA,EAAAC,GAAA,EAAAC,OAAAd,EAAA,IAC5B,QAAAe,EAAAC,EAA0B9G,EAA1BiG,OAAAC,cAAAQ,GAAAG,EAAAC,EAAAX,QAAAC,MAAAM,GAAA,EAAmD,KAA1CK,EAA0CF,EAAAxM,MAC7C2M,EAAU,GACdP,IACAO,EAAQzE,IAAMkE,EACdO,EAAQ9G,GAAoB6E,EAC5BiC,EAAQvG,GAAsBsG,EAC9B,IANiD,IAAAE,EAAApN,OAAA6D,EAAA,EAAA7D,CAMlB+G,IANkBjD,OAAA,CAMS+C,IAA1DwG,EAAA,EAAAA,EAAAD,EAAAlD,OAAAmD,IAA6E,CAAxE,IAAIC,EAAcF,EAAAC,GACrBF,EAAQG,GAAkBxE,EAAKoC,GAAaoC,GAAgBJ,GAE9DP,EAAUY,KAAKJ,IAVW,MAAA5L,GAAAuL,GAAA,EAAAC,EAAAxL,EAAA,YAAAsL,GAAA,MAAAI,EAAAR,QAAAQ,EAAAR,SAAA,WAAAK,EAAA,MAAAC,IAa9B,OAAOJ,EAGF,SAASa,GAAkB1E,GAChC,IAAI6D,EAAY,GACZC,EAAS,EAFyBa,GAAA,EAAAC,GAAA,EAAAC,OAAA1B,EAAA,IAGtC,QAAA2B,EAAAC,EAA0B1H,EAA1BiG,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EAAmD,KAA1CP,EAA0CU,EAAApN,MAC7C2M,EAAU,GACdP,IACAO,EAAQzE,IAAMkE,EACdO,EAAQvG,GAAsBsG,EAC9B,IALiD,IAAAY,EAAA9N,OAAA6D,EAAA,EAAA7D,CAKlB+G,IALkBjD,OAAA,CAKS+C,IAA1DkH,EAAA,EAAAA,EAAAD,EAAA5D,OAAA6D,IAA6E,CAAxE,IAAIT,EAAcQ,EAAAC,GACrBZ,EAAQG,GAAkBxE,EAAKwE,GAAgBJ,GAEjDP,EAAUY,KAAKJ,IAXqB,MAAA5L,GAAAmM,GAAA,EAAAC,EAAApM,EAAA,YAAAkM,GAAA,MAAAI,EAAApB,QAAAoB,EAAApB,SAAA,WAAAiB,EAAA,MAAAC,GAatC,OAAOhB,EAGF,SAASqB,GAAkBlF,GAChC,IAAI6D,EAAY,GACZC,EAAS,EACb,IAAK,IAAI1B,KAAepC,EACtB,IAD4B,IAAAmF,EACF,CAACjH,GAAoBC,GAAmBC,GAChEC,GAAyBC,GAA0BC,GAAoBC,IADzE4G,EAAA,EAAAA,EAAAD,EAAA/D,OAAAgE,IACoG,CAD/F,IAAIhB,EAAae,EAAAC,GAEhBf,EAAU,GACdP,IACAO,EAAQzE,IAAMkE,EACdO,EAAQ9G,GAAoB6E,EAC5BiC,EAAQvG,GAAsBsG,EAC9B,IANkG,IAAAiB,EAAAnO,OAAA6D,EAAA,EAAA7D,CAMnE+G,IANmEjD,OAAA,CAMxC+C,IAA1DuH,EAAA,EAAAA,EAAAD,EAAAjE,OAAAkE,IAA6E,CAAxE,IAAId,EAAca,EAAAC,GACrBjB,EAAQG,GAAkBxE,EAAKoC,GAAaoC,GAAgBJ,GAE9DP,EAAUY,KAAKJ,GAGnB,OAAOR,MC5FH0B,eAMJ,SAAAA,EAAYvO,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmO,IACjBtO,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqO,GAAAhO,KAAAH,KAAMJ,KAORwO,WAAa,SAAC3D,GACZ,GAAoC,MAAhC5K,EAAKD,MAAMyO,YAAY5D,GAAe,CACxC5K,EAAK4D,SAAS,CACZmF,KAAM/I,EAAKD,MAAMyO,YAAY5D,KAE/B,IAAI6D,EAAW,GACf,IAAK,IAAInG,KAAQtI,EAAKD,MAAMyO,YAAY5D,GACtC,IAAK,IAAI8D,KAAW1O,EAAKD,MAAMyO,YAAY5D,GAAMtC,IACb,GAA9BmG,EAAStK,QAAQuK,KACnBD,EAAQxO,OAAA6D,EAAA,EAAA7D,CAAOwO,GAAP1K,OAAA,CAAiB2K,KAI/B1O,EAAK4D,SAAS,CACZ6K,SAAUA,MAtBGzO,EA2BnB2O,eAAiB,SAACF,GACZA,EAAStE,OAAS,EACpBnK,EAAK4D,SAAS,CACZqH,iBAAkBwD,IAGpBzO,EAAK4D,SAAS,CACZqH,iBAAkB,MAhCtBjL,EAAKc,MAAQ,CACX2N,SAAU,GACV1F,KAAM,IAJS/I,wEAwCjB,OACEwC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAAC,EAAA,OACEH,EAAAC,EAAAC,cAAAG,EAAA,OACEL,EAAAC,EAAAC,cAAAI,EAAA,GAAKC,KAAM,IACTP,EAAAC,EAAAC,cAAAC,EAAA,EAAMK,KAAN,CACEC,MAAM,yDACNC,SAAU,CAAEH,KAAM,GAClBI,WAAY,CAAEJ,KAAM,KAEpBP,EAAAC,EAAAC,cAAA8H,GAAA,GACE1F,MAAO,CAAE8D,MAAO,QAChB8B,SAAUvK,KAAKoO,YAGbpO,KAAKJ,MAAM4K,OAAOtC,IAAI,SAACuC,GAAD,OACpBpI,EAAAC,EAAAC,cAAA8H,GAAA,EAAQK,OAAR,CAAelC,IAAKiC,GAAOA,SAOvCpI,EAAAC,EAAAC,cAAAG,EAAA,OACEL,EAAAC,EAAAC,cAAAI,EAAA,GAAKC,KAAM,IACTP,EAAAC,EAAAC,cAAAC,EAAA,EAAMK,KAAN,CACEC,MAAM,yDACNC,SAAU,CAAEH,KAAM,GAClBI,WAAY,CAAEJ,KAAM,KAEpBP,EAAAC,EAAAC,cAAA8H,GAAA,GACEC,KAAK,WACL3F,MAAO,CAAE8D,MAAO,QAChB8B,SAAUvK,KAAKwO,gBAGbxO,KAAKW,MAAM2N,SAASpG,IAAI,SAACqG,GAAD,OACtBlM,EAAAC,EAAAC,cAAA8H,GAAA,EAAQK,OAAR,CAAelC,IAAK+F,GAAUA,UAQ5ClM,EAAAC,EAAAC,cAAAG,EAAA,OACEL,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACkM,GAAD,CACElG,MAAOjB,GACPsB,KAAM4D,GAAcxM,KAAKW,MAAMiI,KAAK8F,sBACpC5D,iBAAkB9K,KAAKW,MAAMmK,oBAGjCzI,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACkM,GAAD,CACElG,MAAOhB,GACPqB,KAAM4D,GAAcxM,KAAKW,MAAMiI,KAAK+F,4BACpC5E,eAAgB/J,KAAKW,MAAMmK,oBAG/BzI,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACkM,GAAD,CACElG,MAAOf,GACPoB,KAAM4D,GAAcxM,KAAKW,MAAMiI,KAAKgG,iCACpC7E,eAAgB/J,KAAKW,MAAMmK,oBAG/BzI,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACkM,GAAD,CACElG,MAAOd,GACPmB,KAAM4D,GAAcxM,KAAKW,MAAMiI,KAAKiG,qBACpC9E,eAAgB/J,KAAKW,MAAMmK,oBAG/BzI,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACkM,GAAD,CACElG,MAAOb,GACPkB,KAAM4D,GAAcxM,KAAKW,MAAMiI,KAAKkG,4BACpC/E,eAAgB/J,KAAKW,MAAMmK,oBAG/BzI,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACkM,GAAD,CACElG,MAAOZ,GACPiB,KAAM4D,GAAcxM,KAAKW,MAAMiI,KAAKmG,iCACpChF,eAAgB/J,KAAKW,MAAMmK,oBAG/BzI,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACkM,GAAD,CACElG,MAAOX,GACPgB,KAAM4D,GAAcxM,KAAKW,MAAMiI,KAAKoG,8BACpCjF,eAAgB/J,KAAKW,MAAMmK,oBAG/BzI,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACkM,GAAD,CACElG,MAAOV,GACPe,KAAM4D,GAAcxM,KAAKW,MAAMiI,KAAKqG,mBACpClF,eAAgB/J,KAAKW,MAAMmK,oBAG/BzI,EAAAC,EAAAC,cAAA,OAAKoC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAACkM,GAAD,CACElG,MAAOT,GACPc,KAAMkF,GAAkB9N,KAAKW,MAAMiI,KAAKsG,YACxCnF,eAAgB/J,KAAKW,MAAMmK,6BAxJfhG,IAAMC,WAA1BoJ,GACGjE,aAAe,CACpBM,OAAQ,GACR6D,YAAa,IA8JFF,uEC/GTgB,WAA4B,sBAC5BC,GAAsB,2BACtBC,GAAyB,qBACzBC,GAAsB,qBACtBC,GAA+B,iCAC/BC,GAAwB,2BAKxBC,GAAK,SAEX,SAASC,KAEP,IADA,IAAIxH,EAAM,GADegF,EAAApN,OAAA6D,EAAA,EAAA7D,CAEM+G,IAFNjD,OAAA,CAEiC+C,IAA1DwG,EAAA,EAAAA,EAAAD,EAAAlD,OAAAmD,IAA6E,CAAxE,IAAIC,EAAcF,EAAAC,GACrBjF,EAAIkF,GAAkB,GADqD,IAAAxB,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAE3E,QAAAC,EAAAC,EAAqB5E,GAArB6E,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA2C,KAAlC+D,EAAkC3D,EAAA1L,MACzC4H,EAAIkF,GAAgBuC,GAAY,GAHyC,MAAAtO,GAAAwK,GAAA,EAAAC,EAAAzK,EAAA,YAAAuK,GAAA,MAAAK,EAAAM,QAAAN,EAAAM,SAAA,WAAAV,EAAA,MAAAC,IAM7E,OAAO5D,EAGT,SAAS0H,KAEP,IADA,IAAI1H,EAAM,GADW0F,EAAA9N,OAAA6D,EAAA,EAAA7D,CAEU+G,IAFVjD,OAAA,CAEqC+C,IAA1DkH,EAAA,EAAAA,EAAAD,EAAA5D,OAAA6D,IAA6E,CAAxE,IAAIT,EAAcQ,EAAAC,GACrB3F,EAAIkF,GAAkB,GADqD,IAAAT,GAAA,EAAAC,GAAA,EAAAC,OAAAd,EAAA,IAE3E,QAAAe,EAAAC,EAAqB9G,EAArBiG,OAAAC,cAAAQ,GAAAG,EAAAC,EAAAX,QAAAC,MAAAM,GAAA,EAA8C,KAArCgD,EAAqC7C,EAAAxM,MAC5C4H,EAAIkF,GAAgBuC,GAAY,GAHyC,MAAAtO,GAAAuL,GAAA,EAAAC,EAAAxL,EAAA,YAAAsL,GAAA,MAAAI,EAAAR,QAAAQ,EAAAR,SAAA,WAAAK,EAAA,MAAAC,IAM7E,OAAO3E,EAGT,SAAS2H,GAAaC,GACpB,OAA2D,IAApDA,EAAa9L,QAAQmL,IAisB9B,SAASY,GAAcC,EAAchD,EAAeiD,GAClD,IAAK,IAAIjF,KAAegF,EAAc,CACR,MAAxBC,EAAQjF,KACViF,EAAQjF,GAAe0E,MAEzB,IAJoC,IAAA3B,EAAAjO,OAAA6D,EAAA,EAAA7D,CAIL+G,IAJKjD,OAAA,CAIsB+C,IAA1DqH,EAAA,EAAAA,EAAAD,EAAA/D,OAAAgE,IAA6E,CAAxE,IAAIZ,EAAcW,EAAAC,GACjBhB,IAAkBlG,IACpBkJ,EAAahF,GAAaoC,GAAgBhI,GAAiB,EAC3D6K,EAAQjF,GAAaoC,GAAgBJ,IAClCgD,EAAahF,GAAaoC,GAAgB3H,GACzCuK,EAAahF,GAAaoC,GAAgBhI,IAAgB8K,QAAQ,GAC7DlD,IAAkBjG,IAC3BiJ,EAAahF,GAAaoC,GAAgBhI,GAAiB,EAC3D6K,EAAQjF,GAAaoC,GAAgBJ,IAClCgD,EAAahF,GAAaoC,GAAgB3H,GACzCuK,EAAahF,GAAaoC,GAAgBhI,IAAgB8K,QAAQ,GAC7DlD,IAAkBhG,IAC3BgJ,EAAahF,GAAaoC,GAAgBhI,GAAiB,EAC3D6K,EAAQjF,GAAaoC,GAAgBJ,IAClCgD,EAAahF,GAAaoC,GAAgB3H,GACzCuK,EAAahF,GAAaoC,GAAgBhI,IAAgB8K,QAAQ,GAC7DlD,IAAkB/F,IAC3B+I,EAAahF,GAAaoC,GAAgBjI,GAAuB,EACjE8K,EAAQjF,GAAaoC,GAAgBJ,IAClCgD,EAAahF,GAAaoC,GAAgBvH,GACzCmK,EAAahF,GAAaoC,GAAgBjI,IAAsB+K,QAAQ,GACnElD,IAAkB9F,IAC3B8I,EAAahF,GAAaoC,GAAgBjI,GAAuB,EACjE8K,EAAQjF,GAAaoC,GAAgBJ,IAClCgD,EAAahF,GAAaoC,GAAgBtH,GACzCkK,EAAahF,GAAaoC,GAAgBjI,IAAsB+K,QAAQ,GACnElD,IAAkB7F,IAC3B6I,EAAahF,GAAaoC,GAAgBhI,GAAiB,EAC3D6K,EAAQjF,GAAaoC,GAAgBJ,IAClCgD,EAAahF,GAAaoC,GAAgBxH,GACzCoK,EAAahF,GAAaoC,GAAgBhI,IAAgB8K,QAAQ,GAC7DlD,IAAkB5F,IAC3B4I,EAAahF,GAAaoC,GAAgBhI,GAAiB,IAC3D6K,EAAQjF,GAAaoC,GAAgBJ,IAClCgD,EAAahF,GAAaoC,GAAgB3H,GACzCuK,EAAahF,GAAaoC,GAAgBhI,IAAgB8K,QAAQ,MAM9E,SAASC,GAAkBH,EAAchD,EAAeiD,GACtD,IAD+D,IAAAhC,EAAAnO,OAAA6D,EAAA,EAAA7D,CAChC+G,IADgCjD,OAAA,CACL+C,IAA1DuH,EAAA,EAAAA,EAAAD,EAAAjE,OAAAkE,IAA6E,CAAxE,IAAId,EAAca,EAAAC,GACW,MAA3B+B,EAAQ7C,KACX6C,EAAQ7C,GAAkB,IAExBJ,IAAkBlG,IACpBkJ,EAAa5C,GAAgBhI,GAAiB,EAC9C6K,EAAQ7C,GAAgBJ,IACrBgD,EAAa5C,GAAgB3H,GAC5BuK,EAAa5C,GAAgBhI,IAAgB8K,QAAQ,GAChDlD,IAAkBjG,IAC3BiJ,EAAa5C,GAAgBhI,GAAiB,EAC9C6K,EAAQ7C,GAAgBJ,IACrBgD,EAAa5C,GAAgB3H,GAC5BuK,EAAa5C,GAAgBhI,IAAgB8K,QAAQ,GAChDlD,IAAkBhG,IAC3BgJ,EAAa5C,GAAgBhI,GAAiB,EAC9C6K,EAAQ7C,GAAgBJ,IACrBgD,EAAa5C,GAAgB3H,GAC5BuK,EAAa5C,GAAgBhI,IAAgB8K,QAAQ,GAChDlD,IAAkB/F,IAC3B+I,EAAa5C,GAAgBjI,GAAuB,EACpD8K,EAAQ7C,GAAgBJ,IACrBgD,EAAa5C,GAAgBvH,GAC5BmK,EAAa5C,GAAgBjI,IAAsB+K,QAAQ,GACtDlD,IAAkB9F,IAC3B8I,EAAa5C,GAAgBjI,GAAuB,EACpD8K,EAAQ7C,GAAgBJ,IACrBgD,EAAa5C,GAAgBtH,GAC5BkK,EAAa5C,GAAgBjI,IAAsB+K,QAAQ,GACtDlD,IAAkB7F,IAC3B6I,EAAa5C,GAAgBhI,GAAiB,EAC9C6K,EAAQ7C,GAAgBJ,IACrBgD,EAAa5C,GAAgBxH,GAC5BoK,EAAa5C,GAAgBhI,IAAgB8K,QAAQ,GAChDlD,IAAkB5F,IAC3B4I,EAAa5C,GAAgBhI,GAAiB,IAC9C6K,EAAQ7C,GAAgBJ,IACrBgD,EAAa5C,GAAgB3H,GAC5BuK,EAAa5C,GAAgBhI,IAAgB8K,QAAQ,KA4B/D,IAAIE,GAAe,EAEnB,SAASC,GAAezH,EAAM6B,GAC5B,IAAIgC,EAAY,GADkB6D,GAAA,EAAAC,GAAA,EAAAC,OAAAzE,EAAA,IAElC,QAAA0E,EAAAC,EAA0BzK,EAA1BiG,OAAAC,cAAAmE,GAAAG,EAAAC,EAAAtE,QAAAC,MAAAiE,GAAA,EAAmD,KAA1CtD,EAA0CyD,EAAAnQ,MAC7C2M,EAAU,GACdmD,KACAnD,EAAQzE,IAAM4H,GACdnD,EAAQrG,GAAiB6D,EACzBwC,EAAQvG,GAAsBsG,EAC9B,IANiD,IAAA2D,EAAA7Q,OAAA6D,EAAA,EAAA7D,CAMlB+G,IANkBjD,OAAA,CAMS+C,IAA1DiK,EAAA,EAAAA,EAAAD,EAAA3G,OAAA4G,IAA6E,CAAxE,IAAIxD,EAAcuD,EAAAC,GACrB3D,EAAQG,GAAkBxE,EAAKwE,GAAgBJ,GAEjDP,EAAUY,KAAKJ,IAXiB,MAAA5L,GAAAkP,GAAA,EAAAC,EAAAnP,EAAA,YAAAiP,GAAA,MAAAI,EAAAnE,QAAAmE,EAAAnE,SAAA,WAAAgE,EAAA,MAAAC,GAalC,OAAO/D,EAGT,SAASoE,GAAsBjI,EAAM6B,GAEnC,IADA,IAAIgC,EAAY,GADyBqE,EAEf,CAAChK,GAAoBC,GAAmBC,GAChEC,GAAyBC,GAA0BC,GAAoBC,IADzE2J,EAAA,EAAAA,EAAAD,EAAA9G,OAAA+G,IACoG,CAD/F,IAAI/D,EAAa8D,EAAAC,GAEhB9D,EAAU,GACdmD,KACAnD,EAAQzE,IAAM4H,GACdnD,EAAQrG,GAAiB6D,EACzBwC,EAAQvG,GAAsBsG,EAC9B,IANkG,IAAAgE,EAAAlR,OAAA6D,EAAA,EAAA7D,CAMnE+G,IANmEjD,OAAA,CAMxC+C,IAA1DsK,EAAA,EAAAA,EAAAD,EAAAhH,OAAAiH,IAA6E,CAAxE,IAAI7D,EAAc4D,EAAAC,GACrBhE,EAAQG,GAAkBxE,EAAKwE,GAAgBJ,GAEjDP,EAAUY,KAAKJ,GAEjB,OAAOR,EAGT,SAASyE,GAAiBC,EAAaC,GACrC,IAAIC,EAAc,GA6BlB,IAAK,IAAIrG,KA5BTmG,EAAYG,QAAQ,SAAUC,GAC5B,IAAK,IAAIvG,KAAeuG,EAAQ,CAC9B,IAAIC,EAAsBJ,EAAWpG,GACG,MAApCqG,EAAYG,KACdH,EAAYG,GAAuB5B,MAErC,IAL8B,IAAA6B,EAAA3R,OAAA6D,EAAA,EAAA7D,CAKC+G,IALDjD,OAAA,CAK4B+C,IAA1D+K,EAAA,EAAAA,EAAAD,EAAAzH,OAAA0H,IAA6E,CAAxE,IAAItE,EAAcqE,EAAAC,GAAsDC,GAAA,EAAAC,GAAA,EAAAC,OAAA9F,EAAA,IAC3E,QAAA+F,EAAAC,EAAiB9L,EAAjBiG,OAAAC,cAAAwF,GAAAG,EAAAC,EAAA3F,QAAAC,MAAAsF,GAAA,EAA0C,KAAjCxJ,EAAiC2J,EAAAxR,MACxC,GAAI6H,IAASpC,EAA2B,CACtC,IAAIiM,EAAmBT,EAAOvG,GAAaoC,GAAgB3H,GACvDwM,EAAyBV,EAAOvG,GAAaoC,GAAgBrH,GACjEsL,EAAYG,GAAqBpE,GAAgBrH,IAC/CiM,EAAmBC,OAChB,GAAI9J,IAASnC,EAA0B,CAC5C,IAAIkM,EAAwBX,EAAOvG,GAAaoC,GAAgBpH,GAC5DmM,EAAkBZ,EAAOvG,GAAaoC,GAAgB/H,GAC1DgM,EAAYG,GAAqBpE,GAAgBpH,IAC/CmM,EAAkBD,OAGpBb,EAAYG,GAAqBpE,GAAgBjF,IAC/CoJ,EAAOvG,GAAaoC,GAAgBjF,IAfiC,MAAA9G,GAAAuQ,GAAA,EAAAC,EAAAxQ,EAAA,YAAAsQ,GAAA,MAAAI,EAAAxF,QAAAwF,EAAAxF,SAAA,WAAAqF,EAAA,MAAAC,QAsBzDR,EACtB,IAAK,IAAIjE,KAAkBiE,EAAYrG,GAAc,CACnD,IAAIiH,EAAyBZ,EAAYrG,GAAaoC,GAAgBrH,GAClEiM,EAAmBX,EAAYrG,GAAaoC,GAAgB3H,GAChE4L,EAAYrG,GAAaoC,GAAgBrH,GACvCiM,EAAmB,EAAII,OAAOH,EAAyBD,GAAkB9B,QAAQ,GAAK,EAExF,IAAIgC,EAAwBb,EAAYrG,GAAaoC,GAAgBpH,GACjEmM,EAAkBd,EAAYrG,GAAaoC,GAAgB/H,GAC/DgM,EAAYrG,GAAaoC,GAAgBpH,GACvCmM,EAAkB,EAAIC,OAAOF,EAAwBC,GAAiBjC,QAAQ,GAAK,EAGzF,OAAOmB,EAGT,SAASgB,GAAmBlB,GAC1B,IAAIE,EAAczB,KAyBlB,IAAK,IAAIxC,KAxBT+D,EAAYG,QAAQ,SAAUC,GAC5B,IAAK,IAAIvG,KAAeuG,EACtB,IAD8B,IAAAe,EAAAxS,OAAA6D,EAAA,EAAA7D,CACC+G,IADDjD,OAAA,CAC4B+C,IAA1D4L,EAAA,EAAAA,EAAAD,EAAAtI,OAAAuI,IAA6E,CAAxE,IAAInF,EAAckF,EAAAC,GAAsDC,GAAA,EAAAC,GAAA,EAAAC,OAAA3G,EAAA,IAC3E,QAAA4G,EAAAC,EAAiB3M,EAAjBiG,OAAAC,cAAAqG,GAAAG,EAAAC,EAAAxG,QAAAC,MAAAmG,GAAA,EAA0C,KAAjCrK,EAAiCwK,EAAArS,MACxC,GAAI6H,IAASpC,EAA2B,CACtC,IAAIiM,EAAmBT,EAAOvG,GAAaoC,GAAgB3H,GACvDwM,EAAyBV,EAAOvG,GAAaoC,GAAgBrH,GACjEsL,EAAYjE,GAAgBrH,IAC1BiM,EAAmBC,OAChB,GAAI9J,IAASnC,EAA0B,CAC5C,IAAIkM,EAAwBX,EAAOvG,GAAaoC,GAAgBpH,GAC5DmM,EAAkBZ,EAAOvG,GAAaoC,GAAgB/H,GAC1DgM,EAAYjE,GAAgBpH,IAC1BmM,EAAkBD,OAGpBb,EAAYjE,GAAgBjF,IAC1BoJ,EAAOvG,GAAaoC,GAAgBjF,IAfiC,MAAA9G,GAAAoR,GAAA,EAAAC,EAAArR,EAAA,YAAAmR,GAAA,MAAAI,EAAArG,QAAAqG,EAAArG,SAAA,WAAAkG,EAAA,MAAAC,OAsBtDrB,EAAa,CACtC,IAAIY,EAAyBZ,EAAYjE,GAAgBrH,GACrDiM,EAAmBX,EAAYjE,GAAgB3H,GACnD4L,EAAYjE,GAAgBrH,GAC1BiM,EAAmB,EAAII,OAAOH,EAAyBD,GAAkB9B,QAAQ,GAAK,EAExF,IAAIgC,EAAwBb,EAAYjE,GAAgBpH,GACpDmM,EAAkBd,EAAYjE,GAAgB/H,GAClDgM,EAAYjE,GAAgBpH,GAC1BmM,EAAkB,EAAIC,OAAOF,EAAwBC,GAAiBjC,QAAQ,GAAK,EAGvF,OAAOmB,EAIT,SAASwB,GAAcjK,EAAMlH,EAAWM,GAEtC,IAKI0M,EAh7BN,SAAmB9F,EAAMkK,EAAgBC,GAEvC,IAAIC,EAAU,GAFuCzF,GAAA,EAAAC,GAAA,EAAAC,OAAA1B,EAAA,IAIrD,QAAA2B,EAAAC,EAAmB/E,EAAnBsD,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EAAyB,KAAhB0F,EAAgBvF,EAAApN,MACnB0K,EAAcD,GAAkBkI,EAAO9M,IAEf,MAAxB6M,EAAQhI,KACVgI,EAAQhI,GAAe4E,MAEzB,IAAIxC,EAAiB6F,EAAO7M,GAExB8M,EAAkBF,EAAQhI,GAAaoC,GAEvC0C,EAAemD,EAAO5M,GACtB8M,EAAkBC,KAAOH,EAAOxM,IA2DpC,IAxDIoJ,GAAaC,IACfA,IAAiBP,IACjBO,IAAiBR,IAAuBQ,IAAiBV,KACzD8D,EAAgB9N,MAIdyK,GAAaC,IAAiBA,GAAgBV,KAC9CU,IAAiBP,IAAgCO,IAAiBR,KAClE6D,EAAkBJ,IACpBG,EAAgB7N,KAIdwK,GAAaC,IAAiBA,EAAa9L,QAAQqL,IAA0B,GAC/E6D,EAAgB5N,KAIdwK,IAAiBV,IACnB8D,EAAgB3N,KAIduK,GAAgBN,IAClB0D,EAAgB1N,MAIbsK,IAAiBR,IAAuBQ,IAAiBP,KAC3D4D,GAAmBL,GAAkBK,GAAmBJ,GACzDG,EAAgBzN,KAIdqK,IAAiBR,IAClB6D,GAAmBL,GAAkBK,GAAmBJ,GACzDG,EAAgBxN,KAIdoK,IAAiBP,IAClB4D,GAAmBL,GAAkBK,GAAmBJ,GACzDG,EAAgBvN,KAIbmK,IAAiBR,IACpBQ,IAAiBP,IAAiC0D,EAAO3M,KAA2BmJ,IAChF0D,GAAmBL,GAAkBK,GAAmBJ,GAC1DG,EAAgBtN,KAMhBiK,GAAaC,IACfA,IAAiBP,IACjBO,IAAiBR,IAAuBQ,IAAiBV,GAAqB,KAAAiE,EACrDjI,GAAU6H,EAAO1M,IAApCgF,EADwE8H,EACxE9H,IAAK1J,EADmEwR,EACnExR,KAAM2J,EAD6D6H,EAC7D7H,IACP,GAAND,EAAW,GAAY,GAAP1J,EAAY2J,GAAO,IACrC0H,EAAgBrN,KAER,GAAN0F,EAAW,GAAY,GAAP1J,EAAY2J,GAAO,MACrC0H,EAAgBpN,KAKpB,GAAIgK,IAAiBR,IAAuBQ,IAAiBP,GAA8B,CACzF,IAAI4D,EAAkBC,KAAOH,EAAOxM,IACpC,GAAI0M,GAAmBL,GAAkBK,GAAmBJ,EAAc,KAAAO,EAC/ClI,GAAU6H,EAAOzM,IAApC+E,EADkE+H,EAClE/H,IAAK1J,EAD6DyR,EAC7DzR,KAAM2J,EADuD8H,EACvD9H,IACjB0H,EAAgBnN,IAA+BwF,EAAM1J,EAAO,GAAK2J,EAAM,GAAK,IAKhF,GAAIqE,GAAaC,IAAiBA,IAAiBV,KAC/CU,IAAiBP,IAAgCO,IAAiBR,KAClE6D,EAAkBJ,EAAe,KAAAQ,EACVnI,GAAU6H,EAAOzM,IAApC+E,EAD6BgI,EAC7BhI,IAAK1J,EADwB0R,EACxB1R,KAAM2J,EADkB+H,EAClB/H,IACjB0H,EAAgBlN,IAA8BuF,EAAM1J,EAAO,GAAK2J,EAAM,GAAK,IAIzEqE,GAAaC,IAAiBA,IAAiBP,IACjDO,IAAiBR,IAAuBQ,IAAiBV,IACzDU,GAAgBN,KAChB0D,EAAgB/N,MA3GiC,MAAA9D,IAAAmM,GAAA,EAAAC,EAAApM,GAAA,YAAAkM,GAAA,MAAAI,EAAApB,QAAAoB,EAAApB,SAAA,WAAAiB,EAAA,MAAAC,GA+GrD,IAAK,IAAIzC,KAAegI,EAAS,KAAAQ,GAAA,EAAAC,GAAA,EAAAC,QAAA3H,EAAA,IAE/B,QAAA4H,GAAAC,GAA2B/M,GAA3BqF,OAAAC,cAAAqH,GAAAG,GAAAC,GAAAxH,QAAAC,MAAAmH,GAAA,EAAsD,KAA7CpG,GAA6CuG,GAAArT,MAAAuT,IAAA,EAAAC,IAAA,EAAAC,QAAAhI,EAAA,IACpD,QAAAiI,GAAAC,GAA0BhO,EAA1BiG,OAAAC,cAAA0H,IAAAG,GAAAC,GAAA7H,QAAAC,MAAAwH,IAAA,EAAmD,KAA1C7G,GAA0CgH,GAAA1T,MACjD0S,EAAQhI,GAAarE,GAAkBqG,KAAkBgG,EAAQhI,GAAaoC,IAAgBJ,KAF5C,MAAA3L,IAAAyS,IAAA,EAAAC,GAAA1S,GAAA,YAAAwS,IAAA,MAAAI,GAAA1H,QAAA0H,GAAA1H,SAAA,WAAAuH,GAAA,MAAAC,MAFvB,MAAA1S,IAAAoS,GAAA,EAAAC,GAAArS,GAAA,YAAAmS,GAAA,MAAAI,GAAArH,QAAAqH,GAAArH,SAAA,WAAAkH,EAAA,MAAAC,IAS/B,IAAK,IAAItG,MAAkB4F,EAAQhI,GAAc,CAC/C,IAAIiH,GAAyBe,EAAQhI,GAAaoC,IAAgBrH,GAC9DiM,GAAmBgB,EAAQhI,GAAaoC,IAAgB3H,GAC5DuN,EAAQhI,GAAaoC,IAAgBrH,GACnCiM,GAAmB,EAAII,OAAOH,GAAyBD,IAAkB9B,QAAQ,GAAK,EAExF,IAAIgC,GAAwBc,EAAQhI,GAAaoC,IAAgBpH,GAC7DmM,GAAkBa,EAAQhI,GAAaoC,IAAgB/H,GAC3D2N,EAAQhI,GAAaoC,IAAgBpH,GACnCmM,GAAkB,EAAIC,OAAOF,GAAwBC,IAAiBjC,QAAQ,GAAK,GAGzF,OAAO8C,EA4yBoBkB,CALCtL,EAAKqB,OAAO,SAAC9B,GACvC,IAAIgM,EAAaf,KAAOjL,EAAKjC,IAE7B,OAAyB,MADJiC,EAAK/B,IACO+N,GAAczS,GAAayS,GAAcnS,IAEhBN,EAAWM,GAEnEoS,EAAgBhB,KAAO1R,GAAWE,IAAI,CAAEyS,MAAO,EAAGC,KAAM,EAAGzS,KAAM,EAAGC,OAAQ,EAAGC,OAAQ,IACvFwS,EAA8B3L,EAAKqB,OAAO,SAAC9B,GAC7C,IAAIgM,EAAaf,KAAOjL,EAAKjC,IAE7B,OAAyB,MADJiC,EAAK/B,IACO+N,EAAazS,GAAayS,GAAcC,IAGvEzF,EAjzBN,SAA8C/F,EAAMkK,EAAgBC,GAElE,IAAIC,EAAU,GAFkEwB,GAAA,EAAAC,GAAA,EAAAC,OAAA3I,EAAA,IAIhF,QAAA4I,EAAAC,EAAmBhM,EAAnBsD,OAAAC,cAAAqI,GAAAG,EAAAC,EAAAxI,QAAAC,MAAAmI,GAAA,EAAyB,KAAhBvB,EAAgB0B,EAAArU,MACnB0K,EAAcD,GAAkBkI,EAAO9M,IAEf,MAAxB6M,EAAQhI,KACVgI,EAAQhI,GAAe4E,MAEzB,IAAIxC,EAAiB6F,EAAO7M,GAExB8M,EAAkBF,EAAQhI,GAAaoC,GAEvC0C,EAAemD,EAAO5M,GACtB8M,EAAkBC,KAAOH,EAAOxM,IA6DpC,IA1DIoJ,GAAaC,IAAiBA,IAAiBV,KAChDU,IAAiBR,IAAuBQ,IAAiBP,KACzD4D,GAAmBL,IACpBI,EAAgB9N,MAIdyK,GAAaC,IAAiBA,GAAgBV,KAC9CU,IAAiBP,IAAgCO,IAAiBR,KAClE6D,EAAkBJ,IACpBG,EAAgB7N,KAIdwK,GAAaC,IAAiBA,EAAa9L,QAAQqL,IAA0B,GAC/E6D,EAAgB5N,KAIdwK,IAAiBV,IACnB8D,EAAgB3N,KAIduK,GAAgBN,IAClB0D,EAAgB1N,MAIbsK,IAAiBR,IAAuBQ,IAAiBP,KAC3D4D,GAAmBL,GAAkBK,GAAmBJ,GACzDG,EAAgBzN,KAIdqK,IAAiBR,IAClB6D,GAAmBL,GAAkBK,GAAmBJ,GACzDG,EAAgBxN,KAIdoK,IAAiBP,IAClB4D,GAAmBL,GAAkBK,GAAmBJ,GACzDG,EAAgBvN,KAIbmK,IAAiBR,IACpBQ,IAAiBP,IAAiC0D,EAAO3M,KAA2BmJ,IAChF0D,GAAmBL,GAAkBK,GAAmBJ,GAC1DG,EAAgBtN,KAQhBiK,GAAaC,IAAiBA,IAAiBV,KAChDU,IAAiBR,IAAuBQ,IAAiBP,KACzD4D,GAAmBL,GAAkBK,GAAmBJ,EAAe,KAAA8B,EAC/CzJ,GAAU6H,EAAO1M,IAApCgF,EADkEsJ,EAClEtJ,IAAK1J,EAD6DgT,EAC7DhT,KAAM2J,EADuDqJ,EACvDrJ,IACP,GAAND,EAAW,GAAY,GAAP1J,EAAY2J,GAAO,IACrC0H,EAAgBrN,KAER,GAAN0F,EAAW,GAAY,GAAP1J,EAAY2J,GAAO,MACrC0H,EAAgBpN,KAKpB,GAAIgK,IAAiBR,IAAuBQ,IAAiBP,GAA8B,CACzF,IAAI4D,EAAkBC,KAAOH,EAAOxM,IACpC,GAAI0M,GAAmBL,GAAkBK,GAAmBJ,EAAc,KAAA+B,EAC/C1J,GAAU6H,EAAOzM,IAApC+E,EADkEuJ,EAClEvJ,IAAK1J,EAD6DiT,EAC7DjT,KAAM2J,EADuDsJ,EACvDtJ,IACjB0H,EAAgBnN,IAA+BwF,EAAM1J,EAAO,GAAK2J,EAAM,GAAK,IAKhF,GAAIqE,GAAaC,IAAiBA,IAAiBV,KAC/CU,IAAiBP,IAAgCO,IAAiBR,KAClE6D,EAAkBJ,EAAe,KAAAgC,EACV3J,GAAU6H,EAAOzM,IAApC+E,EAD6BwJ,EAC7BxJ,IAAK1J,EADwBkT,EACxBlT,KAAM2J,EADkBuJ,EAClBvJ,IACjB0H,EAAgBlN,IAA8BuF,EAAM1J,EAAO,GAAK2J,EAAM,GAAK,KAtGC,MAAAnK,IAAAoT,GAAA,EAAAC,EAAArT,GAAA,YAAAmT,GAAA,MAAAI,EAAArI,QAAAqI,EAAArI,SAAA,WAAAkI,EAAA,MAAAC,GA0GhF,IAAK,IAAI1J,KAAegI,EAAS,KAAAgC,GAAA,EAAAC,GAAA,EAAAC,OAAAnJ,EAAA,IAE/B,QAAAoJ,GAAAC,GAA2BvO,GAA3BqF,OAAAC,cAAA6I,GAAAG,GAAAC,GAAAhJ,QAAAC,MAAA2I,GAAA,EAAsD,KAA7C5H,GAA6C+H,GAAA7U,MAAA+U,IAAA,EAAAC,IAAA,EAAAC,QAAAxJ,EAAA,IACpD,QAAAyJ,GAAAC,GAA0BxP,EAA1BiG,OAAAC,cAAAkJ,IAAAG,GAAAC,GAAArJ,QAAAC,MAAAgJ,IAAA,EAAmD,KAA1CrI,GAA0CwI,GAAAlV,MACjD0S,EAAQhI,GAAarE,GAAkBqG,KAAkBgG,EAAQhI,GAAaoC,IAAgBJ,KAF5C,MAAA3L,IAAAiU,IAAA,EAAAC,GAAAlU,GAAA,YAAAgU,IAAA,MAAAI,GAAAlJ,QAAAkJ,GAAAlJ,SAAA,WAAA+I,GAAA,MAAAC,MAFvB,MAAAlU,IAAA4T,GAAA,EAAAC,EAAA7T,GAAA,YAAA2T,GAAA,MAAAI,GAAA7I,QAAA6I,GAAA7I,SAAA,WAAA0I,EAAA,MAAAC,GAS/B,IAAK,IAAI9H,MAAkB4F,EAAQhI,GAAc,CAC/C,IAAIiH,GAAyBe,EAAQhI,GAAaoC,IAAgBrH,GAC9DiM,GAAmBgB,EAAQhI,GAAaoC,IAAgB3H,GAC5DuN,EAAQhI,GAAaoC,IAAgBrH,GACnCiM,GAAmB,EAAII,OAAOH,GAAyBD,IAAkB9B,QAAQ,GAAK,EAExF,IAAIgC,GAAwBc,EAAQhI,GAAaoC,IAAgBpH,GAC7DmM,GAAkBa,EAAQhI,GAAaoC,IAAgB/H,GAC3D2N,EAAQhI,GAAaoC,IAAgBpH,GACnCmM,GAAkB,EAAIC,OAAOF,GAAwBC,IAAiBjC,QAAQ,GAAK,GAGzF,OAAO8C,EAkrB0B0C,CAAqCnB,EACpE7S,EAAWM,GAET4M,EAjrBN,SAAsDhG,EAAMkK,EAAgBC,GAE1E,IAAIC,EAAU,GAF0E2C,GAAA,EAAAC,GAAA,EAAAC,OAAA9J,EAAA,IAIxF,QAAA+J,EAAAC,EAAmBnN,EAAnBsD,OAAAC,cAAAwJ,GAAAG,EAAAC,EAAA3J,QAAAC,MAAAsJ,GAAA,EAAyB,KAAhB1C,EAAgB6C,EAAAxV,MACnB0K,EAAcD,GAAkBkI,EAAO9M,IAEf,MAAxB6M,EAAQhI,KACVgI,EAAQhI,GAAe4E,MAEzB,IAAIxC,EAAiB6F,EAAO7M,GAExB8M,EAAkBF,EAAQhI,GAAaoC,GAEvC0C,EAAemD,EAAO5M,GACJ+M,KAAOH,EAAOxM,KAGhCoJ,GAAaC,IAAiBA,IAAiBV,IACjDU,IAAiBR,IAAuBQ,IAAiBP,KACzD2D,EAAgB9N,MAIdyK,GAAaC,IAAiBA,IAAiBP,IACjDO,IAAiBR,IAAuBQ,IAAiBV,IACzDU,GAAgBN,KAChB0D,EAAgB/N,MA3BoE,MAAA9D,GAAAuU,GAAA,EAAAC,EAAAxU,EAAA,YAAAsU,GAAA,MAAAI,EAAAxJ,QAAAwJ,EAAAxJ,SAAA,WAAAqJ,EAAA,MAAAC,GA+BxF,IAAK,IAAI7K,KAAegI,EAAS,KAAAgD,GAAA,EAAAC,GAAA,EAAAC,OAAAnK,EAAA,IAE/B,QAAAoK,EAAAC,EAA2BvP,GAA3BqF,OAAAC,cAAA6J,GAAAG,EAAAC,EAAAhK,QAAAC,MAAA2J,GAAA,EAAsD,KAA7C5I,EAA6C+I,EAAA7V,MAAA+V,GAAA,EAAAC,GAAA,EAAAC,OAAAxK,EAAA,IACpD,QAAAyK,EAAAC,EAA0BxQ,EAA1BiG,OAAAC,cAAAkK,GAAAG,EAAAC,EAAArK,QAAAC,MAAAgK,GAAA,EAAmD,KAA1CrJ,EAA0CwJ,EAAAlW,MACjD0S,EAAQhI,GAAarE,GAAkBqG,IAAkBgG,EAAQhI,GAAaoC,GAAgBJ,IAF5C,MAAA3L,GAAAiV,GAAA,EAAAC,EAAAlV,EAAA,YAAAgV,GAAA,MAAAI,EAAAlK,QAAAkK,EAAAlK,SAAA,WAAA+J,EAAA,MAAAC,KAFvB,MAAAlV,GAAA4U,GAAA,EAAAC,EAAA7U,EAAA,YAAA2U,GAAA,MAAAI,EAAA7J,QAAA6J,EAAA7J,SAAA,WAAA0J,EAAA,MAAAC,IASjC,OAAOlD,EAyoB+B0D,CACpCnC,GAOE1F,EA9YN,SAAuCjG,EAAMkK,EAAgBC,GAE3D,IAAIC,EAAU,GAF2D2D,GAAA,EAAAC,GAAA,EAAAC,OAAA9K,EAAA,IAIzE,QAAA+K,EAAAC,EAAmBnO,EAAnBsD,OAAAC,cAAAwK,GAAAG,EAAAC,EAAA3K,QAAAC,MAAAsK,GAAA,EAAyB,KAAhB1D,EAAgB6D,EAAAxW,MACnB0K,EAAcD,GAAkBkI,EAAO9M,IAEf,MAAxB6M,EAAQhI,KACVgI,EAAQhI,GAAe4E,MAEzB,IAAIxC,EAAiB6F,EAAO7M,GAExB8M,EAAkBF,EAAQhI,GAAaoC,GAEvC0C,EAAemD,EAAO5M,GACtB8M,EAAkBC,KAAOH,EAAOxM,IA4DpC,IAzDIoJ,GAAaC,IAAiBA,IAAiBV,KAChDU,IAAiBR,IAAuBQ,IAAiBP,KACzD4D,GAAmBL,IACpBI,EAAgB9N,MAIdyK,GAAaC,IAAiBA,GAAgBV,KAC9CU,IAAiBP,IAAgCO,IAAiBR,KAClE6D,EAAkBJ,IACpBG,EAAgB7N,KAIdwK,GAAaC,IAAiBA,EAAa9L,QAAQqL,IAA0B,GAC/E6D,EAAgB5N,KAIdwK,IAAiBV,IACnB8D,EAAgB3N,KAIduK,GAAgBN,IAClB0D,EAAgB1N,MAIbsK,IAAiBR,IAAuBQ,IAAiBP,KAC3D4D,GAAmBL,GAAkBK,GAAmBJ,GACzDG,EAAgBzN,KAIdqK,IAAiBR,IAClB6D,GAAmBL,GAAkBK,GAAmBJ,GACzDG,EAAgBxN,KAIdoK,IAAiBP,IAClB4D,GAAmBL,GAAkBK,GAAmBJ,GACzDG,EAAgBvN,MAIZmK,IAAiBR,IAAuBQ,IAAiBP,KAC5D4D,GAAmBL,GAAkBK,GAAmBJ,GACzDE,EAAO3M,KAA2BmJ,IAClCyD,EAAgBtN,KAOdiK,GAAaC,IAAiBA,IAAiBV,KAChDU,IAAiBR,IAAuBQ,IAAiBP,KACzD4D,GAAmBL,EAAiB,KAAAkE,EACZ5L,GAAU6H,EAAO1M,IAApCgF,EAD+ByL,EAC/BzL,IAAK1J,EAD0BmV,EAC1BnV,KAAM2J,EADoBwL,EACpBxL,IACP,GAAND,EAAW,GAAY,GAAP1J,EAAY2J,GAAO,IACrC0H,EAAgBrN,KAER,GAAN0F,EAAW,GAAY,GAAP1J,EAAY2J,GAAO,MACrC0H,EAAgBpN,KAKpB,IAAKgK,IAAiBR,IAAuBQ,IAAiBP,KAC3D4D,GAAmBL,GAAkBK,GAAmBJ,EAAe,KAAAkE,EAC/C7L,GAAU6H,EAAOzM,IAApC+E,EADkE0L,EAClE1L,IAAK1J,EAD6DoV,EAC7DpV,KAAM2J,EADuDyL,EACvDzL,IACjB0H,EAAgBnN,IAA+BwF,EAAM1J,EAAO,GAAK2J,EAAM,GAAK,GAI9E,GAAIqE,GAAaC,IAAiBA,IAAiBV,KAC/CU,IAAiBP,IAAgCO,IAAiBR,KAClE6D,EAAkBJ,EAAe,KAAAmE,EACV9L,GAAU6H,EAAOzM,IAApC+E,EAD6B2L,EAC7B3L,IAAK1J,EADwBqV,EACxBrV,KAAM2J,EADkB0L,EAClB1L,IACjB0H,EAAgBlN,IAA8BuF,EAAM1J,EAAO,GAAK2J,EAAM,GAAK,IAIzEqE,GAAaC,IAAiBA,IAAiBV,IACjDU,GAAgBN,KACfM,IAAiBR,IAAuBQ,IAAiBP,KACzD4D,GAAmBL,IACpBI,EAAgB/N,MA3GqD,MAAA9D,IAAAuV,GAAA,EAAAC,EAAAxV,GAAA,YAAAsV,GAAA,MAAAI,EAAAxK,QAAAwK,EAAAxK,SAAA,WAAAqK,EAAA,MAAAC,GA+GzE,IAAK,IAAI7L,KAAegI,EAAS,KAAAmE,GAAA,EAAAC,GAAA,EAAAC,OAAAtL,EAAA,IAE/B,QAAAuL,GAAAC,GAA2B1Q,GAA3BqF,OAAAC,cAAAgL,GAAAG,GAAAC,GAAAnL,QAAAC,MAAA8K,GAAA,EAAsD,KAA7C/J,GAA6CkK,GAAAhX,MAAAkX,IAAA,EAAAC,IAAA,EAAAC,QAAA3L,EAAA,IACpD,QAAA4L,GAAAC,GAA0B3R,EAA1BiG,OAAAC,cAAAqL,IAAAG,GAAAC,GAAAxL,QAAAC,MAAAmL,IAAA,EAAmD,KAA1CxK,GAA0C2K,GAAArX,MACjD0S,EAAQhI,GAAarE,GAAkBqG,KAAkBgG,EAAQhI,GAAaoC,IAAgBJ,KAF5C,MAAA3L,IAAAoW,IAAA,EAAAC,GAAArW,GAAA,YAAAmW,IAAA,MAAAI,GAAArL,QAAAqL,GAAArL,SAAA,WAAAkL,GAAA,MAAAC,MAFvB,MAAArW,IAAA+V,GAAA,EAAAC,EAAAhW,GAAA,YAAA8V,GAAA,MAAAI,GAAAhL,QAAAgL,GAAAhL,SAAA,WAAA6K,EAAA,MAAAC,GAS/B,IAAK,IAAIjK,MAAkB4F,EAAQhI,GAAc,CAC/C,IAAIiH,GAAyBe,EAAQhI,GAAaoC,IAAgBrH,GAC9DiM,GAAmBgB,EAAQhI,GAAaoC,IAAgB3H,GAC5DuN,EAAQhI,GAAaoC,IAAgBrH,GACnCiM,GAAmB,EAAII,OAAOH,GAAyBD,IAAkB9B,QAAQ,GAAK,EAExF,IAAIgC,GAAwBc,EAAQhI,GAAaoC,IAAgBpH,GAC7DmM,GAAkBa,EAAQhI,GAAaoC,IAAgB/H,GAC3D2N,EAAQhI,GAAaoC,IAAgBpH,GACnCmM,GAAkB,EAAIC,OAAOF,GAAwBC,IAAiBjC,QAAQ,GAAK,GAGzF,OAAO8C,EA0QmB6E,CALCjP,EAAKqB,OAAO,SAAC9B,GACtC,IAAIgM,EAAaf,KAAOjL,EAAKjC,IAE7B,OAAyB,MADJiC,EAAK/B,IACO+N,GAAcnS,GAAWmS,GAAcC,IAGxEA,EAAepS,GAEb8V,EAA8BlP,EAAKqB,OAAO,SAAC9B,GAC7C,IAAIgM,EAAaf,KAAOjL,EAAKjC,IAE7B,OAAyB,MADJiC,EAAK/B,IACO+N,EAAaC,IAE5CtF,EAtpBN,SAA8ClG,EAAMkK,EAAgBC,GAElE,IAAIC,EAAU,GAFkE+E,GAAA,EAAAC,GAAA,EAAAC,OAAAlM,EAAA,IAIhF,QAAAmM,EAAAC,EAAmBvP,EAAnBsD,OAAAC,cAAA4L,GAAAG,EAAAC,EAAA/L,QAAAC,MAAA0L,GAAA,EAAyB,KAAhB9E,EAAgBiF,EAAA5X,MACnB0K,EAAcD,GAAkBkI,EAAO9M,IAEf,MAAxB6M,EAAQhI,KACVgI,EAAQhI,GAAe4E,MAEzB,IAAIxC,EAAiB6F,EAAO7M,GAExB8M,EAAkBF,EAAQhI,GAAaoC,GAEvC0C,EAAemD,EAAO5M,GACtB8M,EAAkBC,KAAOH,EAAOxM,IA6DpC,IA1DIoJ,GAAaC,IAAiBA,IAAiBV,KAChDU,IAAiBR,IAAuBQ,IAAiBP,KACzD4D,GAAmBL,IACpBI,EAAgB9N,MAIdyK,GAAaC,IAAiBA,GAAgBV,KAC9CU,IAAiBP,IAAgCO,IAAiBR,KAClE6D,EAAkBJ,IACpBG,EAAgB7N,KAIdwK,GAAaC,IAAiBA,EAAa9L,QAAQqL,IAA0B,GAC/E6D,EAAgB5N,KAIdwK,IAAiBV,IACnB8D,EAAgB3N,KAIduK,GAAgBN,IAClB0D,EAAgB1N,MAIbsK,IAAiBR,IAAuBQ,IAAiBP,KAC3D4D,GAAmBL,GAAkBK,GAAmBJ,GACzDG,EAAgBzN,KAIdqK,IAAiBR,IAClB6D,GAAmBL,GAAkBK,GAAmBJ,GACzDG,EAAgBxN,KAIdoK,IAAiBP,IAClB4D,GAAmBL,GAAkBK,GAAmBJ,GACzDG,EAAgBvN,KAIbmK,IAAiBR,IACpBQ,IAAiBP,IAAiC0D,EAAO3M,KAA2BmJ,IAChF0D,GAAmBL,GAAkBK,GAAmBJ,GAC1DG,EAAgBtN,KAQhBiK,GAAaC,IAAiBA,IAAiBV,KAChDU,IAAiBR,IAAuBQ,IAAiBP,KACzD4D,GAAmBL,EAAiB,KAAAsF,EACZhN,GAAU6H,EAAO1M,IAApCgF,EAD+B6M,EAC/B7M,IAAK1J,EAD0BuW,EAC1BvW,KAAM2J,EADoB4M,EACpB5M,IACP,GAAND,EAAW,GAAY,GAAP1J,EAAY2J,GAAO,IACrC0H,EAAgBrN,KAER,GAAN0F,EAAW,GAAY,GAAP1J,EAAY2J,GAAO,MACrC0H,EAAgBpN,KAKpB,IAAKgK,IAAiBR,IAAuBQ,IAAiBP,KAC3D4D,GAAmBL,GAAkBK,GAAmBJ,EAAe,KAAAsF,EAC/CjN,GAAU6H,EAAOzM,IAApC+E,EADkE8M,EAClE9M,IAAK1J,EAD6DwW,EAC7DxW,KAAM2J,EADuD6M,EACvD7M,IACjB0H,EAAgBnN,IAA+BwF,EAAM1J,EAAO,GAAK2J,EAAM,GAAK,GAI9E,GAAIqE,GAAaC,IAAiBA,IAAiBV,KAC/CU,IAAiBP,IAAgCO,IAAiBR,KAClE6D,EAAkBJ,EAAe,KAAAuF,EACVlN,GAAU6H,EAAOzM,IAApC+E,EAD6B+M,EAC7B/M,IAAK1J,EADwByW,EACxBzW,KAAM2J,EADkB8M,EAClB9M,IACjB0H,EAAgBlN,IAA8BuF,EAAM1J,EAAO,GAAK2J,EAAM,GAAK,KApGC,MAAAnK,IAAA2W,GAAA,EAAAC,EAAA5W,GAAA,YAAA0W,GAAA,MAAAI,EAAA5L,QAAA4L,EAAA5L,SAAA,WAAAyL,EAAA,MAAAC,GAwGhF,IAAK,IAAIjN,KAAegI,EAAS,KAAAuF,GAAA,EAAAC,GAAA,EAAAC,OAAA1M,EAAA,IAE/B,QAAA2M,EAAAC,GAA2B9R,GAA3BqF,OAAAC,cAAAoM,GAAAG,EAAAC,GAAAvM,QAAAC,MAAAkM,GAAA,EAAsD,KAA7CnL,GAA6CsL,EAAApY,MAAAsY,IAAA,EAAAC,IAAA,EAAAC,QAAA/M,EAAA,IACpD,QAAAgN,GAAAC,GAA0B/S,EAA1BiG,OAAAC,cAAAyM,IAAAG,GAAAC,GAAA5M,QAAAC,MAAAuM,IAAA,EAAmD,KAA1C5L,GAA0C+L,GAAAzY,MACjD0S,EAAQhI,GAAarE,GAAkBqG,KAAkBgG,EAAQhI,GAAaoC,IAAgBJ,KAF5C,MAAA3L,IAAAwX,IAAA,EAAAC,GAAAzX,GAAA,YAAAuX,IAAA,MAAAI,GAAAzM,QAAAyM,GAAAzM,SAAA,WAAAsM,GAAA,MAAAC,MAFvB,MAAAzX,IAAAmX,GAAA,EAAAC,EAAApX,GAAA,YAAAkX,GAAA,MAAAI,GAAApM,QAAAoM,GAAApM,SAAA,WAAAiM,EAAA,MAAAC,GAS/B,IAAK,IAAIrL,MAAkB4F,EAAQhI,GAAc,CAC/C,IAAIiH,GAAyBe,EAAQhI,GAAaoC,IAAgBrH,GAC9DiM,GAAmBgB,EAAQhI,GAAaoC,IAAgB3H,GAC5DuN,EAAQhI,GAAaoC,IAAgBrH,GACnCiM,GAAmB,EAAII,OAAOH,GAAyBD,IAAkB9B,QAAQ,GAAK,EAExF,IAAIgC,GAAwBc,EAAQhI,GAAaoC,IAAgBpH,GAC7DmM,GAAkBa,EAAQhI,GAAaoC,IAAgB/H,GAC3D2N,EAAQhI,GAAaoC,IAAgBpH,GACnCmM,GAAkB,EAAIC,OAAOF,GAAwBC,IAAiBjC,QAAQ,GAAK,GAGzF,OAAO8C,EAyhB0BiG,CAAqCnB,EACpEpW,EAAWM,GAET+M,EAzhBN,SAAmDnG,EAAMkK,EAAgBC,GAEvE,IAAIC,EAAU,GAFuEkG,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAIrF,QAAAsN,EAAAC,EAAmB1Q,EAAnBsD,OAAAC,cAAA+M,GAAAG,EAAAC,EAAAlN,QAAAC,MAAA6M,GAAA,EAAyB,KAAhBjG,EAAgBoG,EAAA/Y,MACnB0K,EAAcD,GAAkBkI,EAAO9M,IAEf,MAAxB6M,EAAQhI,KACVgI,EAAQhI,GAAe4E,MAEzB,IAAIxC,EAAiB6F,EAAO7M,GAExB8M,EAAkBF,EAAQhI,GAAaoC,GAEvC0C,EAAemD,EAAO5M,GACtB8M,EAAkBC,KAAOH,EAAOxM,IA6DpC,IA1DIoJ,GAAaC,IAAiBA,IAAiBV,KAChDU,IAAiBR,IAAuBQ,IAAiBP,KACzD4D,GAAmBL,IACpBI,EAAgB9N,MAIdyK,GAAaC,IAAiBA,GAAgBV,KAC9CU,IAAiBP,IAAgCO,IAAiBR,KAClE6D,EAAkBJ,IACpBG,EAAgB7N,KAIdwK,GAAaC,IAAiBA,EAAa9L,QAAQqL,IAA0B,GAC/E6D,EAAgB5N,KAIdwK,IAAiBV,IACnB8D,EAAgB3N,KAIduK,GAAgBN,IAClB0D,EAAgB1N,MAIbsK,IAAiBR,IAAuBQ,IAAiBP,KAC3D4D,GAAmBL,GAAkBK,GAAmBJ,GACzDG,EAAgBzN,KAIdqK,IAAiBR,IAClB6D,GAAmBL,GAAkBK,GAAmBJ,GACzDG,EAAgBxN,KAIdoK,IAAiBP,IAClB4D,GAAmBL,GAAkBK,GAAmBJ,GACzDG,EAAgBvN,KAIbmK,IAAiBR,IACpBQ,IAAiBP,IAAiC0D,EAAO3M,KAA2BmJ,IAChF0D,GAAmBL,GAAkBK,GAAmBJ,GAC1DG,EAAgBtN,KAQhBiK,GAAaC,IAAiBA,IAAiBV,KAChDU,IAAiBR,IAAuBQ,IAAiBP,KACzD4D,GAAmBL,EAAiB,KAAAyG,EACZnO,GAAU6H,EAAO1M,IAApCgF,EAD+BgO,EAC/BhO,IAAK1J,EAD0B0X,EAC1B1X,KAAM2J,EADoB+N,EACpB/N,IACP,GAAND,EAAW,GAAY,GAAP1J,EAAY2J,GAAO,IACrC0H,EAAgBrN,KAER,GAAN0F,EAAW,GAAY,GAAP1J,EAAY2J,GAAO,MACrC0H,EAAgBpN,KAKpB,IAAKgK,IAAiBR,IAAuBQ,IAAiBP,KAC3D4D,GAAmBL,GAAkBK,GAAmBJ,EAAe,KAAAyG,EAC/CpO,GAAU6H,EAAOzM,IAApC+E,EADkEiO,EAClEjO,IAAK1J,EAD6D2X,EAC7D3X,KAAM2J,EADuDgO,EACvDhO,IACjB0H,EAAgBnN,IAA+BwF,EAAM1J,EAAO,GAAK2J,EAAM,GAAK,GAI9E,GAAIqE,GAAaC,IAAiBA,IAAiBV,KAC/CU,IAAiBP,IAAgCO,IAAiBR,KAClE6D,EAAkBJ,EAAe,KAAA0G,EACVrO,GAAU6H,EAAOzM,IAApC+E,EAD6BkO,EAC7BlO,IAAK1J,EADwB4X,EACxB5X,KAAM2J,EADkBiO,EAClBjO,IACjB0H,EAAgBlN,IAA8BuF,EAAM1J,EAAO,GAAK2J,EAAM,GAAK,KApGM,MAAAnK,IAAA8X,GAAA,EAAAC,EAAA/X,GAAA,YAAA6X,GAAA,MAAAI,EAAA/M,QAAA+M,EAAA/M,SAAA,WAAA4M,EAAA,MAAAC,GAwGrF,IAAK,IAAIpO,KAAegI,EAAS,KAAA0G,GAAA,EAAAC,GAAA,EAAAC,OAAA7N,EAAA,IAE/B,QAAA8N,EAAAC,GAA2BjT,GAA3BqF,OAAAC,cAAAuN,GAAAG,EAAAC,GAAA1N,QAAAC,MAAAqN,GAAA,EAAsD,KAA7CtM,GAA6CyM,EAAAvZ,MAAAyZ,IAAA,EAAAC,IAAA,EAAAC,QAAAlO,EAAA,IACpD,QAAAmO,GAAAC,GAA0BlU,EAA1BiG,OAAAC,cAAA4N,IAAAG,GAAAC,GAAA/N,QAAAC,MAAA0N,IAAA,EAAmD,KAA1C/M,GAA0CkN,GAAA5Z,MACjD0S,EAAQhI,GAAarE,GAAkBqG,KAAkBgG,EAAQhI,GAAaoC,IAAgBJ,KAF5C,MAAA3L,IAAA2Y,IAAA,EAAAC,GAAA5Y,GAAA,YAAA0Y,IAAA,MAAAI,GAAA5N,QAAA4N,GAAA5N,SAAA,WAAAyN,GAAA,MAAAC,MAFvB,MAAA5Y,IAAAsY,GAAA,EAAAC,EAAAvY,GAAA,YAAAqY,GAAA,MAAAI,GAAAvN,QAAAuN,GAAAvN,SAAA,WAAAoN,EAAA,MAAAC,GAS/B,IAAK,IAAIxM,MAAkB4F,EAAQhI,GAAc,CAC/C,IAAIiH,GAAyBe,EAAQhI,GAAaoC,IAAgBrH,GAC9DiM,GAAmBgB,EAAQhI,GAAaoC,IAAgB3H,GAC5DuN,EAAQhI,GAAaoC,IAAgBrH,GACnCiM,GAAmB,EAAII,OAAOH,GAAyBD,IAAkB9B,QAAQ,GAAK,EAExF,IAAIgC,GAAwBc,EAAQhI,GAAaoC,IAAgBpH,GAC7DmM,GAAkBa,EAAQhI,GAAaoC,IAAgB/H,GAC3D2N,EAAQhI,GAAaoC,IAAgBpH,GACnCmM,GAAkB,EAAIC,OAAOF,GAAwBC,IAAiBjC,QAAQ,GAAK,GAGzF,OAAO8C,EA4Z+BoH,CAA0CtC,EAC9E1D,EAAepS,GAEbgN,EAA+B,GA4BnC,IAAK,IAAIhE,IA3BT,CAAC0D,EAAsBC,EAA4BG,GAA4BwC,QAAQ,SAAUC,GAC/F,IAAK,IAAIvG,KAAeuG,EAAQ,CACmB,MAA7CvC,EAA6BhE,KAC/BgE,EAA6BhE,GAAe4E,MAE9C,IAJ8B,IAAAyK,EAAAva,OAAA6D,EAAA,EAAA7D,CAIC+G,IAJDjD,OAAA,CAI4B+C,IAA1D2T,EAAA,EAAAA,EAAAD,EAAArQ,OAAAsQ,IAA6E,CAAxE,IAAIlN,EAAciN,EAAAC,GAAsDC,GAAA,EAAAC,GAAA,EAAAC,OAAA1O,EAAA,IAC3E,QAAA2O,EAAAC,EAAiB1U,EAAjBiG,OAAAC,cAAAoO,GAAAG,EAAAC,EAAAvO,QAAAC,MAAAkO,GAAA,EAA0C,KAAjCpS,EAAiCuS,EAAApa,MACxC,GAAI6H,IAASpC,EAA2B,CACtC,IAAIiM,EAAmBT,EAAOvG,GAAaoC,GAAgB3H,GACvDwM,EAAyBV,EAAOvG,GAAaoC,GAAgBrH,GACjEiJ,EAA6BhE,GAAaoC,GAAgBrH,IACxDiM,EAAmBC,OAChB,GAAI9J,IAASnC,EAA0B,CAC5C,IAAIkM,EAAwBX,EAAOvG,GAAaoC,GAAgBpH,GAC5DmM,EAAkBZ,EAAOvG,GAAaoC,GAAgB/H,GAC1D2J,EAA6BhE,GAAaoC,GAAgBpH,IACxDmM,EAAkBD,OAGpBlD,EAA6BhE,GAAaoC,GAAgBjF,IACxDoJ,EAAOvG,GAAaoC,GAAgBjF,IAfiC,MAAA9G,GAAAmZ,GAAA,EAAAC,EAAApZ,EAAA,YAAAkZ,GAAA,MAAAI,EAAApO,QAAAoO,EAAApO,SAAA,WAAAiO,EAAA,MAAAC,QAsBzDzL,EACtB,IAAK,IAAI5B,KAAkB4B,EAA6BhE,GAAc,CACpE,IAAIiH,EAAyBjD,EAA6BhE,GAAaoC,GAAgBrH,GACnFiM,EAAmBhD,EAA6BhE,GAAaoC,GAAgB3H,GACjFuJ,EAA6BhE,GAAaoC,GAAgBrH,GACxDiM,EAAmB,EAAII,OAAOH,EAAyBD,GAAkB9B,QAAQ,GAAK,EAExF,IAAIgC,EAAwBlD,EAA6BhE,GAAaoC,GAAgBpH,GAClFmM,EAAkBnD,EAA6BhE,GAAaoC,GAAgB/H,GAChF2J,EAA6BhE,GAAaoC,GAAgBpH,GACxDmM,EAAkB,EAAIC,OAAOF,EAAwBC,GAAiBjC,QAAQ,GAAK,EAIzF,IAAIjB,EAAoB,GA4BxB,IAAK,IAAIjE,IA3BT,CAAC+D,EAAiCF,GAAqByC,QAAQ,SAAUC,GACvE,IAAK,IAAIvG,KAAeuG,EAAQ,CACQ,MAAlCtC,EAAkBjE,KACpBiE,EAAkBjE,GAAe4E,MAEnC,IAJ8B,IAAAgL,EAAA9a,OAAA6D,EAAA,EAAA7D,CAIC+G,IAJDjD,OAAA,CAI4B+C,IAA1DkU,EAAA,EAAAA,EAAAD,EAAA5Q,OAAA6Q,IAA6E,CAAxE,IAAIzN,EAAcwN,EAAAC,GAAsDC,GAAA,EAAAC,GAAA,EAAAC,OAAAjP,EAAA,IAC3E,QAAAkP,EAAAC,EAAiBjV,EAAjBiG,OAAAC,cAAA2O,GAAAG,EAAAC,EAAA9O,QAAAC,MAAAyO,GAAA,EAA0C,KAAjC3S,EAAiC8S,EAAA3a,MACxC,GAAI6H,IAASpC,EAA2B,CACtC,IAAIiM,EAAmBT,EAAOvG,GAAaoC,GAAgB3H,GACvDwM,EAAyBV,EAAOvG,GAAaoC,GAAgBrH,GACjEkJ,EAAkBjE,GAAaoC,GAAgBrH,IAC7CiM,EAAmBC,OAChB,GAAI9J,IAASnC,EAA0B,CAC5C,IAAIkM,EAAwBX,EAAOvG,GAAaoC,GAAgBpH,GAC5DmM,EAAkBZ,EAAOvG,GAAaoC,GAAgB/H,GAC1D4J,EAAkBjE,GAAaoC,GAAgBpH,IAC7CmM,EAAkBD,OAGpBjD,EAAkBjE,GAAaoC,GAAgBjF,IAC7CoJ,EAAOvG,GAAaoC,GAAgBjF,IAfiC,MAAA9G,GAAA0Z,GAAA,EAAAC,EAAA3Z,EAAA,YAAAyZ,GAAA,MAAAI,EAAA3O,QAAA2O,EAAA3O,SAAA,WAAAwO,EAAA,MAAAC,QAsBzD/L,EACtB,IAAK,IAAI7B,KAAkB6B,EAAkBjE,GAAc,CACzD,IAAIiH,EAAyBhD,EAAkBjE,GAAaoC,GAAgBrH,GACxEiM,EAAmB/C,EAAkBjE,GAAaoC,GAAgB3H,GACtEwJ,EAAkBjE,GAAaoC,GAAgBrH,GAC7CiM,EAAmB,EAAII,OAAOH,EAAyBD,GAAkB9B,QAAQ,GAAK,EAExF,IAAIgC,EAAwBjD,EAAkBjE,GAAaoC,GAAgBpH,GACvEmM,EAAkBlD,EAAkBjE,GAAaoC,GAAgB/H,GACrE4J,EAAkBjE,GAAaoC,GAAgBpH,GAC7CmM,EAAkB,EAAIC,OAAOF,EAAwBC,GAAiBjC,QAAQ,GAAK,EAIzF,IAAIiL,EAAkB,GACtBpL,GAAcrB,EAAsB5H,GAAoBqU,GACxDpL,GAAcpB,EAA4B5H,GAAmBoU,GAC7DpL,GAAcf,EAA8BhI,GAAoBmU,GAChEpL,GAAcrB,EAAsBzH,GAAyBkU,GAC7DpL,GAAcrB,EAAsBxH,GAA0BiU,GAC9DpL,GAAcf,EAA8B7H,GAAoBgU,GAChEpL,GAAcd,EAAmB7H,GAA0B+T,GAE3D,IAAIC,EAAc,CAChB1M,qBAAsBA,EACtBC,2BAA4BA,EAC5BC,gCAAiCA,EACjCE,2BAA4BA,EAC5BC,gCAAiCA,EACjCC,6BAA8BA,EAC9BH,oBAAqBA,EACrBI,kBAAmBA,EACnBC,WAAYiM,GAIVE,EAAgB,CAClB3M,qBAAuBwC,GAAiB,CAACxC,GAAuB/C,IAChEgD,2BAA4BuC,GAAiB,CAACvC,GAA6BhD,IAC3EiD,gCAAiCsC,GAAiB,CAACtC,GAAkCjD,IACrFkD,oBAAqBqC,GAAiB,CAACrC,GAAsBlD,IAC7DmD,2BAA4BoC,GAAiB,CAACpC,GAA6BnD,IAC3EoD,gCAAiCmC,GAAiB,CAACnC,GAAkCpD,IACrFqD,6BAA8BkC,GAAiB,CAAClC,GAA+BrD,IAC/EsD,kBAAmBiC,GAAiB,CAACjC,GAAoBtD,KAEvD2P,GAAoB,GACxBvL,GAAcsL,EAAc3M,qBAAsB5H,GAAoBwU,IACtEvL,GAAcsL,EAAc1M,2BAA4B5H,GAAmBuU,IAC3EvL,GAAcsL,EAAcrM,6BAA8BhI,GAAoBsU,IAC9EvL,GAAcsL,EAAc3M,qBAAsBzH,GAAyBqU,IAC3EvL,GAAcsL,EAAc3M,qBAAsBxH,GAA0BoU,IAC5EvL,GAAcsL,EAAcrM,6BAA8B7H,GAAoBmU,IAC9EvL,GAAcsL,EAAcpM,kBAAmB7H,GAA0BkU,IACzED,EAAcnM,WAAaoM,GAE3B,IAAIC,GAAa,CACf7M,qBAAuB2D,GAAmB,CAACgJ,EAAc3M,uBACzDC,2BAA4B0D,GAAmB,CAACgJ,EAAc1M,6BAC9DC,gCAAiCyD,GAAmB,CAACgJ,EAAczM,kCACnEC,oBAAqBwD,GAAmB,CAACgJ,EAAcxM,sBACvDC,2BAA4BuD,GAAmB,CAACgJ,EAAcvM,6BAC9DC,gCAAiCsD,GAAmB,CAACgJ,EAActM,kCACnEC,6BAA8BqD,GAAmB,CAACgJ,EAAcrM,+BAChEC,kBAAmBoD,GAAmB,CAACgJ,EAAcpM,qBAEnDuM,GAAiB,GAerB,OAdArL,GAAkBoL,GAAW7M,qBAAsB5H,GAAoB0U,IACvErL,GAAkBoL,GAAW5M,2BAA4B5H,GAAmByU,IAC5ErL,GAAkBoL,GAAWvM,6BAA8BhI,GAAoBwU,IAC/ErL,GAAkBoL,GAAW7M,qBAAsBzH,GAAyBuU,IAC5ErL,GAAkBoL,GAAW7M,qBAAsBxH,GAA0BsU,IAC7ErL,GAAkBoL,GAAWvM,6BAA8B7H,GAAoBqU,IAC/ErL,GAAkBoL,GAAWtM,kBAAmB7H,GAA0BoU,IAC1ED,GAAWrM,WAAasM,GAEX,CACXJ,cACAC,gBACAE,mBAoRWE,eA9Qb,SAAAA,EAAY7b,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyb,IACjB5b,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2b,GAAAtb,KAAAH,KAAMJ,KA6BR8b,MAAQ,SAAC9a,EAAUc,EAAWM,GAC5BnC,EAAK4D,SAAS,CAAEe,SAAS,IArX7B,SAAoB5D,GAClB,OAAO,IAAIK,QAAQ,SAACC,EAASC,GAC3B,IAAIwa,EAAa,IAAIC,WACjBhT,EAAO,IAEI,SAAXiT,EAAY9X,GACVA,EAAQnD,EAASoJ,QACnB2R,EAAWG,OAAS,SAACC,GACnB,IAAIC,EAAWC,KAAKC,KAAKH,EAAMI,OAAO5K,OAAQ,CAAE9M,KAAM,WAClD2X,EAAQJ,EAASK,OAAOL,EAASM,WAAW,IAC5CC,EAAW3b,EAASmD,GAAOyY,KAAKrR,UAAU,EAAGvK,EAASmD,GAAOyY,KAAKxY,QAAQ,MAC9E4E,EAAK2T,GAAYN,KAAKQ,MAAMC,cAAcN,EAAO,CAAEO,WAAW,IAC9Dd,EAAS9X,EAAQ,IAEnB4X,EAAWiB,mBAAmBhc,EAASmD,KAEvC7C,EAAQ0H,GAGZiT,CAAS,KAmWTgB,CAAWjc,GAAUa,KAAK,SAACmH,GAEzB/I,EAAK4D,SAAS,CACZqZ,SAAU,CACR1T,mBAAoB,GACpBC,yBAA0B,GAC1BC,8BAA+B,GAC/BC,kBAAmB,GACnBC,yBAA0B,GAC1BC,8BAA+B,GAC/BC,2BAA4B,GAC5BC,gBAAiB,GACjBC,SAAU,GACVY,OAAQ,IAEV6D,YAAa,GACb+M,YAAa,KAEf,IAAI2B,EAAY,GACZC,EAAgB,GAnBcC,EAAA,SAoBzBV,GACPQ,EAAU1P,KAAKkP,GACf,IAAIhL,EAASsB,GAAcjK,EAAK2T,GAAW7a,EAAWM,GACtDgb,EAAcT,GAAYhL,EAAOgK,WACjC1b,EAAK4D,SAAS,SAAC9C,GAAD,MAAY,CACxBmc,SAAU,CACR1T,mBAAmBtJ,OAAA6D,EAAA,EAAA7D,CAAMa,EAAMmc,SAAS1T,oBAAtBxF,OAAA9D,OAAA6D,EAAA,EAAA7D,CAA6CuQ,GAAekB,EAAOgK,WAAW7M,qBAAsB6N,KACtHlT,yBAAyBvJ,OAAA6D,EAAA,EAAA7D,CAAKa,EAAMmc,SAASzT,0BAArBzF,OAAA9D,OAAA6D,EAAA,EAAA7D,CAAkDuQ,GAAekB,EAAOgK,WAAW5M,2BAA4B4N,KACvIjT,8BAA8BxJ,OAAA6D,EAAA,EAAA7D,CAAKa,EAAMmc,SAASxT,+BAArB1F,OAAA9D,OAAA6D,EAAA,EAAA7D,CAAuDuQ,GAAekB,EAAOgK,WAAW3M,gCAAiC2N,KACtJhT,kBAAkBzJ,OAAA6D,EAAA,EAAA7D,CAAKa,EAAMmc,SAASvT,mBAArB3F,OAAA9D,OAAA6D,EAAA,EAAA7D,CAA2CuQ,GAAekB,EAAOgK,WAAW1M,oBAAqB0N,KAClH/S,yBAAyB1J,OAAA6D,EAAA,EAAA7D,CAAKa,EAAMmc,SAAStT,0BAArB5F,OAAA9D,OAAA6D,EAAA,EAAA7D,CAAkDuQ,GAAekB,EAAOgK,WAAWzM,2BAA4ByN,KACvI9S,8BAA8B3J,OAAA6D,EAAA,EAAA7D,CAAKa,EAAMmc,SAASrT,+BAArB7F,OAAA9D,OAAA6D,EAAA,EAAA7D,CAAuDuQ,GAAekB,EAAOgK,WAAWxM,gCAAiCwN,KACtJ7S,2BAA2B5J,OAAA6D,EAAA,EAAA7D,CAAKa,EAAMmc,SAASpT,4BAArB9F,OAAA9D,OAAA6D,EAAA,EAAA7D,CAAoDuQ,GAAekB,EAAOgK,WAAWvM,6BAA8BuN,KAC7I5S,gBAAgB7J,OAAA6D,EAAA,EAAA7D,CAAKa,EAAMmc,SAASnT,iBAArB/F,OAAA9D,OAAA6D,EAAA,EAAA7D,CAAyCuQ,GAAekB,EAAOgK,WAAWtM,kBAAmBsN,KAC5G3S,SAAS9J,OAAA6D,EAAA,EAAA7D,CAAKa,EAAMmc,SAASlT,UAArBhG,OAAA9D,OAAA6D,EAAA,EAAA7D,CAAkC+Q,GAAsBU,EAAOgK,WAAWrM,WAAYqN,KAC9F/R,OAAQuS,MAGZld,EAAK4D,SAAS,SAAA9C,GAAK,MAAK,CACtB0N,YAAYvO,OAAAod,EAAA,EAAApd,CAAA,GACPa,EAAM0N,YADAvO,OAAAqd,EAAA,EAAArd,CAAA,GAERyc,EAAWhL,EAAO8J,mBAGvBxb,EAAK4D,SAAS,SAAA9C,GAAK,MAAK,CACtBya,YAAYtb,OAAAod,EAAA,EAAApd,CAAA,GACPa,EAAMya,YADAtb,OAAAqd,EAAA,EAAArd,CAAA,GAERyc,EAAWhL,EAAO6J,kBA3BzB,IAAK,IAAImB,KAAY3T,EAAMqU,EAAlBV,GA+BT,IAAIa,EAAa,CACf1O,qBAAsBkB,KACtBjB,2BAA4BiB,KAC5BhB,gCAAiCgB,KACjCf,oBAAqBe,KACrBd,2BAA4Bc,KAC5Bb,gCAAiCa,KACjCZ,6BAA8BY,KAC9BX,kBAAmBW,MAGrB,IAAK,IAAIyN,KAASD,EAChB,IAAK,IAAIb,KAAYS,EACnB,IAAK,IAAI5P,KAAkBgQ,EAAWC,GAAQ,CAC5C,IAAI9L,EAASyL,EAAcT,GAAUc,GAAOjQ,GAC5C,IAAK,IAAIjF,KAAQoJ,EACf,GAAIpJ,IAASpC,EAA2B,CACtC,IAAIiM,EAAmBT,EAAO9L,GAC1BwM,EAAyBV,EAAOxL,GACpCqX,EAAWC,GAAOjQ,GAAgBrH,IAChCiM,EAAmBC,OAChB,GAAI9J,IAASnC,EAA0B,CAC5C,IAAIkM,EAAwBX,EAAOvL,GAC/BmM,EAAkBZ,EAAOlM,GAC7B+X,EAAWC,GAAOjQ,GAAgBpH,IAChCmM,EAAkBD,OAGpBkL,EAAWC,GAAOjQ,GAAgBjF,IAASoJ,EAAOpJ,GAO5D,IAAK,IAAIkV,KAASD,EAChB,IAAK,IAAIhQ,KAAkBgQ,EAAWC,GAAQ,CAC5C,IAAIpL,EAAyBmL,EAAWC,GAAOjQ,GAAgBrH,GAC3DiM,EAAmBoL,EAAWC,GAAOjQ,GAAgB3H,GACzD2X,EAAWC,GAAOjQ,GAAgBrH,GAChCiM,EAAmB,EAAII,OAAOH,EAAyBD,GAAkB9B,QAAQ,GAAK,EAExF,IAAIgC,EAAwBkL,EAAWC,GAAOjQ,GAAgBpH,GAC1DmM,EAAkBiL,EAAWC,GAAOjQ,GAAgB/H,GACxD+X,EAAWC,GAAOjQ,GAAgBpH,GAChCmM,EAAkB,EAAIC,OAAOF,EAAwBC,GAAiBjC,QAAQ,GAAK,EAGzFrQ,EAAK4D,SAAS,CACZ6Z,SAAU,CACRlU,mBAAoBkE,GAAkB8P,EAAW1O,sBACjDrF,yBAA0BiE,GAAkB8P,EAAWzO,4BACvDrF,8BAA+BgE,GAAkB8P,EAAWxO,iCAC5DrF,kBAAmB+D,GAAkB8P,EAAWvO,qBAChDrF,yBAA0B8D,GAAkB8P,EAAWtO,4BACvDrF,8BAA+B6D,GAAkB8P,EAAWrO,iCAC5DrF,2BAA4B4D,GAAkB8P,EAAWpO,8BACzDrF,gBAAiB2D,GAAkB8P,EAAWnO,mBAC9CrF,SAAU,MAGd/J,EAAK4D,SAAS,CACZe,SAAS,OAjJI3E,EAsJnB0d,YAAc,WACZ,IAAIC,EAAM,CAAIrX,EAAkBO,GAAtB9C,OAAA9D,OAAA6D,EAAA,EAAA7D,CAA6C+G,IAA7C,CAAwEF,IAClF,GAAI9G,EAAKc,MAAM8c,aAAazT,OAAS,GAAKnK,EAAKc,MAAM+c,wBAAwB1T,OAAS,GACpFnK,EAAKc,MAAM2I,8BAA8BU,OAAS,GAAKnK,EAAKc,MAAM4I,kBAAkBS,OAAS,GAC7FnK,EAAKc,MAAM6I,yBAAyBQ,OAAS,GAC7CnK,EAAKc,MAAM8I,8BAA8BO,OAAS,GAClDnK,EAAKc,MAAM+I,2BAA2BM,OAAS,GAC/CnK,EAAKc,MAAMgJ,gBAAgBK,OAAS,EAAG,CACvC,IAAI2T,EAAS1B,KAAKQ,MAAMmB,cAAc/d,EAAKc,MAAMyI,mBAAoB,CACnEoU,OAAQA,IAENK,EAAS5B,KAAKQ,MAAMmB,cAAc/d,EAAKc,MAAM0I,yBAA0B,CACzEmU,OAAQA,IAENM,EAAS7B,KAAKQ,MAAMmB,cAAc/d,EAAKc,MAAM2I,8BAA+B,CAC9EkU,OAAQA,IAENO,EAAS9B,KAAKQ,MAAMmB,cAAc/d,EAAKc,MAAM4I,kBAAmB,CAClEiU,OAAQA,IAENQ,EAAS/B,KAAKQ,MAAMmB,cAAc/d,EAAKc,MAAM6I,yBAA0B,CACzEgU,OAAQA,IAENS,EAAShC,KAAKQ,MAAMmB,cAAc/d,EAAKc,MAAM8I,8BAA+B,CAC9E+T,OAAQA,IAENU,EAASjC,KAAKQ,MAAMmB,cAAc/d,EAAKc,MAAM+I,2BAA4B,CAC3E8T,OAAQA,IAENW,EAASlC,KAAKQ,MAAMmB,cAAc/d,EAAKc,MAAMgJ,gBAAiB,CAChE6T,OAAQA,IAENY,EAASnC,KAAKQ,MAAMmB,cAAc/d,EAAKc,MAAMiJ,SAAU,CACzD4T,OAAQA,IAENxB,EAAWC,KAAKQ,MAAM4B,WAC1BpC,KAAKQ,MAAM6B,kBAAkBtC,EAAU2B,EAAQrW,IAC/C2U,KAAKQ,MAAM6B,kBAAkBtC,EAAU6B,EAAQtW,IAC/C0U,KAAKQ,MAAM6B,kBAAkBtC,EAAU8B,EAAQtW,IAC/CyU,KAAKQ,MAAM6B,kBAAkBtC,EAAU+B,EAAQtW,IAC/CwU,KAAKQ,MAAM6B,kBAAkBtC,EAAUgC,EAAQtW,IAC/CuU,KAAKQ,MAAM6B,kBAAkBtC,EAAUiC,EAAQtW,IAC/CsU,KAAKQ,MAAM6B,kBAAkBtC,EAAUkC,EAAQtW,IAC/CqU,KAAKQ,MAAM6B,kBAAkBtC,EAAUmC,EAAQtW,IAC/CoU,KAAKQ,MAAM6B,kBAAkBtC,EAAUoC,EAAQtW,IAC/CmU,KAAKsC,UAAUvC,EAAU,aAAe5I,KAAOzR,KAAK6c,OAAOC,OAAO,uBAAyB,cAE3Ftb,EAAA,EAAQub,MAAM,2GAnMhB7e,EAAKc,MAAQ,CACXmc,SAAU,CACR1T,mBAAoB,GACpBC,yBAA0B,GAC1BC,8BAA+B,GAC/BC,kBAAmB,GACnBC,yBAA0B,GAC1BC,8BAA+B,GAC/BC,2BAA4B,GAC5BC,gBAAiB,GACjBC,SAAU,GACVY,OAAQ,IAEV8S,SAAU,CACRlU,mBAAoB,GACpBC,yBAA0B,GAC1BC,8BAA+B,GAC/BC,kBAAmB,GACnBC,yBAA0B,GAC1BC,8BAA+B,GAC/BC,2BAA4B,GAC5BC,gBAAiB,GACjBC,SAAU,IAEZpF,SAAS,GA1BM3E,wEA0MjB,IAAM8e,EACJtc,EAAAC,EAAAC,cAACqc,GAAD,CACExV,mBAAoBpJ,KAAKW,MAAM2c,SAASlU,mBACxCC,yBAA0BrJ,KAAKW,MAAM2c,SAASjU,yBAC9CC,8BAA+BtJ,KAAKW,MAAM2c,SAAShU,8BACnDC,kBAAmBvJ,KAAKW,MAAM2c,SAAS/T,kBACvCC,yBAA0BxJ,KAAKW,MAAM2c,SAAS9T,yBAC9CC,8BAA+BzJ,KAAKW,MAAM2c,SAAS7T,8BACnDC,2BAA4B1J,KAAKW,MAAM2c,SAAS5T,2BAChDC,gBAAiB3J,KAAKW,MAAM2c,SAAS3T,gBACrCC,SAAU5J,KAAKW,MAAM2c,SAAS1T,WAI5BiV,EACJxc,EAAAC,EAAAC,cAACuc,GAAD,CACE1V,mBAAoBpJ,KAAKW,MAAMmc,SAAS1T,mBACxCC,yBAA0BrJ,KAAKW,MAAMmc,SAASzT,yBAC9CC,8BAA+BtJ,KAAKW,MAAMmc,SAASxT,8BACnDC,kBAAmBvJ,KAAKW,MAAMmc,SAASvT,kBACvCC,yBAA0BxJ,KAAKW,MAAMmc,SAAStT,yBAC9CC,8BAA+BzJ,KAAKW,MAAMmc,SAASrT,8BACnDC,2BAA4B1J,KAAKW,MAAMmc,SAASpT,2BAChDC,gBAAiB3J,KAAKW,MAAMmc,SAASnT,gBACrCC,SAAU5J,KAAKW,MAAMmc,SAASlT,SAC9BY,OAAQxK,KAAKW,MAAMmc,SAAStS,SAI1BuU,EACJ1c,EAAAC,EAAAC,cAACyc,GAAD,CACExU,OAAQxK,KAAKW,MAAMmc,SAAStS,OAC5B6D,YAAarO,KAAKW,MAAM0N,cAItB4Q,EACJ5c,EAAAC,EAAAC,cAACyc,GAAD,CACExU,OAAQxK,KAAKW,MAAMmc,SAAStS,OAC5B6D,YAAarO,KAAKW,MAAMya,cAI5B,OACE/Y,EAAAC,EAAAC,cAAA2c,EAAA,GAAgBC,OAAQC,MACtB/c,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAI8c,UAAU,wBAAd,wCACAhd,EAAAC,EAAAC,cAAC+c,EAAD,CACErd,QAASjC,KAAK0b,MACd7W,SAAU7E,KAAKud,YACf/Y,QAASxE,KAAKW,MAAM6D,UAEtBnC,EAAAC,EAAAC,cAAAG,EAAA,GAAKiC,MAAO,CAAEC,OAAQ,WACpBvC,EAAAC,EAAAC,cAAAI,EAAA,GAAKC,KAAM,GAAI2B,OAAQ,GACrBlC,EAAAC,EAAAC,cAAAgd,EAAA,GAAM9a,KAAK,QACTpC,EAAAC,EAAAC,cAAAgd,EAAA,EAAMC,QAAN,CAAcC,IAAI,eAAKjX,IAAI,gBAAMmW,GACjCtc,EAAAC,EAAAC,cAAAgd,EAAA,EAAMC,QAAN,CAAcC,IAAI,eAAKjX,IAAI,gBAAMqW,GACjCxc,EAAAC,EAAAC,cAAAgd,EAAA,EAAMC,QAAN,CAAcC,IAAI,eAAKjX,IAAI,gBAAMuW,GACjC1c,EAAAC,EAAAC,cAAAgd,EAAA,EAAMC,QAAN,CAAcC,IAAI,eAAKjX,IAAI,gBAAMyW,eArQ/Bla,aC5sCE2a,QACW,cAA7BjU,OAAOkU,SAASC,UAEe,UAA7BnU,OAAOkU,SAASC,UAEhBnU,OAAOkU,SAASC,SAAS1U,MACvB,2DCZN2U,IAASC,OAAOzd,EAAAC,EAAAC,cAACwd,GAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3e,KAAK,SAAA4e,GACjCA,EAAaC","file":"static/js/main.70f37a88.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {},\n    onExport: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func,\n    onExport: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startDate = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endDate = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startDate, endDate);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              { \n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }   \n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在统计...': '开始统计'\n              }\n            </Button>\n            <Button style={{ margin: '0 20px' }} onClick={this.props.onExport}>导出Excel表格</Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '判定无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关平均处理时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '剩余未关平均处理时长（天）';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\nexport const KEY_CITY_NAME = '城市';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const NEW_ADD_CLOSE_RATE = '新增关闭率';\r\nexport const REMAIN_CLOSE_RATE = '遗留关闭率';\r\nexport const OVERALL_CLOSE_RATE = '总体关闭率';\r\nexport const RESPONSE_IN_30_MIN_RATE = '响应及时率（0.5h）'\r\nexport const RESPONSE_IN_30_HOUR_RATE = '响应及时率（30h）';\r\nexport const CLOSE_ON_TIME_RATE = '及时关闭率';\r\nexport const TOTAL_OVERALL_CLOSE_RATE = '累计总体关闭率';\r\n\r\nexport const RATE_STATISTIC_ITEMS = [\r\n  REMAIN_CLOSE_RATE,\r\n  NEW_ADD_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_RATE = '本年度统计周期内';\r\n\r\nexport const STAGES = [\r\n  '一期',\r\n  '二期',\r\n  '三期',\r\n  '四期',\r\n  '五期',\r\n  '六期',\r\n  '七期',\r\n  '八期',\r\n  '九期',\r\n  '十期'\r\n];","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction AreaTable(props) {\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default AreaTable;\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\nimport AreaTable from './AreaTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass AreaView extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_PERIOD_ADD}\r\n            data={this.props.periodNewAddedData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n            data={this.props.thisYearBeforePeriodData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n            data={this.props.thisYearBeforePeriodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_THIS_YEAR_TOTAL}\r\n            data={this.props.thisYearTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n            data={this.props.lastYearBeforePeriodData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n            data={this.props.lastYearBeforePeriodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n            data={this.props.beforePeriodNeedHandleData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n            data={this.props.periodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_PERIOD_RATE}\r\n            data={this.props.rateData}\r\n          />\r\n        </div>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AreaView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_CITY_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction CityTable(props) {\r\n  const cityColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_CITY_NAME}\r\n      title={KEY_CITY_NAME}\r\n      key={KEY_CITY_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredCities.length > 0 ?\r\n        props.data.filter(item => props.filteredCities.indexOf(item[KEY_CITY_NAME]) != -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {cityColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nCityTable.defaultProps = {\r\n  filteredCities: []\r\n}\r\n\r\nexport default CityTable;\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport CityTable from './CityTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass CityView extends React.Component {\r\n  static defaultProps = {\r\n    cities: []\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredCities: []\r\n    }\r\n  }\r\n\r\n  filterCities = (filteredCities) => {\r\n    if (filteredCities != null && filteredCities.length > 0) {\r\n      this.setState({\r\n        filteredCities: filteredCities\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredCities: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的城市'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterCities}\r\n                >\r\n                  {\r\n                    this.props.cities.map((city) => (\r\n                      <Select.Option key={city}>{city}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={this.props.periodNewAddedData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.thisYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.thisYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={this.props.thisYearTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.lastYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.lastYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={this.props.beforePeriodNeedHandleData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={this.props.periodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={this.props.rateData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CityView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ProjectTable(props) {\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title={KEY_PROJECT_NAME}\r\n      key={KEY_PROJECT_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredProjects.length > 0 ?\r\n        props.data.filter(item => props.filteredProjects.indexOf(item[KEY_PROJECT_NAME]) != -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nProjectTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ProjectTable;\r\n","import {\r\n  DEFAULT_STATISTIC_ITEMS,\r\n  KEY_TICKET_TOTAL,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  STAGES,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES\r\n} from './constants';\r\n\r\nexport function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|（.*?）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}\r\n\r\nexport function filterProject(projectName, reg) {\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function filterProjectStage(projectName) {\r\n  let filteredName = null;\r\n  for (let stage of STAGES) {\r\n    if (projectName.indexOf(stage) != -1) {\r\n      filteredName = projectName.substring(0, projectName.indexOf(stage));\r\n      return filteredName;\r\n    }\r\n  }\r\n  return projectName;\r\n}\r\n\r\nexport function formatToTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let projectName in data) {\r\n    for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = projectName;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[secondCategory] = data[secondCategory][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToRateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let projectName in data) {\r\n    for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n      RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = projectName;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport ProjectTable from './ProjectTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\nimport {\r\n  formatToTable,\r\n  formatToRateTable\r\n} from '../utils';\r\n\r\nclass ProjectView extends React.Component {\r\n  static defaultProps = {\r\n    cities: [],\r\n    projectData: {}\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      projects: [],\r\n      data: {}\r\n    }\r\n  }\r\n\r\n  filterCity = (city) => {\r\n    if (this.props.projectData[city] != null) {\r\n      this.setState({\r\n        data: this.props.projectData[city]\r\n      });\r\n      let projects = [];\r\n      for (let item in this.props.projectData[city]) {\r\n        for (let project in this.props.projectData[city][item]) {\r\n          if (projects.indexOf(project) == -1) {\r\n            projects = [...projects, project];\r\n          }\r\n        }\r\n      }\r\n      this.setState({\r\n        projects: projects\r\n      });\r\n    }\r\n  }\r\n\r\n  filterProjects = (projects) => {\r\n    if (projects.length > 0) {\r\n      this.setState({\r\n        filteredProjects: projects\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredProjects: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要显示的城市'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterCity}\r\n                >\r\n                  {\r\n                    this.props.cities.map((city) => (\r\n                      <Select.Option key={city}>{city}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的项目'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterProjects}\r\n                >\r\n                  {\r\n                    this.state.projects.map((project) => (\r\n                      <Select.Option key={project}>{project}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={formatToTable(this.state.data.periodNewAddedResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.state.data.thisYearBeforePeriodResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.state.data.thisYearBeforePeriodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={formatToTable(this.state.data.thisYearTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.state.data.lastYearBeforePeriodResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.state.data.lastYearBeforePeriodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={formatToTable(this.state.data.beforePeriodNeedHandleResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={formatToTable(this.state.data.periodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={formatToRateTable(this.state.data.rateResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectView;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport DataForm from './components/DataForm';\nimport AreaView from './components/AreaView';\nimport CityView from './components/CityView';\nimport ProjectView from './components/ProjectView';\nimport XLSX from 'xlsx';\nimport { Row, Col, message, LocaleProvider, Select, Tabs, Form } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  TICKET_SYSTEM_COUNT,\n  TICKET_ACCEPT,\n  TICKET_OPEN,\n  TICKET_VALIDATE,\n  TICKET_PAUSE,\n  TICKET_INVALID,\n  TICKET_CLOSE,\n  TICKET_CLOSE_NORMAL,\n  TICKET_CLOSE_ABNORMAL,\n  TICKET_CLOSE_ON_TIME,\n  TICKET_RESPONSE_IN_30_MIN,\n  TICKET_RESPONSE_IN_30_HOUR,\n  TICKET_CLOSE_PROCESS_TIME,\n  TICKET_OPEN_PROCESS_TIME,\n  DEFAULT_STATISTIC_ITEMS,\n  KEY_REPORT_TIME,\n  KEY_PROJECT_NAME,\n  KEY_SECOND_CATEGORY,\n  KEY_TICKET_STATUS,\n  KEY_IS_PROCESS_EXCCED,\n  KEY_FIRST_RESPONSE_TIME,\n  KEY_PROCESS_TIME,\n  KEY_CLOSE_TIME,\n  DEFAULT_SECOND_CATEGORIES,\n  KEY_STATISTIC_ITEM,\n  KEY_TICKET_TOTAL,\n  KEY_CITY_NAME,\n  STATISTIC_PERIOD_ADD,\n  STATISTIC_BEFORE_PERIOD_REMAIN,\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_THIS_YEAR_TOTAL,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\n  STATISTIC_BEFORE_PERIOD_TOTAL,\n  STATISTIC_PERIOD_RATE,\n  STAGES,\n  NEW_ADD_CLOSE_RATE,\n  REMAIN_CLOSE_RATE,\n  OVERALL_CLOSE_RATE,\n  RESPONSE_IN_30_MIN_RATE,\n  RESPONSE_IN_30_HOUR_RATE,\n  CLOSE_ON_TIME_RATE,\n  TOTAL_OVERALL_CLOSE_RATE,\n  RATE_STATISTIC_ITEMS\n} from './constants';\n\nimport {\n  filterProjectName,\n  parseTime,\n  filterProjectStage,\n  formatToTable,\n  formatToAreaTable\n} from './utils';\n\n// ticket status\nconst TICKET_STATUS_IN_PROGRESS = '处理中';\nconst TICKET_STATUS_PAUSE = '暂停处理';\nconst TICKET_STATUS_VALIDATE = '待复验';\nconst TICKET_STATUS_CLOSE = '已关闭';\nconst TICKET_STATUS_ABNORMAL_CLOSE = '非正常关闭';\nconst TICKET_STATUS_INVALID = '判定无效';\n\nconst IN_PROGRESS_TICKET_TOTAL_HANDLE_TIME = '未关闭处理时长总数';\n\nconst YES = '是';\nconst NO = '否';\n\nfunction initProjectRate() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of RATE_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction initProject() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of DEFAULT_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction isInProgress(ticketStatus) {\n  return ticketStatus.indexOf(TICKET_STATUS_IN_PROGRESS) === 0;\n}\n\n// 统计周期内新增\nfunction statistic(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 统计周期前遗留\nfunction statisticThisYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 本年度统计周期前遗留累计\nfunction statisticThisYearBeforeStartDateTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n  }\n\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticThisYearTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if (((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) &&\n      ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticRate(statisticMap, statisticItem, rateMap) {\n  for (let projectName in statisticMap) {\n    if (rateMap[projectName] == null) {\n      rateMap[projectName] = initProjectRate();\n    }\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      if (statisticItem === NEW_ADD_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === REMAIN_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE_ON_TIME] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      }\n    }\n  }\n}\n\nfunction statisticCityRate(statisticMap, statisticItem, rateMap) {\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    if ( rateMap[secondCategory] == null) {\n      rateMap[secondCategory] = {};\n    }\n    if (statisticItem === NEW_ADD_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === REMAIN_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE_ON_TIME] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    }\n  }\n}\n\nfunction readExcels(fileList) {\n  return new Promise((resolve, reject) => {\n    let fileReader = new FileReader();\n    let data = {};\n\n    let readFile = (index) => {\n      if (index < fileList.length) {\n        fileReader.onload = (event) => {\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\n          let cityName = fileList[index].name.substring(0, fileList[index].name.indexOf('.'));\n          data[cityName] = XLSX.utils.sheet_to_json(sheet, { blankrows: false });\n          readFile(index + 1);\n        }\n        fileReader.readAsBinaryString(fileList[index]);\n      } else {\n        resolve(data);\n      }\n    };\n    readFile(0);\n  });\n}\n\nlet globalRowKey = 0;\n\nfunction formatCityData(data, city) {\n  let tableData = [];\n  for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction formatToCityRateTable(data, city) {\n  let tableData = [];\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction mergeStageResult(resultArray, filterFunc) {\n  let mergeResult = {};\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      let filteredProjectName = filterFunc(projectName);\n      if (mergeResult[filteredProjectName] == null) {\n        mergeResult[filteredProjectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[filteredProjectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[filteredProjectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[filteredProjectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in mergeResult) {\n    for (let secondCategory in mergeResult[projectName]) {\n      let ticketCloseProcessTime = mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = mergeResult[projectName][secondCategory][TICKET_CLOSE];\n      mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = mergeResult[projectName][secondCategory][TICKET_OPEN];\n      mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return mergeResult;\n}\n\nfunction mergeProjectResult(resultArray) {\n  let mergeResult = initProject();\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let secondCategory in mergeResult) {\n    let ticketCloseProcessTime = mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME];\n    let ticketCloseCount = mergeResult[secondCategory][TICKET_CLOSE];\n    mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n      ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n    let ticketOpenProcessTime = mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME];\n    let ticketOpenCount = mergeResult[secondCategory][TICKET_OPEN];\n    mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] =\n      ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n  }\n\n  return mergeResult;\n}\n\n\nfunction statisticCity(data, startDate, endDate) {\n  // 统计分期\n  let periodNewAddedTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime >= startDate && reportTime <= endDate;\n  });\n  let periodNewAddedResult = statistic(periodNewAddedTickets, startDate, endDate);\n\n  let yearStartDate = moment(startDate).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n  let thisYearbeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < startDate && reportTime >= yearStartDate;\n  });\n\n  let thisYearBeforePeriodResult = statisticThisYearBeforePeriodTickets(thisYearbeforePeriodTickets,\n    startDate, endDate);\n\n  let thisYearBeforePeriodTotalResult = statisticThisYearBeforeStartDateTotalTickets(\n    thisYearbeforePeriodTickets, yearStartDate, endDate);\n\n  let thisYearTotalTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime <= endDate && reportTime >= yearStartDate;\n  });\n  let thisYearTotalResult = statisticThisYearTotalTickets(thisYearTotalTickets,\n    yearStartDate, endDate);\n\n  let lastYearBeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < yearStartDate;\n  });\n  let lastYearBeforePeriodResult = statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\n    startDate, endDate);\n  \n  let lastYearBeforePeriodTotalResult = statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\n    yearStartDate, endDate);\n\n  let beforePeriodNeedHandleResult = {};\n  [periodNewAddedResult, thisYearBeforePeriodResult, lastYearBeforePeriodResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (beforePeriodNeedHandleResult[projectName] == null) {\n        beforePeriodNeedHandleResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            beforePeriodNeedHandleResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in beforePeriodNeedHandleResult) {\n    for (let secondCategory in beforePeriodNeedHandleResult[projectName]) {\n      let ticketCloseProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let periodTotalResult = {};\n  [lastYearBeforePeriodTotalResult, thisYearTotalResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (periodTotalResult[projectName] == null) {\n        periodTotalResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            periodTotalResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in periodTotalResult) {\n    for (let secondCategory in periodTotalResult[projectName]) {\n      let ticketCloseProcessTime = periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = periodTotalResult[projectName][secondCategory][TICKET_CLOSE];\n      periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = periodTotalResult[projectName][secondCategory][TICKET_OPEN];\n      periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let stageRateResult = {};\n  statisticRate(periodNewAddedResult, NEW_ADD_CLOSE_RATE, stageRateResult);\n  statisticRate(thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, stageRateResult);\n  statisticRate(periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, stageRateResult);\n  \n  let stageResult = {\n    periodNewAddedResult: periodNewAddedResult,\n    thisYearBeforePeriodResult: thisYearBeforePeriodResult,\n    thisYearBeforePeriodTotalResult: thisYearBeforePeriodTotalResult,\n    lastYearBeforePeriodResult: lastYearBeforePeriodResult,\n    lastYearBeforePeriodTotalResult: lastYearBeforePeriodTotalResult,\n    beforePeriodNeedHandleResult: beforePeriodNeedHandleResult,\n    thisYearTotalResult: thisYearTotalResult,\n    periodTotalResult: periodTotalResult,\n    rateResult: stageRateResult\n  };\n\n  // 统计项目\n  let projectResult = {\n    periodNewAddedResult:  mergeStageResult([periodNewAddedResult], filterProjectStage),\n    thisYearBeforePeriodResult: mergeStageResult([thisYearBeforePeriodResult], filterProjectStage),\n    thisYearBeforePeriodTotalResult: mergeStageResult([thisYearBeforePeriodTotalResult], filterProjectStage),\n    thisYearTotalResult: mergeStageResult([thisYearTotalResult], filterProjectStage),\n    lastYearBeforePeriodResult: mergeStageResult([lastYearBeforePeriodResult], filterProjectStage),\n    lastYearBeforePeriodTotalResult: mergeStageResult([lastYearBeforePeriodTotalResult], filterProjectStage),\n    beforePeriodNeedHandleResult: mergeStageResult([beforePeriodNeedHandleResult], filterProjectStage),\n    periodTotalResult: mergeStageResult([periodTotalResult], filterProjectStage)\n  };\n  let projectRateResult = {}\n  statisticRate(projectResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, projectRateResult);\n  statisticRate(projectResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, projectRateResult);\n  projectResult.rateResult = projectRateResult;\n\n  let cityResult = {\n    periodNewAddedResult:  mergeProjectResult([projectResult.periodNewAddedResult]),\n    thisYearBeforePeriodResult: mergeProjectResult([projectResult.thisYearBeforePeriodResult]),\n    thisYearBeforePeriodTotalResult: mergeProjectResult([projectResult.thisYearBeforePeriodTotalResult]),\n    thisYearTotalResult: mergeProjectResult([projectResult.thisYearTotalResult]),\n    lastYearBeforePeriodResult: mergeProjectResult([projectResult.lastYearBeforePeriodResult]),\n    lastYearBeforePeriodTotalResult: mergeProjectResult([projectResult.lastYearBeforePeriodTotalResult]),\n    beforePeriodNeedHandleResult: mergeProjectResult([projectResult.beforePeriodNeedHandleResult]),\n    periodTotalResult: mergeProjectResult([projectResult.periodTotalResult])\n  };\n  let cityRateResult = {}\n  statisticCityRate(cityResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, cityRateResult);\n  cityResult.rateResult = cityRateResult;\n\n  let result = {\n    stageResult,\n    projectResult,\n    cityResult\n  };\n  return result;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityData: {\n        periodNewAddedData: [],\n        thisYearBeforePeriodData: [],\n        thisYearBeforePeriodTotalData: [],\n        thisYearTotalData: [],\n        lastYearBeforePeriodData: [],\n        lastYearBeforePeriodTotalData: [],\n        beforePeriodNeedHandleData: [],\n        periodTotalData: [],\n        rateData: [],\n        cities: []\n      },\n      areaData: {\n        periodNewAddedData: [],\n        thisYearBeforePeriodData: [],\n        thisYearBeforePeriodTotalData: [],\n        thisYearTotalData: [],\n        lastYearBeforePeriodData: [],\n        lastYearBeforePeriodTotalData: [],\n        beforePeriodNeedHandleData: [],\n        periodTotalData: [],\n        rateData: []\n      },\n      loading: false\n    };\n  }\n\n  start = (fileList, startDate, endDate) => {\n    this.setState({ loading: true });\n    readExcels(fileList).then((data) => {\n      // clear previous data\n      this.setState({\n        cityData: {\n          periodNewAddedData: [],\n          thisYearBeforePeriodData: [],\n          thisYearBeforePeriodTotalData: [],\n          thisYearTotalData: [],\n          lastYearBeforePeriodData: [],\n          lastYearBeforePeriodTotalData: [],\n          beforePeriodNeedHandleData: [],\n          periodTotalData: [],\n          rateData: [],\n          cities: []\n        },\n        projectData: {},\n        stageResult: {}\n      });\n      let allCities = [];\n      let allCityResult = {};\n      for (let cityName in data) {\n        allCities.push(cityName);\n        let result = statisticCity(data[cityName], startDate, endDate);\n        allCityResult[cityName] = result.cityResult;\n        this.setState((state) => ({\n          cityData: {\n            periodNewAddedData:  [...state.cityData.periodNewAddedData, ...formatCityData(result.cityResult.periodNewAddedResult, cityName)],\n            thisYearBeforePeriodData: [...state.cityData.thisYearBeforePeriodData, ...formatCityData(result.cityResult.thisYearBeforePeriodResult, cityName)],\n            thisYearBeforePeriodTotalData: [...state.cityData.thisYearBeforePeriodTotalData, ...formatCityData(result.cityResult.thisYearBeforePeriodTotalResult, cityName)],\n            thisYearTotalData: [...state.cityData.thisYearTotalData, ...formatCityData(result.cityResult.thisYearTotalResult, cityName)],\n            lastYearBeforePeriodData: [...state.cityData.lastYearBeforePeriodData, ...formatCityData(result.cityResult.lastYearBeforePeriodResult, cityName)],\n            lastYearBeforePeriodTotalData: [...state.cityData.lastYearBeforePeriodTotalData, ...formatCityData(result.cityResult.lastYearBeforePeriodTotalResult, cityName)],\n            beforePeriodNeedHandleData: [...state.cityData.beforePeriodNeedHandleData, ...formatCityData(result.cityResult.beforePeriodNeedHandleResult, cityName)],\n            periodTotalData: [...state.cityData.periodTotalData, ...formatCityData(result.cityResult.periodTotalResult, cityName)],\n            rateData: [...state.cityData.rateData, ...formatToCityRateTable(result.cityResult.rateResult, cityName)],\n            cities: allCities\n          }\n        }));\n        this.setState(state => ({\n          projectData: {\n            ...state.projectData,\n            [cityName]: result.projectResult\n          }\n        }));\n        this.setState(state => ({\n          stageResult: {\n            ...state.stageResult,\n            [cityName]: result.stageResult\n          }\n        }));\n      }\n      let areaResult = {\n        periodNewAddedResult: initProject(),\n        thisYearBeforePeriodResult: initProject(),\n        thisYearBeforePeriodTotalResult: initProject(),\n        thisYearTotalResult: initProject(),\n        lastYearBeforePeriodResult: initProject(),\n        lastYearBeforePeriodTotalResult: initProject(),\n        beforePeriodNeedHandleResult: initProject(),\n        periodTotalResult: initProject()\n      };\n      // statistic area result\n      for (let table in areaResult) {\n        for (let cityName in allCityResult) {\n          for (let secondCategory in areaResult[table]) {\n            let result = allCityResult[cityName][table][secondCategory];\n            for (let item in result) {\n              if (item === TICKET_CLOSE_PROCESS_TIME) {\n                let ticketCloseCount = result[TICKET_CLOSE];\n                let ticketCloseProcessTime = result[TICKET_CLOSE_PROCESS_TIME];\n                areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n                  ticketCloseCount * ticketCloseProcessTime;\n              } else if (item === TICKET_OPEN_PROCESS_TIME) {\n                let ticketOpenProcessTime = result[TICKET_OPEN_PROCESS_TIME];\n                let ticketOpenCount = result[TICKET_OPEN];\n                areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n                  ticketOpenCount * ticketOpenProcessTime;\n              }\n              else {\n                areaResult[table][secondCategory][item] += result[item];\n              }\n            }\n          }\n        }\n      }\n      // get average process time\n      for (let table in areaResult) {\n        for (let secondCategory in areaResult[table]) {\n          let ticketCloseProcessTime = areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n          let ticketCloseCount = areaResult[table][secondCategory][TICKET_CLOSE];\n          areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n            ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n          let ticketOpenProcessTime = areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME];\n          let ticketOpenCount = areaResult[table][secondCategory][TICKET_OPEN];\n          areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n            ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n        }\n      }\n      this.setState({\n        areaData: {\n          periodNewAddedData: formatToAreaTable(areaResult.periodNewAddedResult),\n          thisYearBeforePeriodData: formatToAreaTable(areaResult.thisYearBeforePeriodResult),\n          thisYearBeforePeriodTotalData: formatToAreaTable(areaResult.thisYearBeforePeriodTotalResult),\n          thisYearTotalData: formatToAreaTable(areaResult.thisYearTotalResult),\n          lastYearBeforePeriodData: formatToAreaTable(areaResult.lastYearBeforePeriodResult),\n          lastYearBeforePeriodTotalData: formatToAreaTable(areaResult.lastYearBeforePeriodTotalResult),\n          beforePeriodNeedHandleData: formatToAreaTable(areaResult.beforePeriodNeedHandleResult),\n          periodTotalData: formatToAreaTable(areaResult.periodTotalResult),\n          rateData: [] \n        }\n      })\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  exportExcel = () => {\n    let header = [KEY_PROJECT_NAME, KEY_STATISTIC_ITEM, ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL];\n    if (this.state.newAddedData.length > 0 || this.state.thisYearBeforeStartData.length > 0 ||\n      this.state.thisYearBeforePeriodTotalData.length > 0 || this.state.thisYearTotalData.length > 0 ||\n      this.state.lastYearBeforePeriodData.length > 0 ||\n      this.state.lastYearBeforePeriodTotalData.length > 0 ||\n      this.state.beforePeriodNeedHandleData.length > 0 ||\n      this.state.periodTotalData.length > 0) {\n      let sheet1 = XLSX.utils.json_to_sheet(this.state.periodNewAddedData, {\n        header: header\n      });\n      let sheet2 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodData, {\n        header: header\n      });\n      let sheet3 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodTotalData, {\n        header: header\n      });\n      let sheet4 = XLSX.utils.json_to_sheet(this.state.thisYearTotalData, {\n        header: header\n      });\n      let sheet5 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodData, {\n        header: header\n      });\n      let sheet6 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodTotalData, {\n        header: header\n      });\n      let sheet7 = XLSX.utils.json_to_sheet(this.state.beforePeriodNeedHandleData, {\n        header: header\n      });\n      let sheet8 = XLSX.utils.json_to_sheet(this.state.periodTotalData, {\n        header: header\n      });\n      let sheet9 = XLSX.utils.json_to_sheet(this.state.rateData, {\n        header: header\n      });\n      let workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, sheet1, STATISTIC_PERIOD_ADD);\n      XLSX.utils.book_append_sheet(workbook, sheet2, STATISTIC_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet3, STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet4, STATISTIC_THIS_YEAR_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet5, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet6, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet7, STATISTIC_BEFORE_PERIOD_NEED_HANDLE);\n      XLSX.utils.book_append_sheet(workbook, sheet8, STATISTIC_BEFORE_PERIOD_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet9, STATISTIC_PERIOD_RATE)\n      XLSX.writeFile(workbook, 'statistic-' + moment(Date.now()).format('YYYY-MM-DD-HH-MM-SS') + '.xlsx')\n    } else {\n      message.error('请先点击“开始统计”按钮进行统计！');\n    }\n  }\n\n  render() {\n    const tabArea = (\n      <AreaView\n        periodNewAddedData={this.state.areaData.periodNewAddedData}\n        thisYearBeforePeriodData={this.state.areaData.thisYearBeforePeriodData}\n        thisYearBeforePeriodTotalData={this.state.areaData.thisYearBeforePeriodTotalData}\n        thisYearTotalData={this.state.areaData.thisYearTotalData}\n        lastYearBeforePeriodData={this.state.areaData.lastYearBeforePeriodData}\n        lastYearBeforePeriodTotalData={this.state.areaData.lastYearBeforePeriodTotalData}\n        beforePeriodNeedHandleData={this.state.areaData.beforePeriodNeedHandleData}\n        periodTotalData={this.state.areaData.periodTotalData}\n        rateData={this.state.areaData.rateData}\n      />\n    );\n\n    const tabCity = (\n      <CityView\n        periodNewAddedData={this.state.cityData.periodNewAddedData}\n        thisYearBeforePeriodData={this.state.cityData.thisYearBeforePeriodData}\n        thisYearBeforePeriodTotalData={this.state.cityData.thisYearBeforePeriodTotalData}\n        thisYearTotalData={this.state.cityData.thisYearTotalData}\n        lastYearBeforePeriodData={this.state.cityData.lastYearBeforePeriodData}\n        lastYearBeforePeriodTotalData={this.state.cityData.lastYearBeforePeriodTotalData}\n        beforePeriodNeedHandleData={this.state.cityData.beforePeriodNeedHandleData}\n        periodTotalData={this.state.cityData.periodTotalData}\n        rateData={this.state.cityData.rateData}\n        cities={this.state.cityData.cities}\n      />\n    );\n\n    const tabProject = (\n      <ProjectView\n        cities={this.state.cityData.cities}\n        projectData={this.state.projectData}\n      />\n    );\n\n    const tabStage = (\n      <ProjectView\n        cities={this.state.cityData.cities}\n        projectData={this.state.stageResult}\n      />\n    );\n \n    return (\n      <LocaleProvider locale={zh_CN}>\n        <div>\n          <h2 className=\"text--center heading\">统计辅助工具</h2>\n          <DataForm\n            onStart={this.start}\n            onExport={this.exportExcel}\n            loading={this.state.loading}\n          />\n          <Row style={{ margin: '40px 0' }}>\n            <Col span={22} offset={1}>\n              <Tabs type=\"card\">\n                <Tabs.TabPane tab=\"大区\" key=\"大区\">{tabArea}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"城市\" key=\"城市\">{tabCity}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"项目\" key=\"项目\">{tabProject}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"分期\" key=\"分期\">{tabStage}</Tabs.TabPane>\n              </Tabs>\n            </Col>\n          </Row>\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}