{"version":3,"sources":["components/DataForm.js","constants.js","components/ChartView.js","components/ProjectTable.js","utils.js","components/ProjectView.js","functions/utils.js","App.js","store/actions/index.js","store/action-types.js","store/reducers/index.js","store/reducers/category.js","store/reducers/ticket-state.js","store/index.js","index.js"],"names":["DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startTime","Date","set","hour","minute","second","endTime","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","es_col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","toConsumableArray","concat","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","React","Component","defaultPorps","onExport","WrapDataForm","create","KEY_REPORT_TIME","KEY_PROJECT_NAME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","NEW_ADD_CLOSE_RATE","REMAIN_CLOSE_RATE","OVERALL_CLOSE_RATE","CLOSE_ON_TIME_RATE","TOTAL_OVERALL_CLOSE_RATE","RATE_STATISTIC_ITEMS","COL_AREA","COL_CITY_COMPANY","COL_PROJECT","COL_PROJECT_STAGE","COL_CURRENT_STATUS","COL_REPORT_TIME","TICKET_STATUS","CATEGORIES","STATISTIC_ITEMS","ChartView","cityCategoryCloseAverageHandleTimeSeries","newAddedCities","cityName","cityGraphData","cityCategoryCloseAverageHandleTimeData","name","barMaxWidth","position","color","show","formatter","data","citySecondCategoryOpenAverageHandleTimeSeries","openAverageHandleTimeCities","citySecondCategoryOpenAverageHandleTimeData","core_default","style","margin","height","echarts","option","title","objectSpread","text","left","top","textStyle","tooltip","trigger","axisPointer","crossStyle","toolbox","feature","saveAsImage","right","xAxis","allCities","yAxis","min","max","series","cityTotalAcceptData","yAxisIndex","cityOverallCloseRateData","ProjectTable","projectColumn","table","Column","dataIndex","key","width","otherColumns","map","item","currentPageData","dataSource","filteredProjects","length","filter","pagination","pageSize","scroll","y","size","defaultProps","formatToTable","tableData","rowKey","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","statisticItem","rowData","_arr","_i","category","push","return","formatToRateTable","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_arr2","_i2","ProjectView","filterProjects","projects","projectName","es_select","mode","onChange","project","Option","components_ProjectTable","periodNewAddedResult","thisYearbeforePeriodResult","thisYearBeforePeriodTotalResult","thisYearTotalResult","lastYearBeforePeriodResult","lastYearBeforePeriodTotalResult","beforePeriodNeedHandleResult","periodTotalResult","rateResult","initStatisticItem","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","itemName","initRate","getCategory","ticket","statisticPeriodNewAddedTickets","tickets","closeStartTime","closeEndTime","col","dataMap","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","ticketCategory","ticketStatistic","ticketStatus","ticketReportTime","moment","ticketPauseDuration","Number","ticketCloseTime","duration","diff","subtract","as","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","ticketCloseCount","ticketCloseProcessTime","toFixed","ticketOpenProcessTime","ticketOpenCount","statisticThisYearBeforePeriodTickets","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","statisticThisYearBeforePeriodTotalTickets","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","statisticLastYearBeforePeriodTickets","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","statisticLastYearBeforePeriodTotalTickets","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","statisticThisYearTotalTickets","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","statisticBeforePeriodNeedHandleResult","array","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","result","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","statisticPeriodTotalResult","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","statisticRate","statisticMap","rateMap","allCategory","allTicketState","App","start","_this$props","addCategories","addTicketStates","fileReader","FileReader","readFile","onload","event","workbook","XLSX","read","target","sheet","Sheets","SheetNames","utils","sheet_to_json","blankrows","readAsBinaryString","readExcelData","allStages","allProjects","Util","stage","city","yearStartTime","month","date","periodTickets","beforePeriodTickets","thisYearTotalTickets","reportTime","lastYearBeforePeriodTickets","stageData","thisYearBeforePeriodResult","projectData","cityData","areaData","tabChart","components_ChartView","tabArea","components_ProjectView","tabCity","tabProject","tabStage","locale_provider","locale","zh_CN","className","components_DataForm","exportExcel","tabs","TabPane","tab","mapDispatchToProps","categories","payload","ticketStates","ConnectedApp","connect","reducer","combineReducers","arguments","action","ticketState","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.e79f0d17.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {},\n    onExport: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func,\n    onExport: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startTime = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endTime = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startTime, endTime);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              {\n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在统计...': '开始统计'\n              }\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '未关时长（天）';\r\nexport const TICKET_NOT_RESPONSED = '未响应';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\nexport const KEY_CITY_NAME = '城市';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const NEW_ADD_CLOSE_RATE = '新增关闭率';\r\nexport const REMAIN_CLOSE_RATE = '遗留关闭率';\r\nexport const OVERALL_CLOSE_RATE = '总体关闭率';\r\nexport const RESPONSE_IN_30_MIN_RATE = '响应及时率（0.5h）'\r\nexport const RESPONSE_IN_30_HOUR_RATE = '响应及时率（30h）';\r\nexport const CLOSE_ON_TIME_RATE = '及时关闭率';\r\nexport const TOTAL_OVERALL_CLOSE_RATE = '累计总体关闭率';\r\n\r\nexport const RATE_STATISTIC_ITEMS = [\r\n  REMAIN_CLOSE_RATE,\r\n  NEW_ADD_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_RATE = '本年度统计周期内';\r\n\r\nexport const STAGES = [\r\n  '一期',\r\n  '二期',\r\n  '三期',\r\n  '四期',\r\n  '五期',\r\n  '六期',\r\n  '七期',\r\n  '八期',\r\n  '九期',\r\n  '十期'\r\n];\r\n\r\n\r\n// new data key\r\nexport const COL_AREA = '大区';\r\nexport const COL_CITY_COMPANY = '城市公司';\r\nexport const COL_PROJECT = '项目';\r\nexport const COL_PROJECT_STAGE = '项目分期';\r\nexport const COL_CURRENT_STATUS = '当前工单状态';\r\nexport const COL_FIRST_CLASS = '一级报事分类';\r\nexport const COL_REPORT_TIME = '报事时间';\r\nexport const COL_RESPONSE_TIME = '响应时间';\r\nexport const COL_FINISH_TIME = '实际完成时间';\r\nexport const COL_TOTAL_HANDLE_TIME = '工单总处理时长(天）';\r\nexport const COL_EXPIRE = '总时长超时预警';\r\nexport const COL_CLOSE_TIME_1 = '业主关闭时间';\r\nexport const COL_CLOSE_TIME_2 = '非正常关闭时间';\r\nexport const COL_CLOSE_TIME_3 = '强制关闭时间';\r\nexport const COL_PAUSE = '累计暂停时长';\r\nexport const COL_OVERTIME_WARN = '总时长超时预警';\r\n\r\nexport const CATEGORY_UNCLASSIFY = '未分类';\r\n\r\nexport const TICKET_STATUS = {\r\n  RESPONSED: '已响应',\r\n  SOLUTION_PREPARE: '方案制定中',\r\n  SOLUTION_APPROVE: '方案已批准',\r\n  INVALID: '无效',\r\n  CLOSED: '已关闭',\r\n  FORCE_CLOSE: '强制关闭',\r\n  CLOSE_ABNORMAL: '非正常关闭',\r\n  DISPATCHED: '已分派',\r\n  WORK_DOING: '施工中',\r\n  WORK_FINISHED: '施工完成',\r\n  DROP_IN: '已上门',\r\n  COMMENTED: '已评价',\r\n  NEW: '新建'\r\n};\r\n\r\nexport const CATEGORIES = [\r\n  '土建',\r\n  '维修-其他类',\r\n  '机电',\r\n  '室内精装',\r\n  '室内门窗及入户门',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '渗漏',\r\n  '室内电器',\r\n  '公区部分',\r\n  CATEGORY_UNCLASSIFY\r\n];\r\n\r\n// statistic items\r\nexport const STATISTIC_ITEMS = [\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_NOT_RESPONSED,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n]\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\n// import the core library.\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\n\r\n// then import echarts modules those you have used manually.\r\nimport echarts from 'echarts/lib/echarts';\r\nimport 'echarts/lib/chart/line';\r\nimport 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/chart/pie';\r\n// import 'echarts/lib/chart/scatter';\r\n// import 'echarts/lib/chart/radar';\r\n\r\n// import 'echarts/lib/chart/map';\r\n// import 'echarts/lib/chart/treemap';\r\n// import 'echarts/lib/chart/graph';\r\n// import 'echarts/lib/chart/gauge';\r\n// import 'echarts/lib/chart/funnel';\r\n// import 'echarts/lib/chart/parallel';\r\n// import 'echarts/lib/chart/sankey';\r\n// import 'echarts/lib/chart/boxplot';\r\n// import 'echarts/lib/chart/candlestick';\r\n// import 'echarts/lib/chart/effectScatter';\r\n// import 'echarts/lib/chart/lines';\r\n// import 'echarts/lib/chart/heatmap';\r\n\r\n// import 'echarts/lib/component/graphic';\r\n// import 'echarts/lib/component/grid';\r\nimport 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/tooltip';\r\n// import 'echarts/lib/component/polar';\r\n// import 'echarts/lib/component/geo';\r\n// import 'echarts/lib/component/parallel';\r\n// import 'echarts/lib/component/singleAxis';\r\n// import 'echarts/lib/component/brush';\r\n\r\nimport 'echarts/lib/component/title';\r\n\r\n// import 'echarts/lib/component/dataZoom';\r\n// import 'echarts/lib/component/visualMap';\r\n\r\n// import 'echarts/lib/component/markPoint';\r\n// import 'echarts/lib/component/markLine';\r\n// import 'echarts/lib/component/markArea';\r\n\r\n// import 'echarts/lib/component/timeline';\r\nimport 'echarts/lib/component/toolbox';\r\n// import { Rect } from 'echarts/lib/util/graphic';\r\n\r\n// import 'zrender/lib/vml/vml';\r\n\r\nimport  { CATEGORIES } from '../constants';\r\n\r\nfunction ChartView(props) {\r\n  const titleConfig = {\r\n    left: 'center',\r\n    top: 0,\r\n    textStyle: {\r\n      color: '#000000'\r\n    }\r\n  };\r\n  const toolboxConfig = {\r\n    feature: {\r\n      saveAsImage: { show: true }\r\n    },\r\n    right: 40\r\n  };\r\n  const legendConfig = {\r\n    left: 40\r\n  };\r\n  const styles = {\r\n    margin: '40px 0',\r\n    height: '500px'\r\n  };\r\n\r\n  let cityCategoryCloseAverageHandleTimeSeries = [];\r\n  let newAddedCities = [];\r\n  for (let cityName in props.cityGraphData.cityCategoryCloseAverageHandleTimeData) {\r\n    newAddedCities = [\r\n      ...newAddedCities, cityName\r\n    ];\r\n    cityCategoryCloseAverageHandleTimeSeries = [\r\n      ...cityCategoryCloseAverageHandleTimeSeries,\r\n      {\r\n        name: cityName,\r\n        type: 'bar',\r\n        barMaxWidth: 20,\r\n        label: {\r\n          position: 'top',\r\n          color: '#333',\r\n          show: true,\r\n          formatter: '{c}'\r\n        },\r\n        data: props.cityGraphData.cityCategoryCloseAverageHandleTimeData[cityName]\r\n      }\r\n    ];\r\n  }\r\n\r\n  let citySecondCategoryOpenAverageHandleTimeSeries = [];\r\n  let openAverageHandleTimeCities = [];\r\n  for (let cityName in props.citySecondCategoryOpenAverageHandleTimeData) {\r\n    openAverageHandleTimeCities = [\r\n      ...openAverageHandleTimeCities, cityName\r\n    ];\r\n    citySecondCategoryOpenAverageHandleTimeSeries = [\r\n      ...citySecondCategoryOpenAverageHandleTimeSeries,\r\n      {\r\n        name: cityName,\r\n        type: 'bar',\r\n        barMaxWidth: 20,\r\n        label: {\r\n          position: 'top',\r\n          color: '#333',\r\n          show: true,\r\n          formatter: '{c}'\r\n        },\r\n        data: props.citySecondCategoryOpenAverageHandleTimeData[cityName]\r\n      }\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各城市日常维修总体关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.allCities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityGraphData.cityTotalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityGraphData.cityOverallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      {/* <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各项目日常维修总体关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.projects,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectTotalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectOverallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各项目分期日常维修总体关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.stages,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageTotalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageOverallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关城市分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '城市剩余未关',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.cityOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关二级分类分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '二级分类',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.secondCategoryOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各城市新增维修关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNewAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNewAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '项目新增关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.newAddedProjects,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNewAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNewAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '分期新增关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.newAddedStages,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageNewAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.stageNewAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '新增维修城市分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.cityNewAddedAcceptData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '新增维修二级分类分布图',\r\n              left: 'center',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.secondCategoryNewAddedAcceptData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各城市需处理关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            legend: {\r\n              data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n              ...legendConfig\r\n            },\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '需处理受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '比率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '需处理受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNeedHandleAcceptData\r\n              },\r\n              {\r\n                name: '及时关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNeedHandleCloseOnTimeRateData\r\n              },\r\n              {\r\n                name: '总体关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityNeedHandleCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '各项目需处理关闭率',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            legend: {\r\n              data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n              ...legendConfig\r\n            },\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.needHandleProjects,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '需处理受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '比率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '需处理受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNeedHandleAcceptData\r\n              },\r\n              {\r\n                name: '及时关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNeedHandleCloseOnTimeRateData\r\n              },\r\n              {\r\n                name: '总体关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.projectNeedHandleCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '平均处理时长城市分布图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            legend: {\r\n              data: ['已关闭', '剩余未关'],\r\n              ...legendConfig\r\n            },\r\n            series: [\r\n              {\r\n                name: '已关闭',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityCloseAverageHandleTimeData\r\n              },\r\n              {\r\n                name: '剩余未关',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.cityOpenAverageHandleTimeData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '已关闭维修分类平均处理时长',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: DEFAULT_SECOND_CATEGORIES,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            legend: {\r\n              data: newAddedCities,\r\n              ...legendConfig\r\n            },\r\n            series: cityCategoryCloseAverageHandleTimeSeries\r\n          }}\r\n        />\r\n      </Row>\r\n      <Row style={{margin: '40px 0'}}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关维修分类平均处理时长',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: DEFAULT_SECOND_CATEGORIES,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            legend: {\r\n              data: openAverageHandleTimeCities,\r\n              ...legendConfig\r\n            },\r\n            series: citySecondCategoryOpenAverageHandleTimeSeries\r\n          }}\r\n        />\r\n      </Row> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChartView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ProjectTable(props) {\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title={KEY_PROJECT_NAME}\r\n      key={KEY_PROJECT_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredProjects.length > 0 ?\r\n        props.data.filter(item => props.filteredProjects.indexOf(item[KEY_PROJECT_NAME]) !== -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nProjectTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ProjectTable;\r\n","import {\r\n  DEFAULT_STATISTIC_ITEMS,\r\n  KEY_TICKET_TOTAL,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  STAGES,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  STATISTIC_ITEMS,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  CATEGORIES,\r\n  RATE_STATISTIC_ITEMS\r\n} from './constants';\r\n\r\nimport XLSX from 'xlsx';\r\n\r\nexport function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|（.*?）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}\r\n\r\nexport function filterProject(projectName, reg) {\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function filterProjectStage(projectName) {\r\n  let filteredName = null;\r\n  for (let stage of STAGES) {\r\n    if (projectName.indexOf(stage) != -1) {\r\n      filteredName = projectName.substring(0, projectName.indexOf(stage));\r\n      return filteredName;\r\n    }\r\n  }\r\n  return projectName;\r\n}\r\n\r\nexport function formatToTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToRateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of RATE_STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of STATISTIC_ITEMS) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[category] = data[category][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[secondCategory] = data[secondCategory][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function readExcelData (fileList) {\r\n  return new Promise((resolve, reject) => {\r\n    let fileReader = new FileReader();\r\n    let data = [];\r\n\r\n    let readFile = (index) => {\r\n      if (index < fileList.length) {\r\n        fileReader.onload = (event) => {\r\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\r\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\r\n          data = [...data, ...XLSX.utils.sheet_to_json(sheet, { blankrows: false })];\r\n          readFile(index + 1);\r\n        }\r\n        fileReader.readAsBinaryString(fileList[index]);\r\n      } else {\r\n        resolve(data);\r\n      }\r\n    };\r\n    readFile(0);\r\n  });\r\n}\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport ProjectTable from './ProjectTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\nimport {\r\n  formatToTable,\r\n  formatToRateTable\r\n} from '../utils';\r\n\r\nclass ProjectView extends React.Component {\r\n  static defaultProps = {\r\n    data: {}\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredProjects: []\r\n    }\r\n  }\r\n\r\n  filterProjects = (projects) => {\r\n    if (projects.length > 0) {\r\n      this.setState({\r\n        filteredProjects: projects\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredProjects: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let projects = [];\r\n    for (let item in this.props.data) {\r\n      for (let projectName in this.props.data[item]) {\r\n        if (projects.indexOf(projectName) === -1) {\r\n          projects = [...projects, projectName];\r\n        }\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的项目'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterProjects}\r\n                >\r\n                  {\r\n                    projects.map((project) => (\r\n                      <Select.Option key={project}>{project}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={formatToTable(this.props.data.periodNewAddedResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.thisYearbeforePeriodResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearBeforePeriodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={formatToTable(this.props.data.beforePeriodNeedHandleResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={formatToTable(this.props.data.periodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={formatToRateTable(this.props.data.rateResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectView;\r\n","import {\r\n  COL_REPORT_TIME,\r\n  COL_OVERTIME_WARN,\r\n  COL_PROJECT_STAGE,\r\n  COL_FIRST_CLASS,\r\n  COL_CURRENT_STATUS,\r\n  COL_PAUSE,\r\n  COL_CLOSE_TIME_1,\r\n  COL_CLOSE_TIME_2,\r\n  COL_CLOSE_TIME_3,\r\n  TICKET_NOT_RESPONSED,\r\n  KEY_TICKET_TOTAL,\r\n  TICKET_STATUS,\r\n  CATEGORIES,\r\n  STATISTIC_ITEMS,\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  CATEGORY_UNCLASSIFY,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  RATE_STATISTIC_ITEMS\r\n} from '../constants';\r\n\r\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\r\nimport moment from 'moment';\r\n\r\nexport const initStatisticItem = () => {\r\n  let map = {};\r\n  for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n    map[category] = {};\r\n    for (let itemName of STATISTIC_ITEMS) {\r\n      map[category][itemName] = 0;\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\nexport const initRate = () => {\r\n  let map = {};\r\n  for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n    map[category] = {};\r\n    for (let itemName of RATE_STATISTIC_ITEMS) {\r\n      map[category][itemName] = 0;\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\nexport const getCategory = ticket => ticket[COL_FIRST_CLASS] || CATEGORY_UNCLASSIFY;\r\n\r\nexport const formatStageToTable = (data) => {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nconst STAGE = /\\d*期/;\r\n\r\nexport function filterProjectName(name) {\r\n  let filteredName = name;\r\n  if (name.match(STAGE)) {\r\n    filteredName = name.substring(0, name.match(STAGE).index);\r\n  }\r\n  return filteredName;\r\n}\r\n\r\n// 统计周期内新增\r\nexport const statisticPeriodNewAddedTickets = (tickets, closeStartTime, closeEndTime, col) => {\r\n  let dataMap = {};\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 关闭 + 剩余未关\r\n    if (ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.COMMENTED ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) || ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(closeEndTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期前遗留\r\nexport const statisticThisYearBeforePeriodTickets = (tickets, closeStartTime, closeEndTime, col) => {\r\n  let dataMap = {};\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) || ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(closeEndTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期前遗留累计\r\nexport const statisticThisYearBeforePeriodTotalTickets = (tickets, closeStartTime, closeEndTime, col) => {\r\n  let dataMap = {};\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW ||\r\n      ticketStatus === TICKET_STATUS.CLOSED ||\r\n      ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n  }\r\n\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  return dataMap;\r\n}\r\n\r\n// 上年度统计周期前遗留\r\nexport const statisticLastYearBeforePeriodTickets = (tickets, closeStartTime, closeEndTime, col) => {\r\n  let dataMap = {};\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(closeEndTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 上年度统计周期前遗留累计\r\nexport const statisticLastYearBeforePeriodTotalTickets = (tickets, closeStartTime, closeEndTime, col) => {\r\n  let dataMap = {};\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(closeEndTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期累计\r\nexport const statisticThisYearTotalTickets = (tickets, closeStartTime, closeEndTime, col) => {\r\n  let dataMap = {};\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(closeEndTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 统计周期前需处理\r\nexport const statisticBeforePeriodNeedHandleResult = (array) => {\r\n  let beforePeriodNeedHandleResult = {};\r\n  for (let result of array) {\r\n    for (let name in result) {\r\n      if (beforePeriodNeedHandleResult[name] == null) {\r\n        beforePeriodNeedHandleResult[name] = initStatisticItem();\r\n      }\r\n      for (let category in beforePeriodNeedHandleResult[name]) {\r\n        for (let item of STATISTIC_ITEMS) {\r\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\r\n            let ticketCloseCount = result[name][category][TICKET_CLOSE];\r\n            let ticketCloseProcessTime = result[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n            beforePeriodNeedHandleResult[name][category][TICKET_CLOSE_PROCESS_TIME] +=\r\n              ticketCloseCount * ticketCloseProcessTime;\r\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\r\n            let ticketOpenProcessTime = result[name][category][TICKET_OPEN_PROCESS_TIME];\r\n            let ticketOpenCount = result[name][category][TICKET_OPEN];\r\n            beforePeriodNeedHandleResult[name][category][TICKET_OPEN_PROCESS_TIME] +=\r\n              ticketOpenCount * ticketOpenProcessTime;\r\n          }\r\n          else {\r\n            beforePeriodNeedHandleResult[name][category][item] +=\r\n              result[name][category][item];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // get average process time\r\n  for (let name in beforePeriodNeedHandleResult) {\r\n    for (let category in beforePeriodNeedHandleResult[name]) {\r\n      let ticketCloseProcessTime = beforePeriodNeedHandleResult[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      let ticketCloseCount = beforePeriodNeedHandleResult[name][category][TICKET_CLOSE];\r\n      beforePeriodNeedHandleResult[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = beforePeriodNeedHandleResult[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = beforePeriodNeedHandleResult[name][category][TICKET_OPEN];\r\n      beforePeriodNeedHandleResult[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return beforePeriodNeedHandleResult;\r\n}\r\n\r\n// 统计周期累计\r\nexport const statisticPeriodTotalResult = (array) => {\r\n  let periodTotalResult = {};\r\n  for (let result of array) {\r\n    for (let name in result) {\r\n      if (periodTotalResult[name] == null) {\r\n        periodTotalResult[name] = initStatisticItem();\r\n      }\r\n      for (let category in periodTotalResult[name]) {\r\n        for (let item of STATISTIC_ITEMS) {\r\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\r\n            let ticketCloseCount = result[name][category][TICKET_CLOSE];\r\n            let ticketCloseProcessTime = result[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n            periodTotalResult[name][category][TICKET_CLOSE_PROCESS_TIME] +=\r\n              ticketCloseCount * ticketCloseProcessTime;\r\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\r\n            let ticketOpenProcessTime = result[name][category][TICKET_OPEN_PROCESS_TIME];\r\n            let ticketOpenCount = result[name][category][TICKET_OPEN];\r\n            periodTotalResult[name][category][TICKET_OPEN_PROCESS_TIME] +=\r\n              ticketOpenCount * ticketOpenProcessTime;\r\n          }\r\n          else {\r\n            periodTotalResult[name][category][item] +=\r\n              result[name][category][item];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // get average process time\r\n  for (let name in periodTotalResult) {\r\n    for (let category in periodTotalResult[name]) {\r\n      let ticketCloseProcessTime = periodTotalResult[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      let ticketCloseCount = periodTotalResult[name][category][TICKET_CLOSE];\r\n      periodTotalResult[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = periodTotalResult[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = periodTotalResult[name][category][TICKET_OPEN];\r\n      periodTotalResult[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n\r\n  return periodTotalResult;\r\n}\r\n\r\nexport const statisticRate = (statisticMap, statisticItem, rateMap) => {\r\n  for (let name in statisticMap) {\r\n    if (rateMap[name] == null) {\r\n      rateMap[name] = initRate();\r\n    }\r\n    for (let category in rateMap[name]) {\r\n      if (statisticMap[name][category][TICKET_ACCEPT] > 0) {\r\n        if (statisticItem === NEW_ADD_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === REMAIN_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === OVERALL_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === CLOSE_ON_TIME_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE_ON_TIME] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport DataForm from './components/DataForm';\nimport ChartView from './components/ChartView';\nimport ProjectView from './components/ProjectView';\nimport { Row, Col, message, LocaleProvider, Tabs } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  TICKET_SYSTEM_COUNT,\n  TICKET_ACCEPT,\n  TICKET_OPEN,\n  TICKET_VALIDATE,\n  TICKET_PAUSE,\n  TICKET_INVALID,\n  TICKET_CLOSE,\n  TICKET_CLOSE_NORMAL,\n  TICKET_CLOSE_ABNORMAL,\n  TICKET_CLOSE_ON_TIME,\n  TICKET_RESPONSE_IN_30_MIN,\n  TICKET_RESPONSE_IN_30_HOUR,\n  TICKET_CLOSE_PROCESS_TIME,\n  TICKET_OPEN_PROCESS_TIME,\n  DEFAULT_STATISTIC_ITEMS,\n  KEY_REPORT_TIME,\n  KEY_PROJECT_NAME,\n  KEY_SECOND_CATEGORY,\n  KEY_TICKET_STATUS,\n  KEY_IS_PROCESS_EXCCED,\n  KEY_FIRST_RESPONSE_TIME,\n  KEY_PROCESS_TIME,\n  KEY_CLOSE_TIME,\n  DEFAULT_SECOND_CATEGORIES,\n  KEY_STATISTIC_ITEM,\n  KEY_TICKET_TOTAL,\n  KEY_CITY_NAME,\n  NEW_ADD_CLOSE_RATE,\n  REMAIN_CLOSE_RATE,\n  OVERALL_CLOSE_RATE,\n  RESPONSE_IN_30_MIN_RATE,\n  RESPONSE_IN_30_HOUR_RATE,\n  CLOSE_ON_TIME_RATE,\n  TOTAL_OVERALL_CLOSE_RATE,\n  RATE_STATISTIC_ITEMS,\n  CATEGORY_UNCLASSIFY,\n  COL_FIRST_CLASS,\n  COL_CURRENT_STATUS,\n  COL_PROJECT_STAGE,\n  COL_PROJECT,\n  COL_CITY_COMPANY,\n  COL_AREA,\n  COL_REPORT_TIME,\n} from './constants';\n\nimport {\n  filterProjectName,\n  parseTime,\n  filterProjectStage,\n  formatToAreaTable,\n  formatToAreaTateTable,\n  readExcelData\n} from './utils';\n\nimport { connect } from 'react-redux';\nimport { addCategories, addTicketStates } from './store/actions';\n\nimport * as Util from './functions/utils';\n\n// global variables\nlet allCategory = [];\nlet allTicketState = [];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityGraphData: {}\n    }\n  }\n\n  start = (fileList, startTime, endTime) => {\n    const { addCategories, addTicketStates } = this.props;\n    this.setState({ loading: true });\n    readExcelData(fileList).then((data) => {\n      let allStages = [], allProjects = [], allCities = [];\n      // get all categories and ticket states\n      for (let ticket of data) {\n        let category = Util.getCategory(ticket);\n        if (allCategory.indexOf(category) === -1) {\n          allCategory = [...allCategory, category];\n        }\n        let state = ticket[COL_CURRENT_STATUS];\n        if (allTicketState.indexOf(state) === -1) {\n          allTicketState = [...allTicketState, state];\n        }\n\n        // get all stages\n        let stage = ticket[COL_PROJECT_STAGE];\n        if (allStages.indexOf(stage) === -1) {\n          allStages = [\n            ...allStages,\n            stage\n          ];\n        }\n        // get all projects\n        let project = ticket[COL_PROJECT];\n        if (allProjects.indexOf(project)) {\n          allProjects = [\n            ...allProjects,\n            project\n          ];\n        }\n        // get all cities\n        let city = ticket[COL_CITY_COMPANY];\n        if (allCities.indexOf(city) === -1) {\n          allCities = [\n            ...allCities,\n            city\n          ];\n        }\n      }\n      addCategories(allCategory);\n      addTicketStates(allTicketState);\n\n      this.setState({\n        allStages,\n        allProjects,\n        allCities\n      });\n\n      let yearStartTime = moment(startTime).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n\n      let periodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime >= startTime && ticketReportTime <= endTime;\n      });\n      let beforePeriodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime >= yearStartTime && ticketReportTime < startTime;\n      });\n      let thisYearTotalTickets = data.filter((item) => {\n        let reportTime = moment(item[KEY_REPORT_TIME]);\n        return reportTime <= endTime && reportTime >= yearStartTime;\n      });\n      let lastYearBeforePeriodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime < yearStartTime\n      });\n\n      // 统计分期\n      let stageData = {};\n      stageData.periodNewAddedResult = Util.statisticPeriodNewAddedTickets(periodTickets,\n        startTime, endTime, COL_PROJECT_STAGE);\n      stageData.thisYearBeforePeriodResult = Util.statisticThisYearBeforePeriodTickets(beforePeriodTickets,\n        startTime, endTime, COL_PROJECT_STAGE);\n      stageData.thisYearBeforePeriodTotalResult = Util.statisticThisYearBeforePeriodTotalTickets(beforePeriodTickets,\n        startTime, endTime, COL_PROJECT_STAGE);\n      stageData.lastYearBeforePeriodResult = Util.statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\n        startTime, endTime, COL_PROJECT_STAGE);\n      stageData.lastYearBeforePeriodTotalResult = Util.statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\n        yearStartTime, endTime, COL_PROJECT_STAGE);\n      stageData.thisYearTotalResult = Util.statisticThisYearTotalTickets(thisYearTotalTickets,\n        yearStartTime, endTime, COL_PROJECT_STAGE);\n      stageData.beforePeriodNeedHandleResult = Util.statisticBeforePeriodNeedHandleResult([\n        stageData.periodNewAddedResult, stageData.thisYearBeforePeriodResult,\n        stageData.lastYearBeforePeriodResult]);\n      stageData.periodTotalResult = Util.statisticPeriodTotalResult([\n        stageData.lastYearBeforePeriodTotalResult,\n        stageData.thisYearTotalResult\n      ]);\n      stageData.rateResult = {};\n      Util.statisticRate(stageData.periodNewAddedResult, NEW_ADD_CLOSE_RATE, stageData.rateResult);\n      Util.statisticRate(stageData.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, stageData.rateResult);\n      Util.statisticRate(stageData.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, stageData.rateResult);\n      Util.statisticRate(stageData.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, stageData.rateResult);\n      Util.statisticRate(stageData.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, stageData.rateResult);\n      this.setState({\n        stageData\n      });\n\n      // 统计项目\n      let projectData = {};\n      projectData.periodNewAddedResult = Util.statisticPeriodNewAddedTickets(periodTickets,\n        startTime, endTime, COL_PROJECT);\n      projectData.thisYearBeforePeriodResult = Util.statisticThisYearBeforePeriodTickets(beforePeriodTickets,\n        startTime, endTime, COL_PROJECT);\n      projectData.thisYearBeforePeriodTotalResult = Util.statisticThisYearBeforePeriodTotalTickets(beforePeriodTickets,\n        startTime, endTime, COL_PROJECT);\n      projectData.lastYearBeforePeriodResult = Util.statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\n        startTime, endTime, COL_PROJECT);\n      projectData.lastYearBeforePeriodTotalResult = Util.statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\n        yearStartTime, endTime, COL_PROJECT);\n      projectData.thisYearTotalResult = Util.statisticThisYearTotalTickets(thisYearTotalTickets,\n        yearStartTime, endTime, COL_PROJECT);\n      projectData.beforePeriodNeedHandleResult = Util.statisticBeforePeriodNeedHandleResult([\n        projectData.periodNewAddedResult, projectData.thisYearBeforePeriodResult,\n        projectData.lastYearBeforePeriodResult\n      ]);\n      projectData.periodTotalResult = Util.statisticPeriodTotalResult([\n        projectData.lastYearBeforePeriodTotalResult,\n        projectData.thisYearTotalResult\n      ]);\n      projectData.rateResult = {};\n      Util.statisticRate(projectData.periodNewAddedResult, NEW_ADD_CLOSE_RATE, projectData.rateResult);\n      Util.statisticRate(projectData.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, projectData.rateResult);\n      Util.statisticRate(projectData.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, projectData.rateResult);\n      Util.statisticRate(projectData.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, projectData.rateResult);\n      Util.statisticRate(projectData.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, projectData.rateResult);\n      this.setState({\n        projectData\n      });\n\n      // 统计城市\n      let cityData = {};\n      cityData.periodNewAddedResult = Util.statisticPeriodNewAddedTickets(periodTickets,\n        startTime, endTime, COL_CITY_COMPANY);\n      cityData.thisYearBeforePeriodResult = Util.statisticThisYearBeforePeriodTickets(beforePeriodTickets,\n        startTime, endTime, COL_CITY_COMPANY);\n      cityData.thisYearBeforePeriodTotalResult = Util.statisticThisYearBeforePeriodTotalTickets(beforePeriodTickets,\n        startTime, endTime, COL_CITY_COMPANY);\n      cityData.lastYearBeforePeriodResult = Util.statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\n        startTime, endTime, COL_CITY_COMPANY);\n      cityData.lastYearBeforePeriodTotalResult = Util.statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\n        yearStartTime, endTime, COL_CITY_COMPANY);\n      cityData.thisYearTotalResult = Util.statisticThisYearTotalTickets(thisYearTotalTickets,\n        yearStartTime, endTime, COL_CITY_COMPANY);\n      cityData.beforePeriodNeedHandleResult = Util.statisticBeforePeriodNeedHandleResult([\n        cityData.periodNewAddedResult, cityData.thisYearBeforePeriodResult,\n        cityData.lastYearBeforePeriodResult]);\n      cityData.periodTotalResult = Util.statisticPeriodTotalResult([\n        cityData.lastYearBeforePeriodTotalResult,\n        cityData.thisYearTotalResult\n      ]);\n      cityData.rateResult = {};\n      Util.statisticRate(cityData.periodNewAddedResult, NEW_ADD_CLOSE_RATE, cityData.rateResult);\n      Util.statisticRate(cityData.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, cityData.rateResult);\n      Util.statisticRate(cityData.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, cityData.rateResult);\n      Util.statisticRate(cityData.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, cityData.rateResult);\n      Util.statisticRate(cityData.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, cityData.rateResult);\n\n      this.setState({\n        cityData\n      });\n\n      // 统计大区\n      let areaData = {};\n      areaData.periodNewAddedResult = Util.statisticPeriodNewAddedTickets(periodTickets,\n        startTime, endTime, COL_AREA);\n      areaData.thisYearBeforePeriodResult = Util.statisticThisYearBeforePeriodTickets(beforePeriodTickets,\n        startTime, endTime, COL_AREA);\n      areaData.thisYearBeforePeriodTotalResult = Util.statisticThisYearBeforePeriodTotalTickets(beforePeriodTickets,\n        startTime, endTime, COL_AREA);\n      areaData.lastYearBeforePeriodResult = Util.statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\n        startTime, endTime, COL_AREA);\n      areaData.lastYearBeforePeriodTotalResult = Util.statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\n        yearStartTime, endTime, COL_AREA);\n      areaData.thisYearTotalResult = Util.statisticThisYearTotalTickets(thisYearTotalTickets,\n        yearStartTime, endTime, COL_AREA);\n      areaData.beforePeriodNeedHandleResult = Util.statisticBeforePeriodNeedHandleResult([\n        areaData.periodNewAddedResult, areaData.thisYearBeforePeriodResult,\n        areaData.lastYearBeforePeriodResult]);\n      areaData.periodTotalResult = Util.statisticPeriodTotalResult([areaData.lastYearBeforePeriodTotalResult,\n      areaData.thisYearTotalResult]);\n      areaData.rateResult = {};\n      Util.statisticRate(areaData.periodNewAddedResult, NEW_ADD_CLOSE_RATE, areaData.rateResult);\n      Util.statisticRate(areaData.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, areaData.rateResult);\n      Util.statisticRate(areaData.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, areaData.rateResult);\n      Util.statisticRate(areaData.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, areaData.rateResult);\n      Util.statisticRate(areaData.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, areaData.rateResult);\n\n      this.setState({\n        areaData\n      });\n\n      // let cityGraphData = {\n      //   // 截至统计周期受理累计\n      //   cityTotalAcceptData: [],\n      //   // 城市总体关闭率\n      //   cityOverallCloseRateData: [],\n      //   // 城市剩余未关\n      //   cityOpenData: [],\n      //   // 城市新增受理\n      //   cityNewAddedAcceptData: [],\n      //   // 城市新增关闭率\n      //   cityNewAddedCloseRateData: [],\n      //   // 各城市需处理受理\n      //   cityNeedHandleAcceptData: [],\n      //   // 各城市需处理及时关闭率\n      //   cityNeedHandleCloseOnTimeRateData: [],\n      //   // 各城市需处理总体关闭率\n      //   cityNeedHandleCloseRateData: [],\n      //   // 城市已关平均处理时长\n      //   cityCloseAverageHandleTimeData: [],\n      //   // 城市剩余未关平均处理时长\n      //   cityOpenAverageHandleTimeData: [],\n      //   // 各城市分类已关闭平均处理时长\n      //   cityCategoryCloseAverageHandleTimeData: {}\n      // };\n\n      // for (let cityName of allCities) {\n      //   cityGraphData.cityTotalAcceptData = [\n      //     ...cityGraphData.cityTotalAcceptData,\n      //     {\n      //       name: cityName,\n      //       value: cityData.periodTotalResult[cityName][KEY_TICKET_TOTAL][TICKET_ACCEPT]\n      //     }\n      //   ];\n      //   cityGraphData.cityOverallCloseRateData = [\n      //     ...cityGraphData.cityOverallCloseRateData,\n      //     {\n      //       name: cityName,\n      //       value: cityData.rateResult[cityName][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n      //     }\n      //   ];\n      //   cityGraphData.cityOpenData = [\n      //     ...cityGraphData.cityOpenData,\n      //     {\n      //       name: cityName,\n      //       value: cityData.periodTotalResult[cityName][KEY_TICKET_TOTAL][TICKET_OPEN]\n      //     }\n      //   ];\n      //   cityGraphData.cityNewAddedAcceptData = [\n      //     ...cityGraphData.cityNewAddedAcceptData, {\n      //       name: cityName,\n      //       value: cityData.periodNewAddedResult[cityName][KEY_TICKET_TOTAL][TICKET_ACCEPT]\n      //     }\n      //   ];\n      //   cityGraphData.cityNewAddedCloseRateData = [\n      //     ...cityGraphData.cityNewAddedCloseRateData, {\n      //       name: cityName,\n      //       value: cityData.rateResult[cityName][KEY_TICKET_TOTAL][NEW_ADD_CLOSE_RATE]\n      //     }\n      //   ];\n      //   cityGraphData.cityNeedHandleAcceptData = [\n      //     ...cityGraphData.cityNeedHandleAcceptData, {\n      //       name: cityName,\n      //       value: cityData.beforePeriodNeedHandleResult[cityName][KEY_TICKET_TOTAL][TICKET_ACCEPT]\n      //     }\n      //   ];\n      //   cityGraphData.cityNeedHandleCloseOnTimeRateData = [\n      //     ...cityGraphData.cityNeedHandleCloseOnTimeRateData, {\n      //       name: cityName,\n      //       value: cityData.rateResult[cityName][KEY_TICKET_TOTAL][CLOSE_ON_TIME_RATE]\n      //     }\n      //   ];\n      //   cityGraphData.cityNeedHandleCloseRateData = [\n      //     ...cityGraphData.cityNeedHandleCloseRateData, {\n      //       name: cityName,\n      //       value: cityData.rateResult[cityName][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\n      //     }\n      //   ];\n      //   cityGraphData.cityCloseAverageHandleTimeData = [\n      //     ...cityGraphData.cityCloseAverageHandleTimeData,\n      //     {\n      //       name: cityName,\n      //       value: cityData.periodNewAddedResult[cityName][KEY_TICKET_TOTAL][TICKET_CLOSE_PROCESS_TIME]\n      //     }\n      //   ];\n      //   cityGraphData.cityOpenAverageHandleTimeData = [\n      //     ...cityGraphData.cityOpenAverageHandleTimeData,\n      //     {\n      //       name: cityName,\n      //       value: cityData.beforePeriodNeedHandleResult[cityName][KEY_TICKET_TOTAL][TICKET_OPEN_PROCESS_TIME]\n      //     }\n      //   ];\n      // }\n\n      // this.setState({\n      //   cityGraphData\n      // });\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const tabChart = (\n      <ChartView\n        cityGraphData={this.state.cityGraphData}\n        allCities={this.state.allCities}\n      />\n      // <ChartView\n      //   cityTotalAcceptData={this.state.cityTotalAcceptData}\n      //   cityOverallCloseRateData={this.state.cityOverallCloseRateData}\n      //   projectTotalAcceptData={this.state.projectTotalAcceptData}\n      //   projectOverallCloseRateData={this.state.projectOverallCloseRateData}\n      //   stageTotalAcceptData={this.state.stageTotalAcceptData}\n      //   stageOverallCloseRateData={this.state.stageOverallCloseRateData}\n      //   cityOpenData={this.state.cityOpenData}\n      //   secondCategoryOpenData={this.state.secondCategoryOpenData}\n      //   cityNewAddedAcceptData={this.state.cityNewAddedAcceptData}\n      //   cityNewAddedCloseRateData={this.state.cityNewAddedCloseRateData}\n      //   secondCategoryNewAddedAcceptData={this.state.secondCategoryNewAddedAcceptData}\n      //   projectNewAddedAcceptData={this.state.projectNewAddedAcceptData}\n      //   projectNewAddedCloseRateData={this.state.projectNewAddedCloseRateData}\n      //   newAddedProjects={this.state.newAddedProjects}\n      //   stageNewAddedAcceptData={this.state.stageNewAddedAcceptData}\n      //   stageNewAddedCloseRateData={this.state.stageNewAddedCloseRateData}\n      //   newAddedStages={this.state.newAddedStages}\n      //   cityNeedHandleAcceptData={this.state.cityNeedHandleAcceptData}\n      //   cityNeedHandleCloseOnTimeRateData={this.state.cityNeedHandleCloseOnTimeRateData}\n      //   cityNeedHandleCloseRateData={this.state.cityNeedHandleCloseRateData}\n      //   projectNeedHandleAcceptData={this.state.projectNeedHandleAcceptData}\n      //   projectNeedHandleCloseRateData={this.state.projectNeedHandleCloseRateData}\n      //   projectNeedHandleCloseOnTimeRateData={this.state.projectNeedHandleCloseOnTimeRateData}\n      //   needHandleProjects={this.state.needHandleProjects}\n      //   cityCloseAverageHandleTimeData={this.state.cityCloseAverageHandleTimeData}\n      //   cityOpenAverageHandleTimeData={this.state.cityOpenAverageHandleTimeData}\n      //   citySecondCategoryCloseAverageHandleTimeData={this.state.citySecondCategoryCloseAverageHandleTimeData}\n      //   citySecondCategoryOpenAverageHandleTimeData={this.state.citySecondCategoryOpenAverageHandleTimeData}\n      //   secondCategoryOpenAverageHandleTimeData={this.state.secondCategoryOpenAverageHandleTimeData}\n      //   newAddedCities={this.state.newAddedCities}\n      //   cities={this.state.cityData.cities}\n      //   projects={this.state.projects}\n      //   stages={this.state.stages}\n      // />\n    );\n\n    const tabArea = (\n      <ProjectView\n        data={this.state.areaData}\n      />\n    );\n\n    const tabCity = (\n      <ProjectView\n        data={this.state.cityData}\n      />\n    )\n\n    const tabProject = (\n      <ProjectView\n        data={this.state.projectData}\n      />\n    );\n\n    const tabStage = (\n      <ProjectView\n        data={this.state.stageData}\n      />\n    );\n\n    return (\n      <LocaleProvider locale={zh_CN}>\n        <div>\n          <h2 className=\"text--center heading\">统计辅助工具</h2>\n          <DataForm\n            onStart={this.start}\n            onExport={this.exportExcel}\n            loading={this.state.loading}\n          />\n          <Row style={{ margin: '40px 0' }}>\n            <Col span={22} offset={1}>\n              <Tabs type=\"card\">\n                <Tabs.TabPane tab=\"统计图\" key=\"统计图\">{tabChart}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"大区\" key=\"大区\">{tabArea}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"城市\" key=\"城市\">{tabCity}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"项目\" key=\"项目\">{tabProject}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"分期\" key=\"分期\">{tabStage}</Tabs.TabPane>\n              </Tabs>\n            </Col>\n          </Row>\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  addCategories,\n  addTicketStates\n}\n\nconst ConnectedApp = connect(null, mapDispatchToProps)(App);\n\nexport default ConnectedApp;\n","import {\r\n  ADD_CATEGORY,\r\n  ADD_CATEGORIES,\r\n  ADD_TICKET_STATES\r\n} from '../action-types';\r\n\r\nexport const addCategory = category => ({\r\n  type: ADD_CATEGORY,\r\n  payload: {\r\n    category\r\n  }\r\n});\r\n\r\nexport const addCategories = categories => ({\r\n  type: ADD_CATEGORIES,\r\n  payload: {\r\n    categories\r\n  }\r\n});\r\n\r\nexport const addTicketStates = ticketStates => ({\r\n  type: ADD_TICKET_STATES,\r\n  payload: {\r\n    ticketStates\r\n  }\r\n})\r\n","export const ADD_CATEGORY = 'ADD_CATEGORY';\r\nexport const ADD_CATEGORIES = 'ADD_CATEGORIES';\r\nexport const ADD_TICKET_STATES = 'ADD_TICKET_STATES';\r\n","import { combineReducers } from 'redux';\r\nimport category from './category';\r\nimport ticketState from './ticket-state';\r\n\r\nconst reducer = combineReducers({\r\n  category,\r\n  ticketState\r\n});\r\n\r\nexport default reducer;\r\n","import {\r\n  ADD_CATEGORY,\r\n  ADD_CATEGORIES\r\n} from '../action-types';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_CATEGORY:\r\n      const { category } = action.payload;\r\n      return [\r\n        ...state,\r\n        category\r\n      ];\r\n    case ADD_CATEGORIES:\r\n      const { categories } = action.payload;\r\n      return [\r\n        ...state,\r\n        ...categories\r\n      ]\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  ADD_TICKET_STATES\r\n} from '../action-types';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_TICKET_STATES:\r\n      const { ticketStates } = action.payload;\r\n      return [\r\n        ...state,\r\n        ...ticketStates\r\n      ];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}