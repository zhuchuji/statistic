{"version":3,"sources":["components/DataForm.js","constants.js","components/CommonCharts.js","components/ChartView.js","components/ProjectTable.js","utils.js","components/ProjectView.js","functions/utils.js","App.js","store/actions/index.js","store/action-types.js","store/reducers/index.js","store/reducers/category.js","store/reducers/ticket-state.js","store/index.js","index.js"],"names":["DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startTime","Date","set","hour","minute","second","endTime","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","es_col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","toConsumableArray","concat","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","React","Component","defaultPorps","onExport","WrapDataForm","create","KEY_REPORT_TIME","KEY_PROJECT_NAME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","NEW_ADD_CLOSE_RATE","REMAIN_CLOSE_RATE","OVERALL_CLOSE_RATE","CLOSE_ON_TIME_RATE","TOTAL_OVERALL_CLOSE_RATE","RATE_STATISTIC_ITEMS","COL_AREA","COL_CITY_COMPANY","COL_PROJECT","COL_PROJECT_STAGE","COL_CURRENT_STATUS","COL_REPORT_TIME","TICKET_STATUS","CATEGORIES","STATISTIC_ITEMS","titleConfig","left","top","textStyle","color","toolboxConfig","feature","saveAsImage","show","right","legendConfig","styles","margin","height","tooltipConifg","trigger","axisPointer","crossStyle","CommonCharts","core_default","style","echarts","option","title","objectSpread","text","title1","tooltip","toolbox","xAxis","data","interval","axisLabel","rotate","yAxis","name","min","max","series","barMaxWidth","position","formatter","graphData","totalAcceptData","yAxisIndex","overallCloseRateData","title2","newAddedAcceptData","newAddedCloseRateData","title5","radius","openData","title3","legend","needHandleAcceptData","needHandleCloseOnTimeRateData","needHandleCloseRateData","title4","closeAverageHandleTimeData","openAverageHandleTimeData","ChartView","cityCategoryCloseAverageHandleTimeSeries","newAddedCities","cityName","cityGraphData","cityCategoryCloseAverageHandleTimeData","citySecondCategoryOpenAverageHandleTimeSeries","openAverageHandleTimeCities","citySecondCategoryOpenAverageHandleTimeData","components_CommonCharts","areaGraphData","allAreas","categoryGraphData","allCategories","allCities","projectGraphData","allProjects","stageGraphData","allStages","ProjectTable","projectColumn","table","Column","dataIndex","key","width","otherColumns","map","item","currentPageData","dataSource","filteredProjects","length","filter","pagination","pageSize","scroll","y","size","defaultProps","formatToTable","tableData","rowKey","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","undefined","_step2","_iterator2","Symbol","iterator","next","done","statisticItem","rowData","_arr","_i","category","push","return","formatToRateTable","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_arr2","_i2","ProjectView","filterProjects","projects","projectName","es_select","mode","onChange","project","Option","components_ProjectTable","periodNewAddedResult","thisYearBeforePeriodResult","thisYearBeforePeriodTotalResult","thisYearTotalResult","lastYearBeforePeriodResult","lastYearBeforePeriodTotalResult","beforePeriodNeedHandleResult","periodTotalResult","rateResult","initStatisticItem","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","itemName","initRate","getCategory","ticket","statisticRate","statisticMap","rateMap","toFixed","statistc","periodTickets","beforePeriodTickets","thisYearTotalTickets","lastYearBeforePeriodTickets","col","allItems","yearStartTime","moment","month","date","tickets","closeStartTime","closeEndTime","dataMap","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","ticketCategory","ticketStatistic","ticketStatus","ticketReportTime","ticketPauseDuration","Number","ticketCloseTime","duration","diff","subtract","as","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","ticketCloseCount","ticketCloseProcessTime","ticketOpenProcessTime","ticketOpenCount","statisticPeriodNewAddedTickets","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","statisticThisYearBeforePeriodTickets","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","statisticThisYearBeforePeriodTotalTickets","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","statisticLastYearBeforePeriodTickets","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","statisticLastYearBeforePeriodTotalTickets","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","_iteratorNormalCompletion26","_didIteratorError26","_iteratorError26","_step26","_iterator26","_iteratorNormalCompletion27","_didIteratorError27","_iteratorError27","_step27","_iterator27","statisticThisYearTotalTickets","array","_iteratorNormalCompletion28","_didIteratorError28","_iteratorError28","_step28","_iterator28","_iteratorNormalCompletion29","_didIteratorError29","_iteratorError29","_step29","_iterator29","result","_iteratorNormalCompletion30","_didIteratorError30","_iteratorError30","_step30","_iterator30","statisticBeforePeriodNeedHandleResult","_iteratorNormalCompletion31","_didIteratorError31","_iteratorError31","_step31","_iterator31","_iteratorNormalCompletion32","_didIteratorError32","_iteratorError32","_step32","_iterator32","_iteratorNormalCompletion33","_didIteratorError33","_iteratorError33","_step33","_iterator33","statisticPeriodTotalResult","_iteratorNormalCompletion34","_didIteratorError34","_iteratorError34","_step34","_iterator34","formatGraphData","_iteratorNormalCompletion35","_didIteratorError35","_iteratorError35","_step35","_iterator35","formatCategoryGraphData","area","_iteratorNormalCompletion36","_didIteratorError36","_iteratorError36","_step36","_iterator36","allCategory","allTicketState","App","start","_this$props","addCategories","addTicketStates","fileReader","FileReader","readFile","onload","event","workbook","XLSX","read","target","sheet","Sheets","SheetNames","utils","sheet_to_json","blankrows","readAsBinaryString","readExcelData","Util","stage","city","reportTime","stageData","projectData","cityData","areaData","tabChart","components_ChartView","tabArea","components_ProjectView","tabCity","tabProject","tabStage","locale_provider","locale","zh_CN","className","components_DataForm","exportExcel","tabs","TabPane","tab","mapDispatchToProps","categories","payload","ticketStates","ConnectedApp","connect","reducer","combineReducers","arguments","action","ticketState","store","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.6e11fec1.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {},\n    onExport: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func,\n    onExport: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startTime = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endTime = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startTime, endTime);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              {\n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在统计...': '开始统计'\n              }\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '未关时长（天）';\r\nexport const TICKET_NOT_RESPONSED = '未响应';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\nexport const KEY_CITY_NAME = '城市';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const NEW_ADD_CLOSE_RATE = '新增关闭率';\r\nexport const REMAIN_CLOSE_RATE = '遗留关闭率';\r\nexport const OVERALL_CLOSE_RATE = '总体关闭率';\r\nexport const RESPONSE_IN_30_MIN_RATE = '响应及时率（0.5h）'\r\nexport const RESPONSE_IN_30_HOUR_RATE = '响应及时率（30h）';\r\nexport const CLOSE_ON_TIME_RATE = '及时关闭率';\r\nexport const TOTAL_OVERALL_CLOSE_RATE = '累计总体关闭率';\r\n\r\nexport const RATE_STATISTIC_ITEMS = [\r\n  REMAIN_CLOSE_RATE,\r\n  NEW_ADD_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_RATE = '本年度统计周期内';\r\n\r\nexport const STAGES = [\r\n  '一期',\r\n  '二期',\r\n  '三期',\r\n  '四期',\r\n  '五期',\r\n  '六期',\r\n  '七期',\r\n  '八期',\r\n  '九期',\r\n  '十期'\r\n];\r\n\r\n\r\n// new data key\r\nexport const COL_AREA = '大区';\r\nexport const COL_CITY_COMPANY = '城市公司';\r\nexport const COL_PROJECT = '项目';\r\nexport const COL_PROJECT_STAGE = '项目分期';\r\nexport const COL_CURRENT_STATUS = '当前工单状态';\r\nexport const COL_FIRST_CLASS = '一级报事分类';\r\nexport const COL_REPORT_TIME = '报事时间';\r\nexport const COL_RESPONSE_TIME = '响应时间';\r\nexport const COL_FINISH_TIME = '实际完成时间';\r\nexport const COL_TOTAL_HANDLE_TIME = '工单总处理时长(天）';\r\nexport const COL_EXPIRE = '总时长超时预警';\r\nexport const COL_CLOSE_TIME_1 = '业主关闭时间';\r\nexport const COL_CLOSE_TIME_2 = '非正常关闭时间';\r\nexport const COL_CLOSE_TIME_3 = '强制关闭时间';\r\nexport const COL_PAUSE = '累计暂停时长';\r\nexport const COL_OVERTIME_WARN = '总时长超时预警';\r\n\r\nexport const CATEGORY_UNCLASSIFY = '未分类';\r\n\r\nexport const TICKET_STATUS = {\r\n  RESPONSED: '已响应',\r\n  SOLUTION_PREPARE: '方案制定中',\r\n  SOLUTION_APPROVE: '方案已批准',\r\n  INVALID: '无效',\r\n  CLOSED: '已关闭',\r\n  FORCE_CLOSE: '强制关闭',\r\n  CLOSE_ABNORMAL: '非正常关闭',\r\n  DISPATCHED: '已分派',\r\n  WORK_DOING: '施工中',\r\n  WORK_FINISHED: '施工完成',\r\n  DROP_IN: '已上门',\r\n  COMMENTED: '已评价',\r\n  NEW: '新建'\r\n};\r\n\r\nexport const CATEGORIES = [\r\n  '土建',\r\n  '维修-其他类',\r\n  '机电',\r\n  '室内精装',\r\n  '室内门窗及入户门',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '渗漏',\r\n  '室内电器',\r\n  '公区部分',\r\n  CATEGORY_UNCLASSIFY\r\n];\r\n\r\n// statistic items\r\nexport const STATISTIC_ITEMS = [\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_NOT_RESPONSED,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n]\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\n// import the core library.\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\n\r\n// then import echarts modules those you have used manually.\r\nimport echarts from 'echarts/lib/echarts';\r\nimport 'echarts/lib/chart/line';\r\nimport 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/chart/pie';\r\n// import 'echarts/lib/chart/scatter';\r\n// import 'echarts/lib/chart/radar';\r\n\r\n// import 'echarts/lib/chart/map';\r\n// import 'echarts/lib/chart/treemap';\r\n// import 'echarts/lib/chart/graph';\r\n// import 'echarts/lib/chart/gauge';\r\n// import 'echarts/lib/chart/funnel';\r\n// import 'echarts/lib/chart/parallel';\r\n// import 'echarts/lib/chart/sankey';\r\n// import 'echarts/lib/chart/boxplot';\r\n// import 'echarts/lib/chart/candlestick';\r\n// import 'echarts/lib/chart/effectScatter';\r\n// import 'echarts/lib/chart/lines';\r\n// import 'echarts/lib/chart/heatmap';\r\n\r\n// import 'echarts/lib/component/graphic';\r\n// import 'echarts/lib/component/grid';\r\nimport 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/tooltip';\r\n// import 'echarts/lib/component/polar';\r\n// import 'echarts/lib/component/geo';\r\n// import 'echarts/lib/component/parallel';\r\n// import 'echarts/lib/component/singleAxis';\r\n// import 'echarts/lib/component/brush';\r\n\r\nimport 'echarts/lib/component/title';\r\n\r\n// import 'echarts/lib/component/dataZoom';\r\n// import 'echarts/lib/component/visualMap';\r\n\r\n// import 'echarts/lib/component/markPoint';\r\n// import 'echarts/lib/component/markLine';\r\n// import 'echarts/lib/component/markArea';\r\n\r\n// import 'echarts/lib/component/timeline';\r\nimport 'echarts/lib/component/toolbox';\r\n// import { Rect } from 'echarts/lib/util/graphic';\r\n\r\n// import 'zrender/lib/vml/vml';\r\n\r\nconst titleConfig = {\r\n  left: 'center',\r\n  top: 0,\r\n  textStyle: {\r\n    color: '#000000'\r\n  }\r\n};\r\nconst toolboxConfig = {\r\n  feature: {\r\n    saveAsImage: { show: true }\r\n  },\r\n  right: 40\r\n};\r\nconst legendConfig = {\r\n  left: 40\r\n};\r\nconst styles = {\r\n  margin: '40px 0',\r\n  height: '500px'\r\n};\r\nconst tooltipConifg = {\r\n  trigger: 'axis',\r\n  axisPointer: {\r\n    type: 'cross',\r\n    crossStyle: {\r\n      color: '#999'\r\n    }\r\n  }\r\n};\r\n\r\n\r\nfunction CommonCharts(props) {\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title1,\r\n              ...titleConfig\r\n            },\r\n            tooltip: tooltipConifg,\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.xAxis,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '累计受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '累计受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.totalAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.overallCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title2,\r\n              ...titleConfig\r\n            },\r\n            tooltip: tooltipConifg,\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.xAxis,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '新增受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.newAddedAcceptData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.newAddedCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title5,\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '剩余未关',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.graphData.openData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title3,\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                  color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: toolboxConfig,\r\n            legend: {\r\n              data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n              ...legendConfig\r\n            },\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.xAxis,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '需处理受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '比率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '需处理受理',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#000',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.needHandleAcceptData\r\n              },\r\n              {\r\n                name: '及时关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.needHandleCloseOnTimeRateData\r\n              },\r\n              {\r\n                name: '总体关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                label: {\r\n                  show: true,\r\n                  color: '#000',\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.needHandleCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n\r\n      <Row style={{ margin: '40px 0' }}>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: props.title.title4,\r\n              ...titleConfig\r\n            },\r\n            tooltip: tooltipConifg,\r\n            toolbox: toolboxConfig,\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.xAxis,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                },\r\n                interval: 0,\r\n                axisLabel: {\r\n                  rotate: 45\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            legend: {\r\n              data: ['已关闭', '剩余未关'],\r\n              ...legendConfig\r\n            },\r\n            series: [\r\n              {\r\n                name: '已关闭',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.closeAverageHandleTimeData\r\n              },\r\n              {\r\n                name: '剩余未关',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                label: {\r\n                  position: 'top',\r\n                  color: '#333',\r\n                  show: true,\r\n                  formatter: '{c}'\r\n                },\r\n                data: props.graphData.openAverageHandleTimeData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommonCharts;\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\n// import the core library.\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\n\r\n// then import echarts modules those you have used manually.\r\nimport echarts from 'echarts/lib/echarts';\r\nimport 'echarts/lib/chart/line';\r\nimport 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/chart/pie';\r\n// import 'echarts/lib/chart/scatter';\r\n// import 'echarts/lib/chart/radar';\r\n\r\n// import 'echarts/lib/chart/map';\r\n// import 'echarts/lib/chart/treemap';\r\n// import 'echarts/lib/chart/graph';\r\n// import 'echarts/lib/chart/gauge';\r\n// import 'echarts/lib/chart/funnel';\r\n// import 'echarts/lib/chart/parallel';\r\n// import 'echarts/lib/chart/sankey';\r\n// import 'echarts/lib/chart/boxplot';\r\n// import 'echarts/lib/chart/candlestick';\r\n// import 'echarts/lib/chart/effectScatter';\r\n// import 'echarts/lib/chart/lines';\r\n// import 'echarts/lib/chart/heatmap';\r\n\r\n// import 'echarts/lib/component/graphic';\r\n// import 'echarts/lib/component/grid';\r\nimport 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/tooltip';\r\n// import 'echarts/lib/component/polar';\r\n// import 'echarts/lib/component/geo';\r\n// import 'echarts/lib/component/parallel';\r\n// import 'echarts/lib/component/singleAxis';\r\n// import 'echarts/lib/component/brush';\r\n\r\nimport 'echarts/lib/component/title';\r\n\r\n// import 'echarts/lib/component/dataZoom';\r\n// import 'echarts/lib/component/visualMap';\r\n\r\n// import 'echarts/lib/component/markPoint';\r\n// import 'echarts/lib/component/markLine';\r\n// import 'echarts/lib/component/markArea';\r\n\r\n// import 'echarts/lib/component/timeline';\r\nimport 'echarts/lib/component/toolbox';\r\n// import { Rect } from 'echarts/lib/util/graphic';\r\n\r\n// import 'zrender/lib/vml/vml';\r\n\r\nimport  { CATEGORIES } from '../constants';\r\n\r\nimport Charts from './CommonCharts';\r\n\r\nconst titleConfig = {\r\n  left: 'center',\r\n  top: 0,\r\n  textStyle: {\r\n    color: '#000000'\r\n  }\r\n};\r\nconst toolboxConfig = {\r\n  feature: {\r\n    saveAsImage: { show: true }\r\n  },\r\n  right: 40\r\n};\r\nconst legendConfig = {\r\n  left: 40\r\n};\r\nconst styles = {\r\n  margin: '40px 0',\r\n  height: '500px'\r\n};\r\nconst tooltipConifg = {\r\n  trigger: 'axis',\r\n  axisPointer: {\r\n    type: 'cross',\r\n    crossStyle: {\r\n      color: '#999'\r\n    }\r\n  }\r\n};\r\n\r\nfunction ChartView(props) {\r\n\r\n  let cityCategoryCloseAverageHandleTimeSeries = [];\r\n  let newAddedCities = [];\r\n  for (let cityName in props.cityGraphData.cityCategoryCloseAverageHandleTimeData) {\r\n    newAddedCities = [\r\n      ...newAddedCities, cityName\r\n    ];\r\n    cityCategoryCloseAverageHandleTimeSeries = [\r\n      ...cityCategoryCloseAverageHandleTimeSeries,\r\n      {\r\n        name: cityName,\r\n        type: 'bar',\r\n        barMaxWidth: 20,\r\n        label: {\r\n          position: 'top',\r\n          color: '#333',\r\n          show: true,\r\n          formatter: '{c}'\r\n        },\r\n        data: props.cityGraphData.cityCategoryCloseAverageHandleTimeData[cityName]\r\n      }\r\n    ];\r\n  }\r\n\r\n  let citySecondCategoryOpenAverageHandleTimeSeries = [];\r\n  let openAverageHandleTimeCities = [];\r\n  for (let cityName in props.citySecondCategoryOpenAverageHandleTimeData) {\r\n    openAverageHandleTimeCities = [\r\n      ...openAverageHandleTimeCities, cityName\r\n    ];\r\n    citySecondCategoryOpenAverageHandleTimeSeries = [\r\n      ...citySecondCategoryOpenAverageHandleTimeSeries,\r\n      {\r\n        name: cityName,\r\n        type: 'bar',\r\n        barMaxWidth: 20,\r\n        label: {\r\n          position: 'top',\r\n          color: '#333',\r\n          show: true,\r\n          formatter: '{c}'\r\n        },\r\n        data: props.citySecondCategoryOpenAverageHandleTimeData[cityName]\r\n      }\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Charts graphData={props.areaGraphData} xAxis={props.allAreas}\r\n        title= {{\r\n          title1: \"大区日常维修总体关闭率\",\r\n          title2: \"大区新增维修关闭率\",\r\n          title3: \"大区需处理关闭率\",\r\n          title4: \"大区新增平均处理时长\",\r\n          title5: \"大区剩余未关分布图\",\r\n        }}\r\n        />\r\n      <Charts graphData={props.categoryGraphData} xAxis={props.allCategories}\r\n        title= {{\r\n          title1: \"分类日常维修总体关闭率\",\r\n          title2: \"分类新增维修关闭率\",\r\n          title3: \"分类需处理关闭率\",\r\n          title4: \"分类新增平均处理时长\",\r\n          title5: \"分类剩余未关分布图\",\r\n        }}\r\n      />\r\n      <Charts graphData={props.cityGraphData} xAxis={props.allCities}\r\n        title={{\r\n          title1: \"各城市日常维修总体关闭率\",\r\n          title2: \"各城市新增维修关闭率\",\r\n          title3: \"各城市需处理关闭率\",\r\n          title4: \"各城市新增平均处理时长\",\r\n          title5: \"各城市剩余未关分布图\",\r\n        }}\r\n      />\r\n      <Charts graphData={props.projectGraphData} xAxis={props.allProjects}\r\n        title={{\r\n          title1: \"各项目日常维修总体关闭率\",\r\n          title2: \"各项目新增维修关闭率\",\r\n          title3: \"各项目需处理关闭率\",\r\n          title4: \"各项目新增平均处理时长\",\r\n          title5: \"各项目剩余未关分布图\",\r\n        }}\r\n      />\r\n      <Charts graphData={props.stageGraphData} xAxis={props.allStages}\r\n        title= {{\r\n          title1: \"各项目分期日常维修总体关闭率\",\r\n          title2: \"各项目分期新增维修关闭率\",\r\n          title3: \"各项目分期需处理关闭率\",\r\n          title4: \"各项目分期新增平均处理时长\",\r\n          title5: \"各项目分期剩余未关分布图\",\r\n        }}\r\n        />\r\n      {/* <Row>\r\n        <ReactEchartsCore\r\n          style={styles}\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关分类图',\r\n              ...titleConfig\r\n            },\r\n            tooltip: {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            toolbox: toolboxConfig,\r\n            series: [\r\n              {\r\n                name: '一级分类',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)',\r\n                  color: '#000'\r\n                },\r\n                data: props.categoryOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Row> */}\r\n    </div>\r\n  );\r\n\r\n  // return (\r\n  //   <div>\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各城市日常维修总体关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.allCities,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '累计受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '累计受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#333',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityGraphData.totalAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityGraphData.overallCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各项目日常维修总体关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.allProjects,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '累计受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '累计受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectGraphData.totalAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectGraphData.overallCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各项目分期日常维修总体关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.allStages,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 height: 300,\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '累计受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '累计受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.stageGraphData.totalAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.stageGraphData.overallCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '剩余未关城市分布图',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'item',\r\n  //             formatter: '{b}:{c}({d}%)'\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           series: [\r\n  //             {\r\n  //               name: '城市剩余未关',\r\n  //               type: 'pie',\r\n  //               radius: '60%',\r\n  //               label: {\r\n  //                 formatter: '{b}:{c}({d}%)',\r\n  //                 color: '#000'\r\n  //               },\r\n  //               data: props.cityOpenData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n\r\n  //     <Row>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '剩余未关二级分类分布图',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'item',\r\n  //             formatter: '{b}:{c}({d}%)'\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           series: [\r\n  //             {\r\n  //               name: '二级分类',\r\n  //               type: 'pie',\r\n  //               radius: '60%',\r\n  //               label: {\r\n  //                 formatter: '{b}:{c}({d}%)',\r\n  //                 color: '#000'\r\n  //               },\r\n  //               data: props.secondCategoryOpenData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各城市新增维修关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.cities,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '新增受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '新增受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNewAddedAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNewAddedCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '项目新增关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.newAddedProjects,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '新增受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '新增受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNewAddedAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNewAddedCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '分期新增关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.newAddedStages,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '新增受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '关闭率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '新增受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.stageNewAddedAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.stageNewAddedCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '新增维修城市分布图',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'item',\r\n  //             formatter: '{b}:{c}({d}%)'\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           series: [\r\n  //             {\r\n  //               name: '城市',\r\n  //               type: 'pie',\r\n  //               radius: '60%',\r\n  //               label: {\r\n  //                 formatter: '{b}:{c}({d}%)',\r\n  //                 color: '#000'\r\n  //               },\r\n  //               data: props.cityNewAddedAcceptData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '新增维修二级分类分布图',\r\n  //             left: 'center',\r\n  //             textStyle: {\r\n  //               color: '#000000'\r\n  //             }\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'item',\r\n  //             formatter: '{b}:{c}({d}%)'\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           series: [\r\n  //             {\r\n  //               name: '城市',\r\n  //               type: 'pie',\r\n  //               radius: '60%',\r\n  //               label: {\r\n  //                 formatter: '{b}:{c}({d}%)',\r\n  //                 color: '#000'\r\n  //               },\r\n  //               data: props.secondCategoryNewAddedAcceptData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各城市需处理关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           legend: {\r\n  //             data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n  //             ...legendConfig\r\n  //           },\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.cities,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '需处理受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '比率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '需处理受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNeedHandleAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '及时关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNeedHandleCloseOnTimeRateData\r\n  //             },\r\n  //             {\r\n  //               name: '总体关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityNeedHandleCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '各项目需处理关闭率',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           legend: {\r\n  //             data: ['需处理受理', '及时关闭率', '总体关闭率'],\r\n  //             ...legendConfig\r\n  //           },\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.needHandleProjects,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '需处理受理'\r\n  //             },\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '比率',\r\n  //               min: 0,\r\n  //               max: 1\r\n  //             }\r\n  //           ],\r\n  //           series: [\r\n  //             {\r\n  //               name: '需处理受理',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#000',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNeedHandleAcceptData\r\n  //             },\r\n  //             {\r\n  //               name: '及时关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNeedHandleCloseOnTimeRateData\r\n  //             },\r\n  //             {\r\n  //               name: '总体关闭率',\r\n  //               type: 'line',\r\n  //               yAxisIndex: 1,\r\n  //               label: {\r\n  //                 show: true,\r\n  //                 color: '#000',\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.projectNeedHandleCloseRateData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '平均处理时长城市分布图',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: props.cities,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '处理时长（天）'\r\n  //             },\r\n  //           ],\r\n  //           legend: {\r\n  //             data: ['已关闭', '剩余未关'],\r\n  //             ...legendConfig\r\n  //           },\r\n  //           series: [\r\n  //             {\r\n  //               name: '已关闭',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#333',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityCloseAverageHandleTimeData\r\n  //             },\r\n  //             {\r\n  //               name: '剩余未关',\r\n  //               type: 'bar',\r\n  //               barMaxWidth: 20,\r\n  //               label: {\r\n  //                 position: 'top',\r\n  //                 color: '#333',\r\n  //                 show: true,\r\n  //                 formatter: '{c}'\r\n  //               },\r\n  //               data: props.cityOpenAverageHandleTimeData\r\n  //             }\r\n  //           ]\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '已关闭维修分类平均处理时长',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: DEFAULT_SECOND_CATEGORIES,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '处理时长（天）'\r\n  //             },\r\n  //           ],\r\n  //           legend: {\r\n  //             data: newAddedCities,\r\n  //             ...legendConfig\r\n  //           },\r\n  //           series: cityCategoryCloseAverageHandleTimeSeries\r\n  //         }}\r\n  //       />\r\n  //     </Row>\r\n  //     <Row style={{margin: '40px 0'}}>\r\n  //       <ReactEchartsCore\r\n  //         style={styles}\r\n  //         echarts={echarts}\r\n  //         option={{\r\n  //           title: {\r\n  //             text: '剩余未关维修分类平均处理时长',\r\n  //             ...titleConfig\r\n  //           },\r\n  //           tooltip: {\r\n  //             trigger: 'axis',\r\n  //             axisPointer: {\r\n  //               type: 'cross',\r\n  //               crossStyle: {\r\n  //                 color: '#999'\r\n  //               }\r\n  //             }\r\n  //           },\r\n  //           toolbox: toolboxConfig,\r\n  //           xAxis: [\r\n  //             {\r\n  //               type: 'category',\r\n  //               data: DEFAULT_SECOND_CATEGORIES,\r\n  //               axisPointer: {\r\n  //                 type: 'shadow'\r\n  //               },\r\n  //               interval: 0,\r\n  //               axisLabel: {\r\n  //                 rotate: 45\r\n  //               }\r\n  //             },\r\n  //           ],\r\n  //           yAxis: [\r\n  //             {\r\n  //               type: 'value',\r\n  //               name: '处理时长（天）'\r\n  //             },\r\n  //           ],\r\n  //           legend: {\r\n  //             data: openAverageHandleTimeCities,\r\n  //             ...legendConfig\r\n  //           },\r\n  //           series: citySecondCategoryOpenAverageHandleTimeSeries\r\n  //         }}\r\n  //       />\r\n  //     </Row> */}\r\n  //   </div>\r\n  // );\r\n}\r\n\r\nexport default ChartView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ProjectTable(props) {\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title={KEY_PROJECT_NAME}\r\n      key={KEY_PROJECT_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredProjects.length > 0 ?\r\n        props.data.filter(item => props.filteredProjects.indexOf(item[KEY_PROJECT_NAME]) !== -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nProjectTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ProjectTable;\r\n","import {\r\n  DEFAULT_STATISTIC_ITEMS,\r\n  KEY_TICKET_TOTAL,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  STAGES,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  STATISTIC_ITEMS,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  CATEGORIES,\r\n  RATE_STATISTIC_ITEMS\r\n} from './constants';\r\n\r\nimport XLSX from 'xlsx';\r\n\r\nexport function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|（.*?）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}\r\n\r\nexport function filterProject(projectName, reg) {\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function filterProjectStage(projectName) {\r\n  let filteredName = null;\r\n  for (let stage of STAGES) {\r\n    if (projectName.indexOf(stage) != -1) {\r\n      filteredName = projectName.substring(0, projectName.indexOf(stage));\r\n      return filteredName;\r\n    }\r\n  }\r\n  return projectName;\r\n}\r\n\r\nexport function formatToTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToRateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of RATE_STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of STATISTIC_ITEMS) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[category] = data[category][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[secondCategory] = data[secondCategory][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function readExcelData (fileList) {\r\n  return new Promise((resolve, reject) => {\r\n    let fileReader = new FileReader();\r\n    let data = [];\r\n\r\n    let readFile = (index) => {\r\n      if (index < fileList.length) {\r\n        fileReader.onload = (event) => {\r\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\r\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\r\n          data = [...data, ...XLSX.utils.sheet_to_json(sheet, { blankrows: false })];\r\n          readFile(index + 1);\r\n        }\r\n        fileReader.readAsBinaryString(fileList[index]);\r\n      } else {\r\n        resolve(data);\r\n      }\r\n    };\r\n    readFile(0);\r\n  });\r\n}\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport ProjectTable from './ProjectTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\nimport {\r\n  formatToTable,\r\n  formatToRateTable\r\n} from '../utils';\r\n\r\nclass ProjectView extends React.Component {\r\n  static defaultProps = {\r\n    data: {}\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredProjects: []\r\n    }\r\n  }\r\n\r\n  filterProjects = (projects) => {\r\n    if (projects.length > 0) {\r\n      this.setState({\r\n        filteredProjects: projects\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredProjects: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let projects = [];\r\n    for (let item in this.props.data) {\r\n      for (let projectName in this.props.data[item]) {\r\n        if (projects.indexOf(projectName) === -1) {\r\n          projects = [...projects, projectName];\r\n        }\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的项目'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterProjects}\r\n                >\r\n                  {\r\n                    projects.map((project) => (\r\n                      <Select.Option key={project}>{project}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={formatToTable(this.props.data.periodNewAddedResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.thisYearBeforePeriodResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearBeforePeriodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={formatToTable(this.props.data.thisYearTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.props.data.lastYearBeforePeriodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={formatToTable(this.props.data.beforePeriodNeedHandleResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={formatToTable(this.props.data.periodTotalResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={formatToRateTable(this.props.data.rateResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectView;\r\n","import {\r\n  COL_REPORT_TIME,\r\n  COL_OVERTIME_WARN,\r\n  COL_PROJECT_STAGE,\r\n  COL_FIRST_CLASS,\r\n  COL_CURRENT_STATUS,\r\n  COL_PAUSE,\r\n  COL_CLOSE_TIME_1,\r\n  COL_CLOSE_TIME_2,\r\n  COL_CLOSE_TIME_3,\r\n  TICKET_NOT_RESPONSED,\r\n  KEY_TICKET_TOTAL,\r\n  TICKET_STATUS,\r\n  CATEGORIES,\r\n  STATISTIC_ITEMS,\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  CATEGORY_UNCLASSIFY,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  RATE_STATISTIC_ITEMS\r\n} from '../constants';\r\n\r\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\r\nimport moment from 'moment';\r\n\r\nexport const initStatisticItem = () => {\r\n  let map = {};\r\n  for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n    map[category] = {};\r\n    for (let itemName of STATISTIC_ITEMS) {\r\n      map[category][itemName] = 0;\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\nexport const initRate = () => {\r\n  let map = {};\r\n  for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n    map[category] = {};\r\n    for (let itemName of RATE_STATISTIC_ITEMS) {\r\n      map[category][itemName] = 0;\r\n    }\r\n  }\r\n  return map;\r\n}\r\n\r\nexport const getCategory = ticket => ticket[COL_FIRST_CLASS] || CATEGORY_UNCLASSIFY;\r\n\r\nexport const formatStageToTable = (data) => {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let name in data) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = name;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let category of [...CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[category] = data[name][category][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nconst STAGE = /\\d*期/;\r\n\r\nexport function filterProjectName(name) {\r\n  let filteredName = name;\r\n  if (name.match(STAGE)) {\r\n    filteredName = name.substring(0, name.match(STAGE).index);\r\n  }\r\n  return filteredName;\r\n}\r\n\r\n// 统计周期内新增\r\nexport const statisticPeriodNewAddedTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 关闭 + 剩余未关\r\n    if (ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.COMMENTED ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) || ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(closeEndTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期前遗留\r\nexport const statisticThisYearBeforePeriodTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) || ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(closeEndTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期前遗留累计\r\nexport const statisticThisYearBeforePeriodTotalTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW ||\r\n      ticketStatus === TICKET_STATUS.CLOSED ||\r\n      ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n  }\r\n\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  return dataMap;\r\n}\r\n\r\n// 上年度统计周期前遗留\r\nexport const statisticLastYearBeforePeriodTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(closeEndTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 上年度统计周期前遗留累计\r\nexport const statisticLastYearBeforePeriodTotalTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(closeEndTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 本年度统计周期累计\r\nexport const statisticThisYearTotalTickets = (tickets, closeStartTime, closeEndTime, col, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let ticket of tickets) {\r\n    let name = ticket[col];\r\n    if (dataMap[name] == null) {\r\n      dataMap[name] = initStatisticItem();\r\n    }\r\n    let ticketCategory = getCategory(ticket);\r\n    let ticketStatistic = dataMap[name][ticketCategory];\r\n    let ticketStatus = ticket[COL_CURRENT_STATUS];\r\n    let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\r\n    let ticketPauseDuration = Number(ticket[COL_PAUSE]);\r\n    let ticketCloseTime = moment(ticket[COL_CLOSE_TIME_1] || ticket[COL_CLOSE_TIME_2] ||\r\n      ticket[COL_CLOSE_TIME_3]);\r\n\r\n    // 受理 = 已响应+方案制定中+已关闭+施工完成+已上门+强制关闭+方案已批准+已评价+施工中+非正常关闭+已分派+新建\r\n    // （关单时间在统计开始日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED ||\r\n      ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE ||\r\n      ticketStatus === TICKET_STATUS.WORK_DOING ||\r\n      ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED ||\r\n        ticketStatus === TICKET_STATUS.FORCE_CLOSE || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED) && ticketCloseTime >= closeStartTime)) {\r\n      ticketStatistic[TICKET_ACCEPT]++;\r\n    }\r\n\r\n    // 关闭 = 已关闭+强制关闭+已评价+非正常关闭（关单时间在统计周期内）\r\n    if ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n      ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n      ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime) {\r\n      ticketStatistic[TICKET_CLOSE]++;\r\n\r\n      // 及时关闭 = 关闭，查看总时长超时预警，无字段为及时关闭\r\n      if (ticket[COL_OVERTIME_WARN] == null) {\r\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\r\n      }\r\n\r\n      // 已关时长 = 关闭，有关闭时间（业主关闭时间+非正常关闭时间+强制关闭时间），用关闭时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] = ticketStatistic[TICKET_CLOSE_PROCESS_TIME] +\r\n        moment.duration(ticketCloseTime.diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 剩余未关 = 已响应+方案制定中+施工完成+已上门+方案已批准+施工中+已分派+新建\r\n    //    + 已关闭+强制关闭+已评价+非正常关闭（关单时间统计结束日期后）\r\n    if ((ticketStatus === TICKET_STATUS.RESPONSED || ticketStatus === TICKET_STATUS.SOLUTION_PREPARE ||\r\n      ticketStatus === TICKET_STATUS.WORK_FINISHED || ticketStatus === TICKET_STATUS.DROP_IN ||\r\n      ticketStatus === TICKET_STATUS.SOLUTION_APPROVE || ticketStatus === TICKET_STATUS.DISPATCHED ||\r\n      ticketStatus === TICKET_STATUS.NEW) ||\r\n      ((ticketStatus === TICKET_STATUS.CLOSED || ticketStatus === TICKET_STATUS.FORCE_CLOSE ||\r\n        ticketStatus === TICKET_STATUS.COMMENTED || ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL) &&\r\n        ticketCloseTime > closeEndTime)) {\r\n      ticketStatistic[TICKET_OPEN]++;\r\n\r\n      // 未关时长 = 剩余未关，用统计结束时间-受理时间-累计暂停时长\r\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] = ticketStatistic[TICKET_OPEN_PROCESS_TIME] +\r\n        moment.duration(moment(closeEndTime).diff(ticketReportTime)).subtract(ticketPauseDuration, 'days').as('days');\r\n    }\r\n\r\n    // 暂停处理 = 累计暂停时长（只能统计是否有过暂停处理，有字段为1次，依次叠加，即只统计次数）\r\n    if (ticketPauseDuration > 0) {\r\n      ticketStatistic[TICKET_PAUSE]++;\r\n    }\r\n\r\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSED &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\r\n    }\r\n\r\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\r\n    if (ticketStatus === TICKET_STATUS.CLOSE_ABNORMAL &&\r\n      (ticketCloseTime >= closeStartTime && ticketCloseTime <= closeEndTime)) {\r\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\r\n    }\r\n\r\n    // 未响应 = 已分派+新建\r\n    if (ticketStatus === TICKET_STATUS.DISPATCHED || ticketStatus === TICKET_STATUS.NEW) {\r\n      ticketStatistic[TICKET_NOT_RESPONSED]++;\r\n    }\r\n\r\n    // 无效 = 无效\r\n    if (ticketStatus === TICKET_STATUS.INVALID) {\r\n      ticketStatistic[TICKET_INVALID]++;\r\n    }\r\n  }\r\n\r\n  // 合计\r\n  for (let name in dataMap) {\r\n    for (let statisticItem of STATISTIC_ITEMS) {\r\n      for (let category of CATEGORIES) {\r\n        dataMap[name][KEY_TICKET_TOTAL][statisticItem] += dataMap[name][category][statisticItem];\r\n      }\r\n    }\r\n  }\r\n\r\n  // 计算平均关闭时长和未关时长\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 统计周期前需处理\r\nexport const statisticBeforePeriodNeedHandleResult = (array, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let result of array) {\r\n    for (let name in result) {\r\n      if (dataMap[name] == null) {\r\n        dataMap[name] = initStatisticItem();\r\n      }\r\n      for (let category in dataMap[name]) {\r\n        for (let item of STATISTIC_ITEMS) {\r\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\r\n            let ticketCloseCount = result[name][category][TICKET_CLOSE];\r\n            let ticketCloseProcessTime = result[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n            dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] +=\r\n              ticketCloseCount * ticketCloseProcessTime;\r\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\r\n            let ticketOpenProcessTime = result[name][category][TICKET_OPEN_PROCESS_TIME];\r\n            let ticketOpenCount = result[name][category][TICKET_OPEN];\r\n            dataMap[name][category][TICKET_OPEN_PROCESS_TIME] +=\r\n              ticketOpenCount * ticketOpenProcessTime;\r\n          }\r\n          else {\r\n            dataMap[name][category][item] +=\r\n              result[name][category][item];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // get average process time\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n  return dataMap;\r\n}\r\n\r\n// 统计周期累计\r\nexport const statisticPeriodTotalResult = (array, allItems) => {\r\n  let dataMap = {};\r\n  for (let name of allItems) {\r\n    dataMap[name] = initStatisticItem();\r\n  }\r\n  for (let result of array) {\r\n    for (let name in result) {\r\n      if (dataMap[name] == null) {\r\n        dataMap[name] = initStatisticItem();\r\n      }\r\n      for (let category in dataMap[name]) {\r\n        for (let item of STATISTIC_ITEMS) {\r\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\r\n            let ticketCloseCount = result[name][category][TICKET_CLOSE];\r\n            let ticketCloseProcessTime = result[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n            dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] +=\r\n              ticketCloseCount * ticketCloseProcessTime;\r\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\r\n            let ticketOpenProcessTime = result[name][category][TICKET_OPEN_PROCESS_TIME];\r\n            let ticketOpenCount = result[name][category][TICKET_OPEN];\r\n            dataMap[name][category][TICKET_OPEN_PROCESS_TIME] +=\r\n              ticketOpenCount * ticketOpenProcessTime;\r\n          }\r\n          else {\r\n            dataMap[name][category][item] +=\r\n              result[name][category][item];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // get average process time\r\n  for (let name in dataMap) {\r\n    for (let category in dataMap[name]) {\r\n      let ticketCloseProcessTime = dataMap[name][category][TICKET_CLOSE_PROCESS_TIME];\r\n      let ticketCloseCount = dataMap[name][category][TICKET_CLOSE];\r\n      dataMap[name][category][TICKET_CLOSE_PROCESS_TIME] =\r\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\r\n\r\n      let ticketOpenProcessTime = dataMap[name][category][TICKET_OPEN_PROCESS_TIME];\r\n      let ticketOpenCount = dataMap[name][category][TICKET_OPEN];\r\n      dataMap[name][category][TICKET_OPEN_PROCESS_TIME] =\r\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\r\n    }\r\n  }\r\n\r\n  return dataMap;\r\n}\r\n\r\nexport const statisticRate = (statisticMap, statisticItem, rateMap) => {\r\n  for (let name in statisticMap) {\r\n    for (let category in rateMap[name]) {\r\n      if (statisticMap[name][category][TICKET_ACCEPT] > 0) {\r\n        if (statisticItem === NEW_ADD_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === REMAIN_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === OVERALL_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === CLOSE_ON_TIME_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE_ON_TIME] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE) {\r\n          rateMap[name][category][statisticItem] =\r\n            (statisticMap[name][category][TICKET_CLOSE] /\r\n              statisticMap[name][category][TICKET_ACCEPT]).toFixed(4);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const statistc = (periodTickets, beforePeriodTickets, thisYearTotalTickets,\r\n  lastYearBeforePeriodTickets, startTime, endTime, col, allItems) => {\r\n  let yearStartTime = moment(startTime).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\r\n  let data = {};\r\n  data.periodNewAddedResult = statisticPeriodNewAddedTickets(periodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.thisYearBeforePeriodResult = statisticThisYearBeforePeriodTickets(beforePeriodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.thisYearBeforePeriodTotalResult = statisticThisYearBeforePeriodTotalTickets(beforePeriodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.lastYearBeforePeriodResult = statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\r\n    startTime, endTime, col, allItems);\r\n  data.lastYearBeforePeriodTotalResult = statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\r\n    yearStartTime, endTime, col, allItems);\r\n  data.thisYearTotalResult = statisticThisYearTotalTickets(thisYearTotalTickets,\r\n    yearStartTime, endTime, col, allItems);\r\n  data.beforePeriodNeedHandleResult = statisticBeforePeriodNeedHandleResult([\r\n    data.periodNewAddedResult, data.thisYearBeforePeriodResult,\r\n    data.lastYearBeforePeriodResult], allItems);\r\n  data.periodTotalResult = statisticPeriodTotalResult([\r\n    data.lastYearBeforePeriodTotalResult,\r\n    data.thisYearTotalResult\r\n  ], allItems);\r\n  data.rateResult = {};\r\n  for (let name of allItems) {\r\n    data.rateResult[name] = initRate();\r\n  }\r\n  statisticRate(data.periodNewAddedResult, NEW_ADD_CLOSE_RATE, data.rateResult);\r\n  statisticRate(data.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, data.rateResult);\r\n  statisticRate(data.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, data.rateResult);\r\n  statisticRate(data.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, data.rateResult);\r\n  statisticRate(data.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, data.rateResult);\r\n\r\n  return data;\r\n}\r\n\r\nexport const formatGraphData = (data, allItems) => {\r\n  let graphData = {\r\n    totalAcceptData: [],\r\n    overallCloseRateData: [],\r\n    newAddedAcceptData: [],\r\n    newAddedCloseRateData: [],\r\n    needHandleAcceptData: [],\r\n    needHandleCloseOnTimeRateData: [],\r\n    needHandleCloseRateData: [],\r\n    openData: [],\r\n    closeAverageHandleTimeData: [],\r\n    openAverageHandleTimeData: []\r\n  };\r\n  for (let name of allItems) {\r\n    graphData.totalAcceptData = [\r\n      ...graphData.totalAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.periodTotalResult[name][KEY_TICKET_TOTAL][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.overallCloseRateData = [\r\n      ...graphData.overallCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[name][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.newAddedAcceptData = [\r\n      ...graphData.newAddedAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[name][KEY_TICKET_TOTAL][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.newAddedCloseRateData = [\r\n      ...graphData.newAddedCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[name][KEY_TICKET_TOTAL][NEW_ADD_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.needHandleAcceptData = [\r\n      ...graphData.needHandleAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.beforePeriodNeedHandleResult[name][KEY_TICKET_TOTAL][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.needHandleCloseOnTimeRateData = [\r\n      ...graphData.needHandleCloseOnTimeRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[name][KEY_TICKET_TOTAL][CLOSE_ON_TIME_RATE]\r\n      }\r\n    ];\r\n    graphData.needHandleCloseRateData = [\r\n      ...graphData.needHandleCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[name][KEY_TICKET_TOTAL][OVERALL_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.closeAverageHandleTimeData = [\r\n      ...graphData.closeAverageHandleTimeData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[name][KEY_TICKET_TOTAL][TICKET_CLOSE_PROCESS_TIME]\r\n      }\r\n    ];\r\n    graphData.openAverageHandleTimeData = [\r\n      ...graphData.openAverageHandleTimeData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[name][KEY_TICKET_TOTAL][TICKET_OPEN_PROCESS_TIME]\r\n      }\r\n    ];\r\n    graphData.openData = [\r\n      ...graphData.openData,\r\n      {\r\n        name: name,\r\n        value: data.periodTotalResult[name][KEY_TICKET_TOTAL][TICKET_OPEN]\r\n      }\r\n    ]\r\n  }\r\n\r\n  return graphData;\r\n}\r\n\r\nexport const formatCategoryGraphData = (data, allItems, area) => {\r\n  let graphData = {\r\n    totalAcceptData: [],\r\n    overallCloseRateData: [],\r\n    newAddedAcceptData: [],\r\n    newAddedCloseRateData: [],\r\n    needHandleAcceptData: [],\r\n    needHandleCloseOnTimeRateData: [],\r\n    needHandleCloseRateData: [],\r\n    openData: [],\r\n    closeAverageHandleTimeData: [],\r\n    openAverageHandleTimeData: []\r\n  };\r\n  for (let name of allItems) {\r\n    graphData.totalAcceptData = [\r\n      ...graphData.totalAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.periodTotalResult[area][name][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.overallCloseRateData = [\r\n      ...graphData.overallCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[area][name][OVERALL_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.newAddedAcceptData = [\r\n      ...graphData.newAddedAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[area][name][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.newAddedCloseRateData = [\r\n      ...graphData.newAddedCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[area][name][NEW_ADD_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.needHandleAcceptData = [\r\n      ...graphData.needHandleAcceptData,\r\n      {\r\n        name: name,\r\n        value: data.beforePeriodNeedHandleResult[area][name][TICKET_ACCEPT]\r\n      }\r\n    ];\r\n    graphData.needHandleCloseOnTimeRateData = [\r\n      ...graphData.needHandleCloseOnTimeRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[area][name][CLOSE_ON_TIME_RATE]\r\n      }\r\n    ];\r\n    graphData.needHandleCloseRateData = [\r\n      ...graphData.needHandleCloseRateData,\r\n      {\r\n        name: name,\r\n        value: data.rateResult[area][name][OVERALL_CLOSE_RATE]\r\n      }\r\n    ];\r\n    graphData.closeAverageHandleTimeData = [\r\n      ...graphData.closeAverageHandleTimeData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[area][name][TICKET_CLOSE_PROCESS_TIME]\r\n      }\r\n    ];\r\n    graphData.openAverageHandleTimeData = [\r\n      ...graphData.openAverageHandleTimeData,\r\n      {\r\n        name: name,\r\n        value: data.periodNewAddedResult[area][name][TICKET_OPEN_PROCESS_TIME]\r\n      }\r\n    ];\r\n    graphData.openData = [\r\n      ...graphData.openData,\r\n      {\r\n        name: name,\r\n        value: data.periodTotalResult[area][name][TICKET_OPEN]\r\n      }\r\n    ]\r\n  }\r\n\r\n  return graphData;\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport DataForm from './components/DataForm';\nimport ChartView from './components/ChartView';\nimport ProjectView from './components/ProjectView';\nimport { Row, Col, message, LocaleProvider, Tabs } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  TICKET_SYSTEM_COUNT,\n  TICKET_ACCEPT,\n  TICKET_OPEN,\n  TICKET_VALIDATE,\n  TICKET_PAUSE,\n  TICKET_INVALID,\n  TICKET_CLOSE,\n  TICKET_CLOSE_NORMAL,\n  TICKET_CLOSE_ABNORMAL,\n  TICKET_CLOSE_ON_TIME,\n  TICKET_RESPONSE_IN_30_MIN,\n  TICKET_RESPONSE_IN_30_HOUR,\n  TICKET_CLOSE_PROCESS_TIME,\n  TICKET_OPEN_PROCESS_TIME,\n  DEFAULT_STATISTIC_ITEMS,\n  KEY_REPORT_TIME,\n  KEY_PROJECT_NAME,\n  KEY_SECOND_CATEGORY,\n  KEY_TICKET_STATUS,\n  KEY_IS_PROCESS_EXCCED,\n  KEY_FIRST_RESPONSE_TIME,\n  KEY_PROCESS_TIME,\n  KEY_CLOSE_TIME,\n  DEFAULT_SECOND_CATEGORIES,\n  KEY_STATISTIC_ITEM,\n  KEY_TICKET_TOTAL,\n  KEY_CITY_NAME,\n  NEW_ADD_CLOSE_RATE,\n  REMAIN_CLOSE_RATE,\n  OVERALL_CLOSE_RATE,\n  RESPONSE_IN_30_MIN_RATE,\n  RESPONSE_IN_30_HOUR_RATE,\n  CLOSE_ON_TIME_RATE,\n  TOTAL_OVERALL_CLOSE_RATE,\n  RATE_STATISTIC_ITEMS,\n  CATEGORY_UNCLASSIFY,\n  COL_FIRST_CLASS,\n  COL_CURRENT_STATUS,\n  COL_PROJECT_STAGE,\n  COL_PROJECT,\n  COL_CITY_COMPANY,\n  COL_AREA,\n  COL_REPORT_TIME,\n  CATEGORIES\n} from './constants';\n\nimport {\n  filterProjectName,\n  parseTime,\n  filterProjectStage,\n  formatToAreaTable,\n  formatToAreaTateTable,\n  readExcelData\n} from './utils';\n\nimport { connect } from 'react-redux';\nimport { addCategories, addTicketStates } from './store/actions';\n\nimport * as Util from './functions/utils';\n\n// global variables\nlet allCategory = [];\nlet allTicketState = [];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stageGraphData: {},\n      cityGraphData: {},\n      projectGraphData: {},\n      areaGraphData: {},\n      categoryGraphData: {}\n    }\n  }\n\n  start = (fileList, startTime, endTime) => {\n    const { addCategories, addTicketStates } = this.props;\n    this.setState({ loading: true });\n    readExcelData(fileList).then((data) => {\n      let allStages = [], allProjects = [], allCities = [], allAreas = [];\n      // get all categories and ticket states\n      for (let ticket of data) {\n        let category = Util.getCategory(ticket);\n        if (allCategory.indexOf(category) === -1) {\n          allCategory = [...allCategory, category];\n        }\n        let state = ticket[COL_CURRENT_STATUS];\n        if (allTicketState.indexOf(state) === -1) {\n          allTicketState = [...allTicketState, state];\n        }\n\n        // get all stages\n        let stage = ticket[COL_PROJECT_STAGE];\n        if (allStages.indexOf(stage) === -1) {\n          allStages = [\n            ...allStages,\n            stage\n          ];\n        }\n        // get all projects\n        let project = ticket[COL_PROJECT];\n        if (allProjects.indexOf(project) === -1) {\n          allProjects = [\n            ...allProjects,\n            project\n          ];\n        }\n        // get all cities\n        let city = ticket[COL_CITY_COMPANY];\n        if (allCities.indexOf(city) === -1) {\n          allCities = [\n            ...allCities,\n            city\n          ];\n        }\n        // get all area\n        let area = ticket[COL_AREA];\n        if (allAreas.indexOf(area) === -1) {\n          allAreas = [\n            ...allAreas,\n            area\n          ];\n        }\n      }\n      addCategories(allCategory);\n      addTicketStates(allTicketState);\n\n      let allCategories = CATEGORIES;\n\n      this.setState({\n        allStages,\n        allProjects,\n        allCities,\n        allAreas,\n        allCategories\n      });\n\n      let yearStartTime = moment(startTime).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n      let periodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime >= startTime && ticketReportTime <= endTime;\n      });\n      let beforePeriodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime >= yearStartTime && ticketReportTime < startTime;\n      });\n      let thisYearTotalTickets = data.filter((ticket) => {\n        let reportTime = moment(ticket[KEY_REPORT_TIME]);\n        return reportTime <= endTime && reportTime >= yearStartTime;\n      });\n      let lastYearBeforePeriodTickets = data.filter(ticket => {\n        let ticketReportTime = moment(ticket[COL_REPORT_TIME]);\n        return ticketReportTime < yearStartTime\n      });\n\n      // 统计分期\n      let stageData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_PROJECT_STAGE, allStages)\n      this.setState({\n        stageData\n      });\n\n      // 统计项目\n      let projectData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_PROJECT, allProjects)\n      this.setState({\n        projectData\n      });\n\n      // 统计城市\n      let cityData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_CITY_COMPANY, allCities)\n      this.setState({\n        cityData\n      });\n\n      // 统计大区\n      let areaData = Util.statistc(periodTickets, beforePeriodTickets, thisYearTotalTickets,\n        lastYearBeforePeriodTickets, startTime, endTime, COL_AREA, allAreas)\n      this.setState({\n        areaData\n      });\n\n      // 画图\n      let stageGraphData = Util.formatGraphData(stageData, allStages);\n      this.setState({\n        stageGraphData\n      })\n\n      let projectGraphData = Util.formatGraphData(projectData, allProjects);\n      this.setState({\n        projectGraphData\n      });\n\n      let cityGraphData = Util.formatGraphData(cityData, allCities);\n      this.setState({\n        cityGraphData\n      });\n\n      let areaGraphData = Util.formatGraphData(areaData, allAreas);\n      this.setState({\n        areaGraphData\n      });\n\n      // 统计分类分布图\n      let categoryGraphData = Util.formatCategoryGraphData(areaData, allCategories, allAreas[0]);\n      this.setState({\n        categoryGraphData\n      });\n\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const tabChart = (\n      <ChartView\n        stageGraphData={this.state.stageGraphData}\n        projectGraphData={this.state.projectGraphData}\n        cityGraphData={this.state.cityGraphData}\n        areaGraphData={this.state.areaGraphData}\n        categoryGraphData={this.state.categoryGraphData}\n        allStages={this.state.allStages}\n        allProjects={this.state.allProjects}\n        allCities={this.state.allCities}\n        allAreas={this.state.allAreas}\n        allCategories={this.state.allCategories}\n      />\n    );\n\n    const tabArea = (\n      <ProjectView\n        data={this.state.areaData}\n      />\n    );\n\n    const tabCity = (\n      <ProjectView\n        data={this.state.cityData}\n      />\n    )\n\n    const tabProject = (\n      <ProjectView\n        data={this.state.projectData}\n      />\n    );\n\n    const tabStage = (\n      <ProjectView\n        data={this.state.stageData}\n      />\n    );\n\n    return (\n      <LocaleProvider locale={zh_CN}>\n        <div>\n          <h2 className=\"text--center heading\">统计辅助工具</h2>\n          <DataForm\n            onStart={this.start}\n            onExport={this.exportExcel}\n            loading={this.state.loading}\n          />\n          <Row style={{ margin: '40px 0' }}>\n            <Col span={22} offset={1}>\n              <Tabs type=\"card\">\n                <Tabs.TabPane tab=\"统计图\" key=\"统计图\">{tabChart}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"大区\" key=\"大区\">{tabArea}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"城市\" key=\"城市\">{tabCity}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"项目\" key=\"项目\">{tabProject}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"分期\" key=\"分期\">{tabStage}</Tabs.TabPane>\n              </Tabs>\n            </Col>\n          </Row>\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  addCategories,\n  addTicketStates\n}\n\nconst ConnectedApp = connect(null, mapDispatchToProps)(App);\n\nexport default ConnectedApp;\n","import {\r\n  ADD_CATEGORY,\r\n  ADD_CATEGORIES,\r\n  ADD_TICKET_STATES\r\n} from '../action-types';\r\n\r\nexport const addCategory = category => ({\r\n  type: ADD_CATEGORY,\r\n  payload: {\r\n    category\r\n  }\r\n});\r\n\r\nexport const addCategories = categories => ({\r\n  type: ADD_CATEGORIES,\r\n  payload: {\r\n    categories\r\n  }\r\n});\r\n\r\nexport const addTicketStates = ticketStates => ({\r\n  type: ADD_TICKET_STATES,\r\n  payload: {\r\n    ticketStates\r\n  }\r\n})\r\n","export const ADD_CATEGORY = 'ADD_CATEGORY';\r\nexport const ADD_CATEGORIES = 'ADD_CATEGORIES';\r\nexport const ADD_TICKET_STATES = 'ADD_TICKET_STATES';\r\n","import { combineReducers } from 'redux';\r\nimport category from './category';\r\nimport ticketState from './ticket-state';\r\n\r\nconst reducer = combineReducers({\r\n  category,\r\n  ticketState\r\n});\r\n\r\nexport default reducer;\r\n","import {\r\n  ADD_CATEGORY,\r\n  ADD_CATEGORIES\r\n} from '../action-types';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_CATEGORY:\r\n      const { category } = action.payload;\r\n      return [\r\n        ...state,\r\n        category\r\n      ];\r\n    case ADD_CATEGORIES:\r\n      const { categories } = action.payload;\r\n      return [\r\n        ...state,\r\n        ...categories\r\n      ]\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  ADD_TICKET_STATES\r\n} from '../action-types';\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_TICKET_STATES:\r\n      const { ticketStates } = action.payload;\r\n      return [\r\n        ...state,\r\n        ...ticketStates\r\n      ];\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}