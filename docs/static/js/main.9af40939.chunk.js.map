{"version":3,"sources":["components/DataForm.js","constants.js","components/CityTable.js","components/CityView.js","components/ProjectTable.js","components/ProjectView.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startDate","Date","set","hour","minute","second","endDate","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","toConsumableArray","concat","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","style","margin","onExport","React","Component","defaultPorps","WrapDataForm","create","TICKET_SYSTEM_COUNT","TICKET_ACCEPT","TICKET_OPEN","TICKET_VALIDATE","TICKET_PAUSE","TICKET_INVALID","TICKET_CLOSE","TICKET_CLOSE_NORMAL","TICKET_CLOSE_ABNORMAL","TICKET_CLOSE_ON_TIME","TICKET_RESPONSE_IN_30_MIN","TICKET_RESPONSE_IN_30_HOUR","TICKET_CLOSE_PROCESS_TIME","TICKET_OPEN_PROCESS_TIME","DEFAULT_STATISTIC_ITEMS","KEY_REPORT_TIME","KEY_PROJECT_NAME","KEY_SECOND_CATEGORY","KEY_TICKET_STATUS","KEY_IS_PROCESS_EXCCED","KEY_FIRST_RESPONSE_TIME","KEY_PROCESS_TIME","KEY_CLOSE_TIME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","KEY_CITY_NAME","DEFAULT_SECOND_CATEGORIES","STATISTIC_PERIOD_ADD","STATISTIC_BEFORE_PERIOD_REMAIN","STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_THIS_YEAR_TOTAL","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_BEFORE_PERIOD_NEED_HANDLE","STATISTIC_BEFORE_PERIOD_TOTAL","STATISTIC_PERIOD_RATE","STAGES","CityTable","cityColumn","table","Column","dataIndex","title","key","width","otherColumns","map","item","currentPageData","dataSource","filteredCities","length","data","filter","pagination","pageSize","scroll","y","size","defaultProps","CityView","filterCities","es_select","mode","onChange","cities","city","Option","components_CityTable","periodNewAddedData","thisYearBeforePeriodData","thisYearBeforePeriodTotalData","thisYearTotalData","lastYearBeforePeriodData","lastYearBeforePeriodTotalData","beforePeriodNeedHandleData","periodTotalData","rateData","ProjectTable","projectColumn","filteredProjects","ProjectView","filterCity","filterProjects","projects","components_ProjectTable","filterProjectName","projectName","sub","match","substring","parseTime","timeString","time","day","min","window","parseInt","filterProjectStage","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","stage","return","TICKET_STATUS_IN_PROGRESS","TICKET_STATUS_PAUSE","TICKET_STATUS_VALIDATE","TICKET_STATUS_CLOSE","TICKET_STATUS_ABNORMAL_CLOSE","TICKET_STATUS_INVALID","NO","NEW_ADD_CLOSE_RATE","REMAIN_CLOSE_RATE","OVERALL_CLOSE_RATE","RESPONSE_IN_30_MIN_RATE","RESPONSE_IN_30_HOUR_RATE","CLOSE_ON_TIME_RATE","TOTAL_OVERALL_CLOSE_RATE","RATE_STATISTIC_ITEMS","initProjectRate","_arr","_i","secondCategory","_i2","itemName","initProject","_arr2","_i3","isInProgress","ticketStatus","statisticRate","statisticMap","statisticItem","rateMap","_arr3","_i4","toFixed","statisticCityRate","_arr4","_i5","globalRowKey","formatCityData","tableData","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","rowData","_arr8","_i9","push","formatToCityRateTable","_arr9","_i10","_arr10","_i11","mergeStageResult","resultArray","filterFunc","mergeResult","forEach","result","filteredProjectName","_arr11","_i12","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","ticketCloseCount","ticketCloseProcessTime","ticketOpenProcessTime","ticketOpenCount","Number","mergeProjectResult","_arr12","_i13","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","statisticCity","periodNewAddedResult","closeTimeStart","closeTimeEnd","dataMap","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","ticket","ticketStatistic","ticketCloseTime","moment","_parseTime","_parseTime2","_parseTime3","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","statistic","reportTime","yearStartDate","month","date","thisYearbeforePeriodTickets","thisYearBeforePeriodResult","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_parseTime4","_parseTime5","_parseTime6","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","statisticThisYearBeforePeriodTickets","thisYearBeforePeriodTotalResult","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","statisticThisYearBeforeStartDateTotalTickets","thisYearTotalResult","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","_parseTime13","_parseTime14","_parseTime15","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","statisticThisYearTotalTickets","lastYearBeforePeriodTickets","lastYearBeforePeriodResult","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_parseTime7","_parseTime8","_parseTime9","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","statisticLastYearBeforePeriodTickets","lastYearBeforePeriodTotalResult","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","_parseTime10","_parseTime11","_parseTime12","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","statisticLastYearBeforePeriodTotalTickets","beforePeriodNeedHandleResult","_arr13","_i14","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","periodTotalResult","_arr14","_i15","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","stageRateResult","stageResult","rateResult","projectResult","projectRateResult","cityResult","cityRateResult","App","start","fileReader","FileReader","readFile","onload","event","workbook","XLSX","read","target","sheet","Sheets","SheetNames","cityName","name","utils","sheet_to_json","blankrows","readAsBinaryString","readExcels","cityData","resultMap","allCities","_loop","exportExcel","header","newAddedData","thisYearBeforeStartData","sheet1","json_to_sheet","sheet2","sheet3","sheet4","sheet5","sheet6","sheet7","sheet8","sheet9","book_new","book_append_sheet","writeFile","now","format","error","tabCity","components_CityView","tabProject","components_ProjectView","locale_provider","locale","zh_CN","className","components_DataForm","tabs","TabPane","tab","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9af40939.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {},\n    onExport: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func,\n    onExport: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startDate = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endDate = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startDate, endDate);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              { \n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }   \n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在读取...': '读取数据'\n              }\n            </Button>\n            <Button style={{ margin: '0 20px' }} onClick={this.props.onExport}>导出Excel表格</Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '判定无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关平均处理时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '剩余未关平均处理时长（天）';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\nexport const KEY_CITY_NAME = '城市';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_RATE = '本年度统计周期内';\r\n\r\nexport const STAGES = [\r\n  '一期',\r\n  '二期',\r\n  '三期',\r\n  '四期',\r\n  '五期',\r\n  '六期',\r\n  '七期',\r\n  '八期',\r\n  '九期',\r\n  '十期'\r\n];","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_CITY_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction CityTable(props) {\r\n  const cityColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_CITY_NAME}\r\n      title={KEY_CITY_NAME}\r\n      key={KEY_CITY_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredCities.length > 0 ?\r\n        props.data.filter(item => props.filteredCities.indexOf(item[KEY_CITY_NAME]) != -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {cityColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nCityTable.defaultProps = {\r\n  filteredCities: []\r\n}\r\n\r\nexport default CityTable;\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport CityTable from './CityTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass CityView extends React.Component {\r\n  static defaultProps = {\r\n    cities: []\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredCities: []\r\n    }\r\n  }\r\n\r\n  filterCities = (filteredCities) => {\r\n    if (filteredCities != null && filteredCities.length > 0) {\r\n      this.setState({\r\n        filteredCities: filteredCities\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredCities: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的城市'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterCities}\r\n                >\r\n                  {\r\n                    this.props.cities.map((city) => (\r\n                      <Select.Option key={city}>{city}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={this.props.periodNewAddedData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.thisYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.thisYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={this.props.thisYearTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.lastYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.lastYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={this.props.beforePeriodNeedHandleData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={this.props.periodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={this.props.rateData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CityView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ProjectTable(props) {\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title={KEY_PROJECT_NAME}\r\n      key={KEY_PROJECT_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredProjects.length > 0 ?\r\n        props.data.filter(item => props.filteredProjects.indexOf(item[KEY_PROJECT_NAME]) != -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nProjectTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ProjectTable;\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport ProjectTable from './ProjectTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass ProjectView extends React.Component {\r\n  static defaultProps = {\r\n    cities: []\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredCities: [],\r\n      projects: []\r\n    }\r\n  }\r\n\r\n  filterCity = (cities) => {\r\n    if (cities != null && cities.length > 0) {\r\n      this.setState({\r\n        filteredCities: cities\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredCities: []\r\n      });\r\n    }\r\n  }\r\n\r\n  filterProjects = (projects) => {\r\n    if (projects.length > 0) {\r\n      this.setState({\r\n        filteredProjects: projects\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredProjects: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要显示的城市'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterCity}\r\n                >\r\n                  {\r\n                    this.props.cities.map((city) => (\r\n                      <Select.Option key={city}>{city}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的项目'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterProjects}\r\n                >\r\n                  {\r\n                    this.props.cities.map((city) => (\r\n                      <Select.Option key={city}>{city}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={this.props.periodNewAddedData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.thisYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.thisYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={this.props.thisYearTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.lastYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.lastYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={this.props.beforePeriodNeedHandleData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={this.props.periodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={this.props.rateData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectView;\r\n","import {\r\n  STAGES\r\n} from './constants';\r\n\r\nexport function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|（.*?）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}\r\n\r\nexport function filterProject(projectName, reg) {\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function filterProjectStage(projectName) {\r\n  let filteredName = null;\r\n  for (let stage of STAGES) {\r\n    if (projectName.indexOf(stage) != -1) {\r\n      filteredName = projectName.substring(0, projectName.indexOf(stage));\r\n      return filteredName;\r\n    }\r\n  }\r\n  return projectName;\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport DataForm from './components/DataForm';\nimport CityView from './components/CityView';\nimport ProjectView from './components/ProjectView';\nimport XLSX from 'xlsx';\nimport { Row, Col, message, LocaleProvider, Select, Tabs, Form } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  TICKET_SYSTEM_COUNT,\n  TICKET_ACCEPT,\n  TICKET_OPEN,\n  TICKET_VALIDATE,\n  TICKET_PAUSE,\n  TICKET_INVALID,\n  TICKET_CLOSE,\n  TICKET_CLOSE_NORMAL,\n  TICKET_CLOSE_ABNORMAL,\n  TICKET_CLOSE_ON_TIME,\n  TICKET_RESPONSE_IN_30_MIN,\n  TICKET_RESPONSE_IN_30_HOUR,\n  TICKET_CLOSE_PROCESS_TIME,\n  TICKET_OPEN_PROCESS_TIME,\n  DEFAULT_STATISTIC_ITEMS,\n  KEY_REPORT_TIME,\n  KEY_PROJECT_NAME,\n  KEY_SECOND_CATEGORY,\n  KEY_TICKET_STATUS,\n  KEY_IS_PROCESS_EXCCED,\n  KEY_FIRST_RESPONSE_TIME,\n  KEY_PROCESS_TIME,\n  KEY_CLOSE_TIME,\n  DEFAULT_SECOND_CATEGORIES,\n  KEY_STATISTIC_ITEM,\n  KEY_TICKET_TOTAL,\n  KEY_CITY_NAME,\n  STATISTIC_PERIOD_ADD,\n  STATISTIC_BEFORE_PERIOD_REMAIN,\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_THIS_YEAR_TOTAL,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\n  STATISTIC_BEFORE_PERIOD_TOTAL,\n  STATISTIC_PERIOD_RATE,\n  STAGES\n} from './constants';\n\nimport {\n  filterProjectName,\n  parseTime,\n  filterProjectStage\n} from './utils';\n\n// ticket status\nconst TICKET_STATUS_IN_PROGRESS = '处理中';\nconst TICKET_STATUS_PAUSE = '暂停处理';\nconst TICKET_STATUS_VALIDATE = '待复验';\nconst TICKET_STATUS_CLOSE = '已关闭';\nconst TICKET_STATUS_ABNORMAL_CLOSE = '非正常关闭';\nconst TICKET_STATUS_INVALID = '判定无效';\n\nconst IN_PROGRESS_TICKET_TOTAL_HANDLE_TIME = '未关闭处理时长总数';\n\nconst YES = '是';\nconst NO = '否';\n\nconst NEW_ADD_CLOSE_RATE = '新增关闭率';\nconst REMAIN_CLOSE_RATE = '遗留关闭率';\nconst OVERALL_CLOSE_RATE = '总体关闭率';\nconst RESPONSE_IN_30_MIN_RATE = '响应及时率（0.5h）'\nconst RESPONSE_IN_30_HOUR_RATE = '响应及时率（30h）';\nconst CLOSE_ON_TIME_RATE = '及时关闭率';\nconst TOTAL_OVERALL_CLOSE_RATE = '累计总体关闭率';\n\nconst RATE_STATISTIC_ITEMS = [\n  REMAIN_CLOSE_RATE,\n  NEW_ADD_CLOSE_RATE,\n  OVERALL_CLOSE_RATE,\n  RESPONSE_IN_30_MIN_RATE,\n  RESPONSE_IN_30_HOUR_RATE,\n  CLOSE_ON_TIME_RATE,\n  TOTAL_OVERALL_CLOSE_RATE\n];\n\nfunction initProjectRate() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of RATE_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction initProject() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of DEFAULT_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction isInProgress(ticketStatus) {\n  return ticketStatus.indexOf(TICKET_STATUS_IN_PROGRESS) === 0;\n}\n\n// 统计周期内新增\nfunction statistic(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 统计周期前遗留\nfunction statisticThisYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 本年度统计周期前遗留累计\nfunction statisticThisYearBeforeStartDateTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n  }\n\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticThisYearTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if (((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) &&\n      ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticRate(statisticMap, statisticItem, rateMap) {\n  for (let projectName in statisticMap) {\n    if (rateMap[projectName] == null) {\n      rateMap[projectName] = initProjectRate();\n    }\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      if (statisticItem === NEW_ADD_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === REMAIN_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE_ON_TIME] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      }\n    }\n  }\n}\n\nfunction statisticCityRate(statisticMap, statisticItem, rateMap) {\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    if ( rateMap[secondCategory] == null) {\n      rateMap[secondCategory] = {};\n    }\n    if (statisticItem === NEW_ADD_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === REMAIN_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE_ON_TIME] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    }\n  }\n}\n\nfunction readExcels(fileList) {\n  return new Promise((resolve, reject) => {\n    let fileReader = new FileReader();\n    let data = {};\n\n    let readFile = (index) => {\n      if (index < fileList.length) {\n        fileReader.onload = (event) => {\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\n          let cityName = fileList[index].name.substring(0, fileList[index].name.indexOf('.'));\n          data[cityName] = XLSX.utils.sheet_to_json(sheet, { blankrows: false });\n          readFile(index + 1);\n        }\n        fileReader.readAsBinaryString(fileList[index]);\n      } else {\n        resolve(data);\n      }\n    };\n    readFile(0);\n  });\n}\n\nfunction formatToTable(data) {\n  let tableData = [];\n  var rowKey = 0;\n  for (let projectName in data) {\n    for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n      let rowData = {};\n      rowKey++;\n      rowData.key = rowKey;\n      rowData[KEY_PROJECT_NAME] = projectName;\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\n      }\n      tableData.push(rowData);\n    }\n  }\n  return tableData;\n}\n\nfunction formatToRateTable(data) {\n  let tableData = [];\n  var rowKey = 0;\n  for (let projectName in data) {\n    for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\n      RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\n      let rowData = {};\n      rowKey++;\n      rowData.key = rowKey;\n      rowData[KEY_PROJECT_NAME] = projectName;\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\n      }\n      tableData.push(rowData);\n    }\n  }\n  return tableData;\n}\n\nlet globalRowKey = 0;\n\nfunction formatCityData(data, city) {\n  let tableData = [];\n  for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction formatToCityRateTable(data, city) {\n  let tableData = [];\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction mergeStageResult(resultArray, filterFunc) {\n  let mergeResult = {};\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      let filteredProjectName = filterFunc(projectName);\n      if (mergeResult[filteredProjectName] == null) {\n        mergeResult[filteredProjectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[filteredProjectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[filteredProjectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[filteredProjectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in mergeResult) {\n    for (let secondCategory in mergeResult[projectName]) {\n      let ticketCloseProcessTime = mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = mergeResult[projectName][secondCategory][TICKET_CLOSE];\n      mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = mergeResult[projectName][secondCategory][TICKET_OPEN];\n      mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return mergeResult;\n}\n\nfunction mergeProjectResult(resultArray) {\n  let mergeResult = initProject();\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let secondCategory in mergeResult) {\n    let ticketCloseProcessTime = mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME];\n    let ticketCloseCount = mergeResult[secondCategory][TICKET_CLOSE];\n    mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n      ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n    let ticketOpenProcessTime = mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME];\n    let ticketOpenCount = mergeResult[secondCategory][TICKET_OPEN];\n    mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] =\n      ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n  }\n\n  return mergeResult;\n}\n\nfunction statisticCity(data, startDate, endDate) {\n  // 统计分期\n  let periodNewAddedTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime >= startDate && reportTime <= endDate;\n  });\n  let periodNewAddedResult = statistic(periodNewAddedTickets, startDate, endDate);\n\n  let yearStartDate = moment(startDate).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n  let thisYearbeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < startDate && reportTime >= yearStartDate;\n  });\n\n  let thisYearBeforePeriodResult = statisticThisYearBeforePeriodTickets(thisYearbeforePeriodTickets,\n    startDate, endDate);\n\n  let thisYearBeforePeriodTotalResult = statisticThisYearBeforeStartDateTotalTickets(\n    thisYearbeforePeriodTickets, yearStartDate, endDate);\n\n  let thisYearTotalTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime <= endDate && reportTime >= yearStartDate;\n  });\n  let thisYearTotalResult = statisticThisYearTotalTickets(thisYearTotalTickets,\n    yearStartDate, endDate);\n\n  let lastYearBeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < yearStartDate;\n  });\n  let lastYearBeforePeriodResult = statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\n    startDate, endDate);\n  \n  let lastYearBeforePeriodTotalResult = statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\n    yearStartDate, endDate);\n\n  let beforePeriodNeedHandleResult = {};\n  [periodNewAddedResult, thisYearBeforePeriodResult, lastYearBeforePeriodResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (beforePeriodNeedHandleResult[projectName] == null) {\n        beforePeriodNeedHandleResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            beforePeriodNeedHandleResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in beforePeriodNeedHandleResult) {\n    for (let secondCategory in beforePeriodNeedHandleResult[projectName]) {\n      let ticketCloseProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let periodTotalResult = {};\n  [lastYearBeforePeriodTotalResult, thisYearTotalResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (periodTotalResult[projectName] == null) {\n        periodTotalResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            periodTotalResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in periodTotalResult) {\n    for (let secondCategory in periodTotalResult[projectName]) {\n      let ticketCloseProcessTime = periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = periodTotalResult[projectName][secondCategory][TICKET_CLOSE];\n      periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = periodTotalResult[projectName][secondCategory][TICKET_OPEN];\n      periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let stageRateResult = {};\n  statisticRate(periodNewAddedResult, NEW_ADD_CLOSE_RATE, stageRateResult);\n  statisticRate(thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, stageRateResult);\n  statisticRate(periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, stageRateResult);\n  \n  let stageResult = {\n    periodNewAddedResult: periodNewAddedResult,\n    thisYearBeforePeriodResult: thisYearBeforePeriodResult,\n    thisYearBeforePeriodTotalResult: thisYearBeforePeriodTotalResult,\n    lastYearBeforePeriodResult: lastYearBeforePeriodResult,\n    lastYearBeforePeriodTotalResult: lastYearBeforePeriodTotalResult,\n    beforePeriodNeedHandleResult: beforePeriodNeedHandleResult,\n    thisYearTotalResult: thisYearTotalResult,\n    periodTotalResult: periodTotalResult,\n    rateResult: stageRateResult\n  };\n\n  // 统计项目\n  let projectResult = {\n    periodNewAddedResult:  mergeStageResult([periodNewAddedResult], filterProjectStage),\n    thisYearBeforePeriodResult: mergeStageResult([thisYearBeforePeriodResult], filterProjectStage),\n    thisYearBeforePeriodTotalResult: mergeStageResult([thisYearBeforePeriodTotalResult], filterProjectStage),\n    thisYearTotalResult: mergeStageResult([thisYearTotalResult], filterProjectStage),\n    lastYearBeforePeriodResult: mergeStageResult([lastYearBeforePeriodResult], filterProjectStage),\n    lastYearBeforePeriodTotalResult: mergeStageResult([lastYearBeforePeriodTotalResult], filterProjectStage),\n    beforePeriodNeedHandleResult: mergeStageResult([beforePeriodNeedHandleResult], filterProjectStage),\n    periodTotalResult: mergeStageResult([periodTotalResult], filterProjectStage)\n  };\n  let projectRateResult = {}\n  statisticRate(projectResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, projectRateResult);\n  statisticRate(projectResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, projectRateResult);\n  projectResult.rateResult = projectRateResult;\n\n  let cityResult = {\n    periodNewAddedResult:  mergeProjectResult([projectResult.periodNewAddedResult]),\n    thisYearBeforePeriodResult: mergeProjectResult([projectResult.thisYearBeforePeriodResult]),\n    thisYearBeforePeriodTotalResult: mergeProjectResult([projectResult.thisYearBeforePeriodTotalResult]),\n    thisYearTotalResult: mergeProjectResult([projectResult.thisYearTotalResult]),\n    lastYearBeforePeriodResult: mergeProjectResult([projectResult.lastYearBeforePeriodResult]),\n    lastYearBeforePeriodTotalResult: mergeProjectResult([projectResult.lastYearBeforePeriodTotalResult]),\n    beforePeriodNeedHandleResult: mergeProjectResult([projectResult.beforePeriodNeedHandleResult]),\n    periodTotalResult: mergeProjectResult([projectResult.periodTotalResult])\n  };\n  let cityRateResult = {}\n  statisticCityRate(cityResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, cityRateResult);\n  cityResult.rateResult = cityRateResult;\n\n  let result = {\n    stageResult,\n    projectResult,\n    cityResult\n  };\n  return result;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityData: {\n        periodNewAddedData: [],\n        thisYearBeforePeriodData: [],\n        thisYearBeforePeriodTotalData: [],\n        thisYearTotalData: [],\n        lastYearBeforePeriodData: [],\n        lastYearBeforePeriodTotalData: [],\n        beforePeriodNeedHandleData: [],\n        periodTotalData: [],\n        rateData: [],\n        cities: []\n      },\n      loading: false\n    };\n  }\n\n  start = (fileList, startDate, endDate) => {\n    this.setState({ loading: true });\n    readExcels(fileList).then((data) => {\n      // clear previous data\n      this.setState({\n        cityData: {\n          periodNewAddedData: [],\n          thisYearBeforePeriodData: [],\n          thisYearBeforePeriodTotalData: [],\n          thisYearTotalData: [],\n          lastYearBeforePeriodData: [],\n          lastYearBeforePeriodTotalData: [],\n          beforePeriodNeedHandleData: [],\n          periodTotalData: [],\n          rateData: [],\n          cities: []\n        }\n      });\n      this.resultMap = {};\n      let allCities = [];\n      for (let cityName in data) {\n        allCities.push(cityName);\n        let result = statisticCity(data[cityName], startDate, endDate);\n        this.resultMap[cityName] = result;\n        this.setState((state) => ({\n          cityData: {\n            periodNewAddedData:  [...state.cityData.periodNewAddedData, ...formatCityData(result.cityResult.periodNewAddedResult, cityName)],\n            thisYearBeforePeriodData: [...state.cityData.thisYearBeforePeriodData, ...formatCityData(result.cityResult.thisYearBeforePeriodResult, cityName)],\n            thisYearBeforePeriodTotalData: [...state.cityData.thisYearBeforePeriodTotalData, ...formatCityData(result.cityResult.thisYearBeforePeriodTotalResult, cityName)],\n            thisYearTotalData: [...state.cityData.thisYearTotalData, ...formatCityData(result.cityResult.thisYearTotalResult, cityName)],\n            lastYearBeforePeriodData: [...state.cityData.lastYearBeforePeriodData, ...formatCityData(result.cityResult.lastYearBeforePeriodResult, cityName)],\n            lastYearBeforePeriodTotalData: [...state.cityData.lastYearBeforePeriodTotalData, ...formatCityData(result.cityResult.lastYearBeforePeriodTotalResult, cityName)],\n            beforePeriodNeedHandleData: [...state.cityData.beforePeriodNeedHandleData, ...formatCityData(result.cityResult.beforePeriodNeedHandleResult, cityName)],\n            periodTotalData: [...state.cityData.periodTotalData, ...formatCityData(result.cityResult.periodTotalResult, cityName)],\n            rateData: [...state.cityData.rateData, ...formatToCityRateTable(result.cityResult.rateResult, cityName)],\n            cities: allCities\n          }\n        }));\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  exportExcel = () => {\n    let header = [KEY_PROJECT_NAME, KEY_STATISTIC_ITEM, ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL];\n    if (this.state.newAddedData.length > 0 || this.state.thisYearBeforeStartData.length > 0 ||\n      this.state.thisYearBeforePeriodTotalData.length > 0 || this.state.thisYearTotalData.length > 0 ||\n      this.state.lastYearBeforePeriodData.length > 0 ||\n      this.state.lastYearBeforePeriodTotalData.length > 0 ||\n      this.state.beforePeriodNeedHandleData.length > 0 ||\n      this.state.periodTotalData.length > 0) {\n      let sheet1 = XLSX.utils.json_to_sheet(this.state.periodNewAddedData, {\n        header: header\n      });\n      let sheet2 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodData, {\n        header: header\n      });\n      let sheet3 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodTotalData, {\n        header: header\n      });\n      let sheet4 = XLSX.utils.json_to_sheet(this.state.thisYearTotalData, {\n        header: header\n      });\n      let sheet5 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodData, {\n        header: header\n      });\n      let sheet6 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodTotalData, {\n        header: header\n      });\n      let sheet7 = XLSX.utils.json_to_sheet(this.state.beforePeriodNeedHandleData, {\n        header: header\n      });\n      let sheet8 = XLSX.utils.json_to_sheet(this.state.periodTotalData, {\n        header: header\n      });\n      let sheet9 = XLSX.utils.json_to_sheet(this.state.rateData, {\n        header: header\n      });\n      let workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, sheet1, STATISTIC_PERIOD_ADD);\n      XLSX.utils.book_append_sheet(workbook, sheet2, STATISTIC_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet3, STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet4, STATISTIC_THIS_YEAR_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet5, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet6, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet7, STATISTIC_BEFORE_PERIOD_NEED_HANDLE);\n      XLSX.utils.book_append_sheet(workbook, sheet8, STATISTIC_BEFORE_PERIOD_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet9, STATISTIC_PERIOD_RATE)\n      XLSX.writeFile(workbook, 'statistic-' + moment(Date.now()).format('YYYY-MM-DD-HH-MM-SS') + '.xlsx')\n    } else {\n      message.error('请先点击“开始统计”按钮进行统计！');\n    }\n  }\n\n  render() {\n    // const tab1 = ( \n    //   <ResultView\n    //     periodNewAddedData={this.state.periodNewAddedData}\n    //     thisYearBeforePeriodData={this.state.thisYearBeforePeriodData}\n    //     thisYearBeforePeriodTotalData={this.state.thisYearBeforePeriodTotalData}\n    //     thisYearTotalData={this.state.thisYearTotalData}\n    //     lastYearBeforePeriodData={this.state.lastYearBeforePeriodData}\n    //     lastYearBeforePeriodTotalData={this.state.lastYearBeforePeriodTotalData}\n    //     beforePeriodNeedHandleData={this.state.beforePeriodNeedHandleData}\n    //     periodTotalData={this.state.periodTotalData}\n    //     rateData={this.state.rateData}\n    //     filteredProjects={this.state.filteredProjects}\n    //     projects={this.state.projects}\n    //     changeProjects={this.changeProjects}\n    //   />\n    // );\n    // const tab2 = (\n    //   <ResultView\n    //     periodNewAddedData={this.state.projectStatistic.periodNewAddedData}\n    //     thisYearBeforePeriodData={this.state.projectStatistic.thisYearBeforePeriodData}\n    //     thisYearBeforePeriodTotalData={this.state.projectStatistic.thisYearBeforePeriodTotalData}\n    //     thisYearTotalData={this.state.projectStatistic.thisYearTotalData}\n    //     lastYearBeforePeriodData={this.state.projectStatistic.lastYearBeforePeriodData}\n    //     lastYearBeforePeriodTotalData={this.state.projectStatistic.lastYearBeforePeriodTotalData}\n    //     beforePeriodNeedHandleData={this.state.projectStatistic.beforePeriodNeedHandleData}\n    //     periodTotalData={this.state.projectStatistic.periodTotalData}\n    //     rateData={this.state.projectStatistic.rateData}\n    //     filteredProjects={this.state.projectStatistic.filteredProjects}\n    //     projects={this.state.projectStatistic.projects}\n    //     changeProjects={this.changeProjects}\n    //   />\n    // );\n\n    const tabCity = (\n      <CityView\n        periodNewAddedData={this.state.cityData.periodNewAddedData}\n        thisYearBeforePeriodData={this.state.cityData.thisYearBeforePeriodData}\n        thisYearBeforePeriodTotalData={this.state.cityData.thisYearBeforePeriodTotalData}\n        thisYearTotalData={this.state.cityData.thisYearTotalData}\n        lastYearBeforePeriodData={this.state.cityData.lastYearBeforePeriodData}\n        lastYearBeforePeriodTotalData={this.state.cityData.lastYearBeforePeriodTotalData}\n        beforePeriodNeedHandleData={this.state.cityData.beforePeriodNeedHandleData}\n        periodTotalData={this.state.cityData.periodTotalData}\n        rateData={this.state.cityData.rateData}\n        cities={this.state.cityData.cities}\n      />\n    );\n\n    const tabProject = (\n      <ProjectView\n        cities={this.state.cityData.cities}\n      />\n    );\n \n    return (\n      <LocaleProvider locale={zh_CN}>\n        <div>\n          <h2 className=\"text--center heading\">统计辅助工具</h2>\n          <DataForm\n            onStart={this.start}\n            onExport={this.exportExcel}\n            loading={this.state.loading}\n          />\n          <Row style={{ margin: '40px 0' }}>\n            <Col span={22} offset={1}>\n              <Tabs type=\"card\">\n                {/* <Tabs.TabPane tab=\"大区\" key=\"大区\">大区统计</Tabs.TabPane> */}\n                <Tabs.TabPane tab=\"城市\" key=\"城市\">\n                  {tabCity}\n                </Tabs.TabPane>\n                <Tabs.TabPane tab=\"项目\" key=\"项目\">{tabProject}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"分期\" key=\"分期\"></Tabs.TabPane>\n              </Tabs>\n            </Col>\n          </Row>\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}