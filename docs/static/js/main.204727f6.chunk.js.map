{"version":3,"sources":["components/DataForm.js","components/ChartView.js","constants.js","components/AreaTable.js","components/AreaView.js","components/CityTable.js","components/CityView.js","components/ProjectTable.js","utils.js","components/ProjectView.js","App.js","serviceWorker.js","index.js"],"names":["DataForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","compareToStartDate","rule","value","callback","form","getFieldValue","compareToEndDate","state","fileList","startStatistic","bind","assertThisInitialized","_this2","Promise","resolve","reject","validateFields","err","values","_this3","validateForm","then","startDate","Date","set","hour","minute","second","endDate","onStart","catch","_this4","getFieldDecorator","react_default","a","createElement","es_form","layout","row","col","span","Item","label","labelCol","wrapperCol","rules","required","message","upload","accept","multiple","beforeUpload","file","setState","_ref","toConsumableArray","concat","onRemove","_ref2","index","indexOf","newFileList","slice","splice","es_button","validator","date_picker","offset","loading","type","onClick","style","margin","onExport","React","Component","defaultPorps","WrapDataForm","create","ChartView","core_default","echarts","option","title","text","left","textStyle","top","color","tooltip","trigger","formatter","series","name","radius","data","cityOpenData","secondCategoryOpenData","cityNewAddedAcceptData","secondCategoryNewAddedAcceptData","axisPointer","crossStyle","toolbox","feature","dataView","show","readOnly","magicType","restore","saveAsImage","xAxis","cities","yAxis","min","max","barMaxWidth","cityAcceptTotalData","yAxisIndex","cityCloseRateData","cityCloseAverageHandleTimeData","cityOpenAverageHandleTimeData","TICKET_SYSTEM_COUNT","TICKET_ACCEPT","TICKET_OPEN","TICKET_VALIDATE","TICKET_PAUSE","TICKET_INVALID","TICKET_CLOSE","TICKET_CLOSE_NORMAL","TICKET_CLOSE_ABNORMAL","TICKET_CLOSE_ON_TIME","TICKET_RESPONSE_IN_30_MIN","TICKET_RESPONSE_IN_30_HOUR","TICKET_CLOSE_PROCESS_TIME","TICKET_OPEN_PROCESS_TIME","DEFAULT_STATISTIC_ITEMS","KEY_REPORT_TIME","KEY_PROJECT_NAME","KEY_SECOND_CATEGORY","KEY_TICKET_STATUS","KEY_IS_PROCESS_EXCCED","KEY_FIRST_RESPONSE_TIME","KEY_PROCESS_TIME","KEY_CLOSE_TIME","KEY_STATISTIC_ITEM","KEY_TICKET_TOTAL","KEY_CITY_NAME","DEFAULT_SECOND_CATEGORIES","NEW_ADD_CLOSE_RATE","REMAIN_CLOSE_RATE","OVERALL_CLOSE_RATE","RESPONSE_IN_30_MIN_RATE","RESPONSE_IN_30_HOUR_RATE","CLOSE_ON_TIME_RATE","TOTAL_OVERALL_CLOSE_RATE","RATE_STATISTIC_ITEMS","STATISTIC_PERIOD_ADD","STATISTIC_BEFORE_PERIOD_REMAIN","STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_THIS_YEAR_TOTAL","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN","STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL","STATISTIC_BEFORE_PERIOD_NEED_HANDLE","STATISTIC_BEFORE_PERIOD_TOTAL","STATISTIC_PERIOD_RATE","STAGES","AreaTable","otherColumns","map","item","es_table","Column","dataIndex","key","width","currentPageData","dataSource","pagination","pageSize","scroll","y","size","AreaView","components_AreaTable","periodNewAddedData","thisYearBeforePeriodData","thisYearBeforePeriodTotalData","thisYearTotalData","lastYearBeforePeriodData","lastYearBeforePeriodTotalData","beforePeriodNeedHandleData","periodTotalData","rateData","CityTable","cityColumn","filteredCities","length","filter","defaultProps","CityView","filterCities","es_select","mode","onChange","city","Option","components_CityTable","ProjectTable","projectColumn","filteredProjects","filterProjectName","projectName","sub","match","substring","parseTime","timeString","time","day","window","parseInt","filterProjectStage","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","stage","return","formatToTable","tableData","rowKey","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","statisticItem","rowData","_arr","_i","secondCategory","push","formatToAreaTable","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_arr2","_i2","formatToRateTable","_arr3","_i3","_arr4","_i4","formatToAreaTateTable","_arr5","_i5","_arr6","_i6","ProjectView","filterCity","projectData","projects","project","filterProjects","components_ProjectTable","periodNewAddedResult","thisYearBeforePeriodResult","thisYearBeforePeriodTotalResult","thisYearTotalResult","lastYearBeforePeriodResult","lastYearBeforePeriodTotalResult","beforePeriodNeedHandleResult","periodTotalResult","rateResult","TICKET_STATUS_IN_PROGRESS","TICKET_STATUS_PAUSE","TICKET_STATUS_VALIDATE","TICKET_STATUS_CLOSE","TICKET_STATUS_ABNORMAL_CLOSE","TICKET_STATUS_INVALID","NO","initProjectRate","itemName","initProject","isInProgress","ticketStatus","statisticRate","statisticMap","rateMap","toFixed","statisticCityRate","globalRowKey","formatCityData","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","formatToCityRateTable","_arr7","_i7","mergeStageResult","resultArray","filterFunc","mergeResult","forEach","result","filteredProjectName","_arr8","_i8","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","ticketCloseCount","ticketCloseProcessTime","ticketOpenProcessTime","ticketOpenCount","Number","mergeProjectResult","_arr9","_i9","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","statisticCity","closeTimeStart","closeTimeEnd","dataMap","ticket","ticketStatistic","ticketCloseTime","moment","_parseTime","_parseTime2","_parseTime3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","statistic","reportTime","yearStartDate","month","date","thisYearbeforePeriodTickets","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_parseTime4","_parseTime5","_parseTime6","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","statisticThisYearBeforePeriodTickets","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","statisticThisYearBeforeStartDateTotalTickets","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_parseTime13","_parseTime14","_parseTime15","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","statisticThisYearTotalTickets","lastYearBeforePeriodTickets","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","_parseTime7","_parseTime8","_parseTime9","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","statisticLastYearBeforePeriodTickets","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","_parseTime10","_parseTime11","_parseTime12","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","statisticLastYearBeforePeriodTotalTickets","_arr10","_i10","_iteratorNormalCompletion24","_didIteratorError24","_iteratorError24","_step24","_iterator24","_arr11","_i11","_iteratorNormalCompletion25","_didIteratorError25","_iteratorError25","_step25","_iterator25","stageRateResult","stageResult","projectResult","projectRateResult","cityResult","cityRateResult","App","start","fileReader","FileReader","readFile","onload","event","workbook","XLSX","read","target","sheet","Sheets","SheetNames","cityName","utils","sheet_to_json","blankrows","readAsBinaryString","readExcels","cityData","allCities","allCityResult","_loop","objectSpread","defineProperty","areaResult","table","areaRateResult","areaData","_iteratorNormalCompletion26","_didIteratorError26","_iteratorError26","_step26","_iterator26","_iteratorNormalCompletion27","_didIteratorError27","_iteratorError27","_step27","_iterator27","console","log","closeRate","exportExcel","header","newAddedData","thisYearBeforeStartData","sheet1","json_to_sheet","sheet2","sheet3","sheet4","sheet5","sheet6","sheet7","sheet8","sheet9","book_new","book_append_sheet","writeFile","now","format","error","tabChart","components_ChartView","tabArea","components_AreaView","tabCity","components_CityView","tabProject","components_ProjectView","tabStage","locale_provider","locale","zh_CN","className","components_DataForm","tabs","TabPane","tab","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.204727f6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Row, Col, Form, Upload, Button, DatePicker } from 'antd';\n\nclass DataForm extends React.Component {\n  static defaultPorps = {\n    onStart: () => {},\n    onExport: () => {}\n  }\n  static propTypes = {\n    onStart: PropTypes.func,\n    onExport: PropTypes.func\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileList: []\n    };\n    this.startStatistic = this.startStatistic.bind(this);\n  }\n\n  validateForm() {\n    return new Promise((resolve, reject) => {\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject();\n        }\n      })\n    });\n  }\n\n  startStatistic() {\n    this.validateForm().then(() => {\n      const form = this.props.form;\n      let startDate = new Date(form.getFieldValue('startDate').set({ hour: 0, minute: 0, second: 0 }));\n      let endDate = new Date(form.getFieldValue('endDate').set({ hour: 23, minute: 59, second: 59 }));\n      this.props.onStart(this.state.fileList, startDate, endDate);\n    }).catch(() => {});\n  }\n\n  compareToStartDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value < form.getFieldValue('startDate')) {\n      callback('结束时间应大于开始时间!');\n    } else {\n      callback();\n    }\n  }\n\n  compareToEndDate = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value > form.getFieldValue('endDate')) {\n      callback('开始时间应小于结束时间!');\n    } else {\n      callback();\n    }\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form layout=\"horizontal\">\n        <Row>\n          <Col span={12}>\n            <Form.Item\n              label=\"请选择文件\"\n              labelCol={{ span: 8 }}\n              wrapperCol={{ span: 16 }}\n            >\n              { \n                getFieldDecorator('files', {\n                  rules: [{ required: true, message: '请选择要统计的文件!' }]\n                })(\n                  <Upload\n                    accept=\".xls,xlsx\"\n                    multiple\n                    fileList={this.state.fileList}\n                    beforeUpload={(file) => {\n                      this.setState(({ fileList }) => {\n                        return { fileList : [...fileList, file] };\n                      });\n                      return false;\n                    }}\n                    onRemove={(file) => {\n                      this.setState(({ fileList }) => {\n                        const index = fileList.indexOf(file);\n                        const newFileList = fileList.slice();\n                        newFileList.splice(index, 1);\n                        return {\n                          fileList: newFileList\n                        };\n                      });\n                    }}\n                  >\n                    <Button>支持文件格式: .xls, .xlsx</Button>\n                  </Upload>\n                )\n              }   \n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={8}>\n            <Form.Item\n              label='统计周期开始时间'\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('startDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期开始时间' },\n                    { validator: this.compareToEndDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <Form.Item\n              label=\"统计周期结束时间\"\n              labelCol={{ span: 12 }}\n              wrapperCol={{ span: 12 }}\n            >\n              {\n                getFieldDecorator('endDate', {\n                  rules: [\n                    { required: true, message: '请选择统计周期结束时间' },\n                    { validator: this.compareToStartDate }\n                  ]\n                })(<DatePicker />)\n              }\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col offset={4}>\n            <Button loading={this.props.loading} type=\"primary\" onClick={this.startStatistic}>\n              {\n                this.props.loading ? '正在统计...': '开始统计'\n              }\n            </Button>\n            <Button style={{ margin: '0 20px' }} onClick={this.props.onExport}>导出Excel表格</Button>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\nconst WrapDataForm = Form.create()(DataForm);\n\nexport default WrapDataForm;\n","import React from 'react';\r\nimport { Row, Col } from 'antd';\r\n// import the core library.\r\nimport ReactEchartsCore from 'echarts-for-react/lib/core';\r\n\r\n// then import echarts modules those you have used manually.\r\nimport echarts from 'echarts/lib/echarts';\r\nimport 'echarts/lib/chart/line';\r\nimport 'echarts/lib/chart/bar';\r\nimport 'echarts/lib/chart/pie';\r\n// import 'echarts/lib/chart/scatter';\r\n// import 'echarts/lib/chart/radar';\r\n\r\n// import 'echarts/lib/chart/map';\r\n// import 'echarts/lib/chart/treemap';\r\n// import 'echarts/lib/chart/graph';\r\n// import 'echarts/lib/chart/gauge';\r\n// import 'echarts/lib/chart/funnel';\r\n// import 'echarts/lib/chart/parallel';\r\n// import 'echarts/lib/chart/sankey';\r\n// import 'echarts/lib/chart/boxplot';\r\n// import 'echarts/lib/chart/candlestick';\r\n// import 'echarts/lib/chart/effectScatter';\r\n// import 'echarts/lib/chart/lines';\r\n// import 'echarts/lib/chart/heatmap';\r\n\r\n// import 'echarts/lib/component/graphic';\r\n// import 'echarts/lib/component/grid';\r\n// import 'echarts/lib/component/legend';\r\nimport 'echarts/lib/component/tooltip';\r\n// import 'echarts/lib/component/polar';\r\n// import 'echarts/lib/component/geo';\r\n// import 'echarts/lib/component/parallel';\r\n// import 'echarts/lib/component/singleAxis';\r\n// import 'echarts/lib/component/brush';\r\n\r\nimport 'echarts/lib/component/title';\r\n\r\n// import 'echarts/lib/component/dataZoom';\r\n// import 'echarts/lib/component/visualMap';\r\n\r\n// import 'echarts/lib/component/markPoint';\r\n// import 'echarts/lib/component/markLine';\r\n// import 'echarts/lib/component/markArea';\r\n\r\n// import 'echarts/lib/component/timeline';\r\n// import 'echarts/lib/component/toolbox';\r\n\r\n// import 'zrender/lib/vml/vml';\r\n\r\nfunction ChartView(props) {\r\n  return (\r\n    <Row>\r\n      <Col span={12}>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关城市分布图',\r\n              left: 'center',\r\n              textStyle: {\r\n                left: 'center',\r\n                top: 10,\r\n                color: '#333'\r\n              }\r\n            },\r\n            tooltip : {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)'\r\n                },\r\n                data: props.cityOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n      <Col span={12}>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关二级分类分布图',\r\n              left: 'center',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip : {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            series: [\r\n              {\r\n                name: '二级分类',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)'\r\n                },\r\n                data: props.secondCategoryOpenData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n      <Col span={12}>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '新增维修城市分布图',\r\n              left: 'center',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip : {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)'\r\n                },\r\n                data: props.cityNewAddedAcceptData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n      <Col span={12}>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '新增维修二级分类分布图',\r\n              left: 'center',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip : {\r\n              trigger: 'item',\r\n              formatter: '{b}:{c}({d}%)'\r\n            },\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'pie',\r\n                radius: '60%',\r\n                label: {\r\n                  formatter: '{b}:{c}({d}%)'\r\n                },\r\n                data: props.secondCategoryNewAddedAcceptData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n      <Col span={24}>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '受理累计城市分布图',\r\n              left: 'center',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                    color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                dataView: {show: true, readOnly: false},\r\n                magicType: {show: true, type: ['line', 'bar']},\r\n                restore: {show: true},\r\n                saveAsImage: {show: true}\r\n              }\r\n            },\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '新增受理'\r\n              },\r\n              {\r\n                type: 'value',\r\n                name: '关闭率',\r\n                min: 0,\r\n                max: 1\r\n              }\r\n            ],\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                data: props.cityAcceptTotalData\r\n              },\r\n              {\r\n                name: '关闭率',\r\n                type: 'line',\r\n                yAxisIndex: 1,\r\n                data: props.cityCloseRateData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n      <Col span={24}>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '已关闭平均处理时长城市分布图',\r\n              left: 'center',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                    color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                dataView: {show: true, readOnly: false},\r\n                magicType: {show: true, type: ['line', 'bar']},\r\n                restore: {show: true},\r\n                saveAsImage: {show: true}\r\n              }\r\n            },\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                data: props.cityCloseAverageHandleTimeData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n      <Col span={24}>\r\n        <ReactEchartsCore\r\n          echarts={echarts}\r\n          option={{\r\n            title: {\r\n              text: '剩余未关平均处理时长城市分布图',\r\n              left: 'center',\r\n              textStyle: {\r\n                color: '#000000'\r\n              }\r\n            },\r\n            tooltip: {\r\n              trigger: 'axis',\r\n              axisPointer: {\r\n                type: 'cross',\r\n                crossStyle: {\r\n                    color: '#999'\r\n                }\r\n              }\r\n            },\r\n            toolbox: {\r\n              feature: {\r\n                dataView: {show: true, readOnly: false},\r\n                magicType: {show: true, type: ['line', 'bar']},\r\n                restore: {show: true},\r\n                saveAsImage: {show: true}\r\n              }\r\n            },\r\n            xAxis: [\r\n              {\r\n                type: 'category',\r\n                data: props.cities,\r\n                axisPointer: {\r\n                  type: 'shadow'\r\n                }\r\n              },\r\n            ],\r\n            yAxis: [\r\n              {\r\n                type: 'value',\r\n                name: '处理时长（天）'\r\n              },\r\n            ],\r\n            series: [\r\n              {\r\n                name: '城市',\r\n                type: 'bar',\r\n                barMaxWidth: 20,\r\n                data: props.cityOpenAverageHandleTimeData\r\n              }\r\n            ]\r\n          }}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default ChartView;\r\n","// statistic items\r\nexport const TICKET_SYSTEM_COUNT = '系统单数';\r\nexport const TICKET_ACCEPT = '受理';\r\nexport const TICKET_OPEN = '剩余未关';\r\nexport const TICKET_VALIDATE = '待复验';\r\nexport const TICKET_PAUSE = '暂停处理';\r\nexport const TICKET_INVALID = '判定无效';\r\nexport const TICKET_CLOSE = '关闭';\r\nexport const TICKET_CLOSE_NORMAL = '正常关闭';\r\nexport const TICKET_CLOSE_ABNORMAL = '非正常关闭';\r\nexport const TICKET_CLOSE_ON_TIME = '及时关闭';\r\nexport const TICKET_RESPONSE_IN_30_MIN = '响应及时单（0.5h）';\r\nexport const TICKET_RESPONSE_IN_30_HOUR = '响应及时单（30h）';\r\nexport const TICKET_CLOSE_PROCESS_TIME = '已关平均处理时长（天）';\r\nexport const TICKET_OPEN_PROCESS_TIME = '剩余未关平均处理时长（天）';\r\n\r\nexport const DEFAULT_STATISTIC_ITEMS = [\r\n  TICKET_SYSTEM_COUNT,\r\n  TICKET_ACCEPT,\r\n  TICKET_OPEN,\r\n  TICKET_VALIDATE,\r\n  TICKET_PAUSE,\r\n  TICKET_INVALID,\r\n  TICKET_CLOSE,\r\n  TICKET_CLOSE_NORMAL,\r\n  TICKET_CLOSE_ABNORMAL,\r\n  TICKET_CLOSE_ON_TIME,\r\n  TICKET_RESPONSE_IN_30_MIN,\r\n  TICKET_RESPONSE_IN_30_HOUR,\r\n  TICKET_CLOSE_PROCESS_TIME,\r\n  TICKET_OPEN_PROCESS_TIME\r\n];\r\n\r\n// data key\r\nexport const KEY_REPORT_TIME = '报事时间';\r\nexport const KEY_PROJECT_NAME = '项目';\r\nexport const KEY_SECOND_CATEGORY = '二级分类';\r\nexport const KEY_TICKET_STATUS = '工单状态';\r\nexport const KEY_IS_PROCESS_EXCCED = '是否超期处理';\r\nexport const KEY_FIRST_RESPONSE_TIME = '首次响应时长';\r\nexport const KEY_PROCESS_TIME = '处理时长';\r\nexport const KEY_CLOSE_TIME = '实际关闭时间';\r\nexport const KEY_STATISTIC_ITEM = '统计项目';\r\nexport const KEY_TICKET_TOTAL = '合计';\r\nexport const KEY_CITY_NAME = '城市';\r\n\r\n// all second categories\r\nexport const DEFAULT_SECOND_CATEGORIES = [\r\n  '墙地面及天棚',\r\n  '渗漏',\r\n  '门窗',\r\n  '强弱电',\r\n  '给排水',\r\n  '厨房设备',\r\n  '卫生设备',\r\n  '制冷设备',\r\n  '固装精装部品',\r\n  '公共区域',\r\n  '其他'\r\n];\r\n\r\nexport const NEW_ADD_CLOSE_RATE = '新增关闭率';\r\nexport const REMAIN_CLOSE_RATE = '遗留关闭率';\r\nexport const OVERALL_CLOSE_RATE = '总体关闭率';\r\nexport const RESPONSE_IN_30_MIN_RATE = '响应及时率（0.5h）'\r\nexport const RESPONSE_IN_30_HOUR_RATE = '响应及时率（30h）';\r\nexport const CLOSE_ON_TIME_RATE = '及时关闭率';\r\nexport const TOTAL_OVERALL_CLOSE_RATE = '累计总体关闭率';\r\n\r\nexport const RATE_STATISTIC_ITEMS = [\r\n  REMAIN_CLOSE_RATE,\r\n  NEW_ADD_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE\r\n];\r\n\r\nexport const STATISTIC_PERIOD_ADD = '本年度统计周期内新增';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN = '本年度截止统计周期前遗留';\r\nexport const STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL = '本年度截止统计周期前遗留累计';\r\nexport const STATISTIC_THIS_YEAR_TOTAL = '本年度累计';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN = '上年度截至统计周期前遗留';\r\nexport const STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL = '上年度截至统计周期前遗留累计';\r\nexport const STATISTIC_BEFORE_PERIOD_NEED_HANDLE = '截至本年度统计周期内需处理';\r\nexport const STATISTIC_BEFORE_PERIOD_TOTAL = '截至本年度统计周期累计';\r\nexport const STATISTIC_PERIOD_RATE = '本年度统计周期内';\r\n\r\nexport const STAGES = [\r\n  '一期',\r\n  '二期',\r\n  '三期',\r\n  '四期',\r\n  '五期',\r\n  '六期',\r\n  '七期',\r\n  '八期',\r\n  '九期',\r\n  '十期'\r\n];","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction AreaTable(props) {\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default AreaTable;\r\n","import React from 'react';\r\nimport { Row } from 'antd';\r\nimport AreaTable from './AreaTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass AreaView extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_PERIOD_ADD}\r\n            data={this.props.periodNewAddedData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n            data={this.props.thisYearBeforePeriodData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n            data={this.props.thisYearBeforePeriodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_THIS_YEAR_TOTAL}\r\n            data={this.props.thisYearTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n            data={this.props.lastYearBeforePeriodData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n            data={this.props.lastYearBeforePeriodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n            data={this.props.beforePeriodNeedHandleData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n            data={this.props.periodTotalData}\r\n          />\r\n        </div>\r\n        <div style={{ margin: '20px 0' }}>\r\n          <AreaTable\r\n            title={STATISTIC_PERIOD_RATE}\r\n            data={this.props.rateData}\r\n          />\r\n        </div>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AreaView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_CITY_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction CityTable(props) {\r\n  const cityColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_CITY_NAME}\r\n      title={KEY_CITY_NAME}\r\n      key={KEY_CITY_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredCities.length > 0 ?\r\n        props.data.filter(item => props.filteredCities.indexOf(item[KEY_CITY_NAME]) != -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {cityColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nCityTable.defaultProps = {\r\n  filteredCities: []\r\n}\r\n\r\nexport default CityTable;\r\n","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport CityTable from './CityTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\n\r\nclass CityView extends React.Component {\r\n  static defaultProps = {\r\n    cities: []\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredCities: []\r\n    }\r\n  }\r\n\r\n  filterCities = (filteredCities) => {\r\n    if (filteredCities != null && filteredCities.length > 0) {\r\n      this.setState({\r\n        filteredCities: filteredCities\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredCities: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的城市'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterCities}\r\n                >\r\n                  {\r\n                    this.props.cities.map((city) => (\r\n                      <Select.Option key={city}>{city}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={this.props.periodNewAddedData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.thisYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.thisYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={this.props.thisYearTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={this.props.lastYearBeforePeriodData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={this.props.lastYearBeforePeriodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={this.props.beforePeriodNeedHandleData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={this.props.periodTotalData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <CityTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={this.props.rateData}\r\n              filteredCities={this.state.filteredCities}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CityView;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport {\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES,\r\n  KEY_TICKET_TOTAL\r\n} from '../constants';\r\n\r\nfunction ProjectTable(props) {\r\n  const projectColumn = (\r\n    <Table.Column\r\n      dataIndex={KEY_PROJECT_NAME}\r\n      title={KEY_PROJECT_NAME}\r\n      key={KEY_PROJECT_NAME}\r\n      width={300}\r\n    />\r\n  );\r\n\r\n  const otherColumns = [KEY_STATISTIC_ITEM,\r\n    ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL].map((item) => (\r\n    <Table.Column\r\n      dataIndex={item}\r\n      title={item}\r\n      key={item}\r\n      width={300}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table\r\n      title={(currentPageData) => { return props.title }}\r\n      dataSource={props.filteredProjects.length > 0 ?\r\n        props.data.filter(item => props.filteredProjects.indexOf(item[KEY_PROJECT_NAME]) != -1) : props.data}\r\n      pagination={{ pageSize: 50 }}\r\n      scroll={{ y: 400 }}\r\n      size='small'\r\n    >\r\n      {projectColumn}\r\n      {otherColumns}\r\n    </Table>\r\n  );\r\n}\r\n\r\nProjectTable.defaultProps = {\r\n  filteredProjects: []\r\n}\r\n\r\nexport default ProjectTable;\r\n","import {\r\n  DEFAULT_STATISTIC_ITEMS,\r\n  KEY_TICKET_TOTAL,\r\n  NEW_ADD_CLOSE_RATE,\r\n  REMAIN_CLOSE_RATE,\r\n  OVERALL_CLOSE_RATE,\r\n  RESPONSE_IN_30_MIN_RATE,\r\n  RESPONSE_IN_30_HOUR_RATE,\r\n  CLOSE_ON_TIME_RATE,\r\n  TOTAL_OVERALL_CLOSE_RATE,\r\n  STAGES,\r\n  KEY_PROJECT_NAME,\r\n  KEY_STATISTIC_ITEM,\r\n  DEFAULT_SECOND_CATEGORIES\r\n} from './constants';\r\n\r\nexport function filterProjectName(projectName) {\r\n  let reg = /\\(.*?\\)|（.*?）/;\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function parseTime(timeString) {\r\n  let time = timeString.match(/\\d+/g);\r\n  let day = 0, hour = 0, min = 0;\r\n  if (time && time.length > 0) {\r\n    day = window.parseInt(time[0]);\r\n    hour = window.parseInt(time[1]);\r\n    min = window.parseInt(time[2]);\r\n  }\r\n  return { day, hour, min };\r\n}\r\n\r\nexport function filterProject(projectName, reg) {\r\n  let sub = projectName.match(reg);\r\n  if (sub) {\r\n    let newName = projectName.substring(0, projectName.indexOf(sub));\r\n    return newName;\r\n  } else {\r\n    return projectName;\r\n  }\r\n}\r\n\r\nexport function filterProjectStage(projectName) {\r\n  let filteredName = null;\r\n  for (let stage of STAGES) {\r\n    if (projectName.indexOf(stage) != -1) {\r\n      filteredName = projectName.substring(0, projectName.indexOf(stage));\r\n      return filteredName;\r\n    }\r\n  }\r\n  return projectName;\r\n}\r\n\r\nexport function formatToTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let projectName in data) {\r\n    for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = projectName;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[secondCategory] = data[secondCategory][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToRateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let projectName in data) {\r\n    for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n      RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n      let rowData = {};\r\n      rowKey++;\r\n      rowData.key = rowKey;\r\n      rowData[KEY_PROJECT_NAME] = projectName;\r\n      rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n        rowData[secondCategory] = data[projectName][secondCategory][statisticItem]\r\n      }\r\n      tableData.push(rowData);\r\n    }\r\n  }\r\n  return tableData;\r\n}\r\n\r\nexport function formatToAreaTateTable(data) {\r\n  let tableData = [];\r\n  var rowKey = 0;\r\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\r\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\r\n    let rowData = {};\r\n    rowKey++;\r\n    rowData.key = rowKey;\r\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\r\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\r\n      rowData[secondCategory] = data[secondCategory][statisticItem]\r\n    }\r\n    tableData.push(rowData);\r\n  }\r\n  return tableData;\r\n}","import React from 'react';\r\nimport { Row, Col, Form, Select } from 'antd';\r\nimport ProjectTable from './ProjectTable';\r\nimport {\r\n  STATISTIC_PERIOD_ADD,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_THIS_YEAR_TOTAL,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\r\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\r\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\r\n  STATISTIC_BEFORE_PERIOD_TOTAL,\r\n  STATISTIC_PERIOD_RATE\r\n} from '../constants';\r\nimport {\r\n  formatToTable,\r\n  formatToRateTable\r\n} from '../utils';\r\n\r\nclass ProjectView extends React.Component {\r\n  static defaultProps = {\r\n    cities: [],\r\n    projectData: {}\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      projects: [],\r\n      data: {}\r\n    }\r\n  }\r\n\r\n  filterCity = (city) => {\r\n    if (this.props.projectData[city] != null) {\r\n      this.setState({\r\n        data: this.props.projectData[city]\r\n      });\r\n      let projects = [];\r\n      for (let item in this.props.projectData[city]) {\r\n        for (let project in this.props.projectData[city][item]) {\r\n          if (projects.indexOf(project) == -1) {\r\n            projects = [...projects, project];\r\n          }\r\n        }\r\n      }\r\n      this.setState({\r\n        projects: projects\r\n      });\r\n    }\r\n  }\r\n\r\n  filterProjects = (projects) => {\r\n    if (projects.length > 0) {\r\n      this.setState({\r\n        filteredProjects: projects\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredProjects: []\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要显示的城市'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterCity}\r\n                >\r\n                  {\r\n                    this.props.cities.map((city) => (\r\n                      <Select.Option key={city}>{city}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={16}>\r\n              <Form.Item\r\n                label='请选择要过滤的项目'\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 16 }}\r\n              >\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  style={{ width: '100%' }}\r\n                  onChange={this.filterProjects}\r\n                >\r\n                  {\r\n                    this.state.projects.map((project) => (\r\n                      <Select.Option key={project}>{project}</Select.Option>\r\n                    ))\r\n                  }\r\n                </Select>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n        <Row>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_ADD}\r\n              data={formatToTable(this.state.data.periodNewAddedResult)}\r\n              filteredProjects={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.state.data.thisYearBeforePeriodResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.state.data.thisYearBeforePeriodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_THIS_YEAR_TOTAL}\r\n              data={formatToTable(this.state.data.thisYearTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN}\r\n              data={formatToTable(this.state.data.lastYearBeforePeriodResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL}\r\n              data={formatToTable(this.state.data.lastYearBeforePeriodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_NEED_HANDLE}\r\n              data={formatToTable(this.state.data.beforePeriodNeedHandleResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_BEFORE_PERIOD_TOTAL}\r\n              data={formatToTable(this.state.data.periodTotalResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n          <div style={{ margin: '20px 0' }}>\r\n            <ProjectTable\r\n              title={STATISTIC_PERIOD_RATE}\r\n              data={formatToRateTable(this.state.data.rateResult)}\r\n              filteredCities={this.state.filteredProjects}\r\n            />\r\n          </div>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProjectView;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport DataForm from './components/DataForm';\nimport ChartView from './components/ChartView';\nimport AreaView from './components/AreaView';\nimport CityView from './components/CityView';\nimport ProjectView from './components/ProjectView';\nimport XLSX from 'xlsx';\nimport { Row, Col, message, LocaleProvider, Tabs } from 'antd';\nimport zh_CN from 'antd/lib/locale-provider/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport {\n  TICKET_SYSTEM_COUNT,\n  TICKET_ACCEPT,\n  TICKET_OPEN,\n  TICKET_VALIDATE,\n  TICKET_PAUSE,\n  TICKET_INVALID,\n  TICKET_CLOSE,\n  TICKET_CLOSE_NORMAL,\n  TICKET_CLOSE_ABNORMAL,\n  TICKET_CLOSE_ON_TIME,\n  TICKET_RESPONSE_IN_30_MIN,\n  TICKET_RESPONSE_IN_30_HOUR,\n  TICKET_CLOSE_PROCESS_TIME,\n  TICKET_OPEN_PROCESS_TIME,\n  DEFAULT_STATISTIC_ITEMS,\n  KEY_REPORT_TIME,\n  KEY_PROJECT_NAME,\n  KEY_SECOND_CATEGORY,\n  KEY_TICKET_STATUS,\n  KEY_IS_PROCESS_EXCCED,\n  KEY_FIRST_RESPONSE_TIME,\n  KEY_PROCESS_TIME,\n  KEY_CLOSE_TIME,\n  DEFAULT_SECOND_CATEGORIES,\n  KEY_STATISTIC_ITEM,\n  KEY_TICKET_TOTAL,\n  KEY_CITY_NAME,\n  STATISTIC_PERIOD_ADD,\n  STATISTIC_BEFORE_PERIOD_REMAIN,\n  STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_THIS_YEAR_TOTAL,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN,\n  STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL,\n  STATISTIC_BEFORE_PERIOD_NEED_HANDLE,\n  STATISTIC_BEFORE_PERIOD_TOTAL,\n  STATISTIC_PERIOD_RATE,\n  STAGES,\n  NEW_ADD_CLOSE_RATE,\n  REMAIN_CLOSE_RATE,\n  OVERALL_CLOSE_RATE,\n  RESPONSE_IN_30_MIN_RATE,\n  RESPONSE_IN_30_HOUR_RATE,\n  CLOSE_ON_TIME_RATE,\n  TOTAL_OVERALL_CLOSE_RATE,\n  RATE_STATISTIC_ITEMS\n} from './constants';\n\nimport {\n  filterProjectName,\n  parseTime,\n  filterProjectStage,\n  formatToTable,\n  formatToAreaTable,\n  formatToAreaTateTable\n} from './utils';\n\n// ticket status\nconst TICKET_STATUS_IN_PROGRESS = '处理中';\nconst TICKET_STATUS_PAUSE = '暂停处理';\nconst TICKET_STATUS_VALIDATE = '待复验';\nconst TICKET_STATUS_CLOSE = '已关闭';\nconst TICKET_STATUS_ABNORMAL_CLOSE = '非正常关闭';\nconst TICKET_STATUS_INVALID = '判定无效';\n\nconst YES = '是';\nconst NO = '否';\n\nfunction initProjectRate() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of RATE_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction initProject() {\n  let map = {};\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    map[secondCategory] = {};\n    for (let itemName of DEFAULT_STATISTIC_ITEMS) {\n      map[secondCategory][itemName] = 0;\n    }\n  }\n  return map;\n}\n\nfunction isInProgress(ticketStatus) {\n  return ticketStatus.indexOf(TICKET_STATUS_IN_PROGRESS) === 0;\n}\n\n// 统计周期内新增\nfunction statistic(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭 + 已关闭 + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 统计周期前遗留\nfunction statisticThisYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计周期内） + 已关闭（关单时间在统计周期内）\n    //    + 暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n        ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n      }\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\n// 本年度统计周期前遗留累计\nfunction statisticThisYearBeforeStartDateTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE ||\n      ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n  }\n\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticLastYearBeforePeriodTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if ((ticketStatus === TICKET_STATUS_CLOSE ||\n      ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) && ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      if (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd) {\n        ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n      }\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticThisYearTotalTickets(data, closeTimeStart, closeTimeEnd) {\n  // statistic data\n  let dataMap = {};\n\n  for (let ticket of data) {\n    let projectName = filterProjectName(ticket[KEY_PROJECT_NAME]);\n\n    if (dataMap[projectName] == null) {\n      dataMap[projectName] = initProject();\n    }\n    let secondCategory = ticket[KEY_SECOND_CATEGORY];\n\n    let ticketStatistic = dataMap[projectName][secondCategory];\n\n    let ticketStatus = ticket[KEY_TICKET_STATUS];\n    let ticketCloseTime = moment(ticket[KEY_CLOSE_TIME]);\n\n    // 受理 = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） + 暂停处理\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_ACCEPT]++;\n    }\n\n    // 剩余未关 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus == TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      ticketStatistic[TICKET_OPEN]++;\n    }\n\n    // 待复验 = 处理中——待复验\n    if (isInProgress(ticketStatus) && ticketStatus.indexOf(TICKET_STATUS_VALIDATE) > 0) {\n      ticketStatistic[TICKET_VALIDATE]++;\n    }\n\n    // 暂停处理 = 暂停处理\n    if (ticketStatus === TICKET_STATUS_PAUSE) {\n      ticketStatistic[TICKET_PAUSE]++;\n    }\n\n    // 判定无效 = 判定无效\n    if (ticketStatus == TICKET_STATUS_INVALID) {\n      ticketStatistic[TICKET_INVALID]++;\n    }\n\n    // 关闭 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE]++;\n    }\n\n    // 正常关闭 = 已关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_NORMAL]++;\n    }\n\n    // 非正常关闭 = 非正常关闭（关单时间在统计周期内）\n    if (ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      ticketStatistic[TICKET_CLOSE_ABNORMAL]++;\n    }\n\n    // 及时关闭 = 已关闭（关单时间在统计周期内）（无超期） + 非正常关闭（关单时间在统计周期内）（无超期）\n    if (((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) &&\n      ticket[KEY_IS_PROCESS_EXCCED] === NO) {\n      ticketStatistic[TICKET_CLOSE_ON_TIME]++;\n    }\n\n    // 响应及时单（0.5h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                    暂停处理（首次响应时长）\n    // 响应及时单（30h) = 处理中 + 非正常关闭（关单时间在统计开始日期后） + 已关闭（关单时间在统计开始日期后） +\n    //                   暂停处理（首次响应时长）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      let { day, hour, min } = parseTime(ticket[KEY_FIRST_RESPONSE_TIME]);\n      if (day * 24 * 60 + hour * 60 + min <= 30) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_MIN]++\n      }\n      if (day * 24 * 60 + hour * 60 + min <= 30 * 60) {\n        ticketStatistic[TICKET_RESPONSE_IN_30_HOUR]++;\n      }\n    }\n\n    // 已关平均处理时长 = 已关闭（关单时间在统计周期内） + 非正常关闭（关单时间在统计周期内）\n    if ((ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart && ticketCloseTime <= closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_CLOSE_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 剩余未关平均处理时长 = 处理中 + 暂停处理 + 已关闭（关单时间统计结束日期后） + 非常长关闭（关单时间统计结束日期后）\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ((ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE || ticketStatus === TICKET_STATUS_CLOSE) &&\n        ticketCloseTime > closeTimeEnd)) {\n      let { day, hour, min } = parseTime(ticket[KEY_PROCESS_TIME]);\n      ticketStatistic[TICKET_OPEN_PROCESS_TIME] += (day + hour / 24 + min / 60 / 24);\n    }\n\n    // 系统单数 = 处理中 + 非正常关闭 + 已关闭 + 暂停处理 + 判定无效\n    if (isInProgress(ticketStatus) || ticketStatus === TICKET_STATUS_PAUSE ||\n      ticketStatus == TICKET_STATUS_INVALID ||\n      (ticketStatus === TICKET_STATUS_CLOSE || ticketStatus === TICKET_STATUS_ABNORMAL_CLOSE) &&\n      (ticketCloseTime >= closeTimeStart)) {\n      ticketStatistic[TICKET_SYSTEM_COUNT]++;\n    }\n  }\n\n  for (let projectName in dataMap) {\n    // get total for all second categories\n    for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n      for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n        dataMap[projectName][KEY_TICKET_TOTAL][statisticItem] += dataMap[projectName][secondCategory][statisticItem];\n      }\n    }\n\n    // get average process time\n    for (let secondCategory in dataMap[projectName]) {\n      let ticketCloseProcessTime = dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = dataMap[projectName][secondCategory][TICKET_CLOSE];\n      dataMap[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = dataMap[projectName][secondCategory][TICKET_OPEN];\n      dataMap[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return dataMap;\n}\n\nfunction statisticRate(statisticMap, statisticItem, rateMap) {\n  for (let projectName in statisticMap) {\n    if (rateMap[projectName] == null) {\n      rateMap[projectName] = initProjectRate();\n    }\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      if (statisticItem === NEW_ADD_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === REMAIN_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n            statisticMap[projectName][secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n      } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE_ON_TIME] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n        statisticMap[projectName][secondCategory][TICKET_ACCEPT] > 0) {\n        rateMap[projectName][secondCategory][statisticItem] =\n          (statisticMap[projectName][secondCategory][TICKET_CLOSE] /\n            statisticMap[projectName][secondCategory][TICKET_ACCEPT]).toFixed(4);\n      }\n    }\n  }\n}\n\nfunction statisticCityRate(statisticMap, statisticItem, rateMap) {\n  for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n    if ( rateMap[secondCategory] == null) {\n      rateMap[secondCategory] = {};\n    }\n    if (statisticItem === NEW_ADD_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === REMAIN_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_MIN_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_MIN] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === RESPONSE_IN_30_HOUR_RATE &&\n      statisticMap[secondCategory][TICKET_SYSTEM_COUNT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_RESPONSE_IN_30_HOUR] /\n          statisticMap[secondCategory][TICKET_SYSTEM_COUNT]).toFixed(4);\n    } else if (statisticItem === CLOSE_ON_TIME_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE_ON_TIME] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    } else if (statisticItem === TOTAL_OVERALL_CLOSE_RATE &&\n      statisticMap[secondCategory][TICKET_ACCEPT] > 0) {\n      rateMap[secondCategory][statisticItem] =\n        (statisticMap[secondCategory][TICKET_CLOSE] /\n          statisticMap[secondCategory][TICKET_ACCEPT]).toFixed(4);\n    }\n  }\n}\n\nfunction readExcels(fileList) {\n  return new Promise((resolve, reject) => {\n    let fileReader = new FileReader();\n    let data = {};\n\n    let readFile = (index) => {\n      if (index < fileList.length) {\n        fileReader.onload = (event) => {\n          let workbook = XLSX.read(event.target.result, { type: 'binary' });\n          let sheet = workbook.Sheets[workbook.SheetNames[0]];\n          let cityName = fileList[index].name.substring(0, fileList[index].name.indexOf('.'));\n          data[cityName] = XLSX.utils.sheet_to_json(sheet, { blankrows: false });\n          readFile(index + 1);\n        }\n        fileReader.readAsBinaryString(fileList[index]);\n      } else {\n        resolve(data);\n      }\n    };\n    readFile(0);\n  });\n}\n\nlet globalRowKey = 0;\n\nfunction formatCityData(data, city) {\n  let tableData = [];\n  for (let statisticItem of DEFAULT_STATISTIC_ITEMS) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction formatToCityRateTable(data, city) {\n  let tableData = [];\n  for (let statisticItem of [NEW_ADD_CLOSE_RATE, REMAIN_CLOSE_RATE, OVERALL_CLOSE_RATE,\n    RESPONSE_IN_30_MIN_RATE, RESPONSE_IN_30_HOUR_RATE, CLOSE_ON_TIME_RATE, TOTAL_OVERALL_CLOSE_RATE]) {\n    let rowData = {};\n    globalRowKey++;\n    rowData.key = globalRowKey;\n    rowData[KEY_CITY_NAME] = city;\n    rowData[KEY_STATISTIC_ITEM] = statisticItem;\n    for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n      rowData[secondCategory] = data[secondCategory][statisticItem];\n    }\n    tableData.push(rowData);\n  }\n  return tableData;\n}\n\nfunction mergeStageResult(resultArray, filterFunc) {\n  let mergeResult = {};\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      let filteredProjectName = filterFunc(projectName);\n      if (mergeResult[filteredProjectName] == null) {\n        mergeResult[filteredProjectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[filteredProjectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[filteredProjectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[filteredProjectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in mergeResult) {\n    for (let secondCategory in mergeResult[projectName]) {\n      let ticketCloseProcessTime = mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = mergeResult[projectName][secondCategory][TICKET_CLOSE];\n      mergeResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = mergeResult[projectName][secondCategory][TICKET_OPEN];\n      mergeResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n  return mergeResult;\n}\n\nfunction mergeProjectResult(resultArray) {\n  let mergeResult = initProject();\n  resultArray.forEach(function (result) {\n    for (let projectName in result) {\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            mergeResult[secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let secondCategory in mergeResult) {\n    let ticketCloseProcessTime = mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME];\n    let ticketCloseCount = mergeResult[secondCategory][TICKET_CLOSE];\n    mergeResult[secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n      ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n    let ticketOpenProcessTime = mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME];\n    let ticketOpenCount = mergeResult[secondCategory][TICKET_OPEN];\n    mergeResult[secondCategory][TICKET_OPEN_PROCESS_TIME] =\n      ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n  }\n\n  return mergeResult;\n}\n\n\nfunction statisticCity(data, startDate, endDate) {\n  // 统计分期\n  let periodNewAddedTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime >= startDate && reportTime <= endDate;\n  });\n  let periodNewAddedResult = statistic(periodNewAddedTickets, startDate, endDate);\n\n  let yearStartDate = moment(startDate).set({ month: 0, date: 1, hour: 0, minute: 0, second: 0 });\n  let thisYearbeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < startDate && reportTime >= yearStartDate;\n  });\n\n  let thisYearBeforePeriodResult = statisticThisYearBeforePeriodTickets(thisYearbeforePeriodTickets,\n    startDate, endDate);\n\n  let thisYearBeforePeriodTotalResult = statisticThisYearBeforeStartDateTotalTickets(\n    thisYearbeforePeriodTickets, yearStartDate, endDate);\n\n  let thisYearTotalTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime <= endDate && reportTime >= yearStartDate;\n  });\n  let thisYearTotalResult = statisticThisYearTotalTickets(thisYearTotalTickets,\n    yearStartDate, endDate);\n\n  let lastYearBeforePeriodTickets = data.filter((item) => {\n    let reportTime = moment(item[KEY_REPORT_TIME]);\n    let secondCategory = item[KEY_SECOND_CATEGORY];\n    return secondCategory != null && reportTime < yearStartDate;\n  });\n  let lastYearBeforePeriodResult = statisticLastYearBeforePeriodTickets(lastYearBeforePeriodTickets,\n    startDate, endDate);\n  \n  let lastYearBeforePeriodTotalResult = statisticLastYearBeforePeriodTotalTickets(lastYearBeforePeriodTickets,\n    yearStartDate, endDate);\n\n  let beforePeriodNeedHandleResult = {};\n  [periodNewAddedResult, thisYearBeforePeriodResult, lastYearBeforePeriodResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (beforePeriodNeedHandleResult[projectName] == null) {\n        beforePeriodNeedHandleResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            beforePeriodNeedHandleResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in beforePeriodNeedHandleResult) {\n    for (let secondCategory in beforePeriodNeedHandleResult[projectName]) {\n      let ticketCloseProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN];\n      beforePeriodNeedHandleResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let periodTotalResult = {};\n  [lastYearBeforePeriodTotalResult, thisYearTotalResult].forEach(function (result) {\n    for (let projectName in result) {\n      if (periodTotalResult[projectName] == null) {\n        periodTotalResult[projectName] = initProject();\n      }\n      for (let secondCategory of [...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL]) {\n        for (let item of DEFAULT_STATISTIC_ITEMS) {\n          if (item === TICKET_CLOSE_PROCESS_TIME) {\n            let ticketCloseCount = result[projectName][secondCategory][TICKET_CLOSE];\n            let ticketCloseProcessTime = result[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n            periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n              ticketCloseCount * ticketCloseProcessTime;\n          } else if (item === TICKET_OPEN_PROCESS_TIME) {\n            let ticketOpenProcessTime = result[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n            let ticketOpenCount = result[projectName][secondCategory][TICKET_OPEN];\n            periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n              ticketOpenCount * ticketOpenProcessTime;\n          }\n          else {\n            periodTotalResult[projectName][secondCategory][item] +=\n              result[projectName][secondCategory][item];\n          }\n        }\n      }\n    }\n  });\n  // get average process time\n  for (let projectName in periodTotalResult) {\n    for (let secondCategory in periodTotalResult[projectName]) {\n      let ticketCloseProcessTime = periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n      let ticketCloseCount = periodTotalResult[projectName][secondCategory][TICKET_CLOSE];\n      periodTotalResult[projectName][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n        ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n      let ticketOpenProcessTime = periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME];\n      let ticketOpenCount = periodTotalResult[projectName][secondCategory][TICKET_OPEN];\n      periodTotalResult[projectName][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n        ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n    }\n  }\n\n  let stageRateResult = {};\n  statisticRate(periodNewAddedResult, NEW_ADD_CLOSE_RATE, stageRateResult);\n  statisticRate(thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, stageRateResult);\n  statisticRate(periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, stageRateResult);\n  statisticRate(beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, stageRateResult);\n  statisticRate(periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, stageRateResult);\n  \n  let stageResult = {\n    periodNewAddedResult: periodNewAddedResult,\n    thisYearBeforePeriodResult: thisYearBeforePeriodResult,\n    thisYearBeforePeriodTotalResult: thisYearBeforePeriodTotalResult,\n    lastYearBeforePeriodResult: lastYearBeforePeriodResult,\n    lastYearBeforePeriodTotalResult: lastYearBeforePeriodTotalResult,\n    beforePeriodNeedHandleResult: beforePeriodNeedHandleResult,\n    thisYearTotalResult: thisYearTotalResult,\n    periodTotalResult: periodTotalResult,\n    rateResult: stageRateResult\n  };\n\n  // 统计项目\n  let projectResult = {\n    periodNewAddedResult:  mergeStageResult([periodNewAddedResult], filterProjectStage),\n    thisYearBeforePeriodResult: mergeStageResult([thisYearBeforePeriodResult], filterProjectStage),\n    thisYearBeforePeriodTotalResult: mergeStageResult([thisYearBeforePeriodTotalResult], filterProjectStage),\n    thisYearTotalResult: mergeStageResult([thisYearTotalResult], filterProjectStage),\n    lastYearBeforePeriodResult: mergeStageResult([lastYearBeforePeriodResult], filterProjectStage),\n    lastYearBeforePeriodTotalResult: mergeStageResult([lastYearBeforePeriodTotalResult], filterProjectStage),\n    beforePeriodNeedHandleResult: mergeStageResult([beforePeriodNeedHandleResult], filterProjectStage),\n    periodTotalResult: mergeStageResult([periodTotalResult], filterProjectStage)\n  };\n  let projectRateResult = {}\n  statisticRate(projectResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, projectRateResult);\n  statisticRate(projectResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, projectRateResult);\n  statisticRate(projectResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, projectRateResult);\n  statisticRate(projectResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, projectRateResult);\n  projectResult.rateResult = projectRateResult;\n\n  let cityResult = {\n    periodNewAddedResult:  mergeProjectResult([projectResult.periodNewAddedResult]),\n    thisYearBeforePeriodResult: mergeProjectResult([projectResult.thisYearBeforePeriodResult]),\n    thisYearBeforePeriodTotalResult: mergeProjectResult([projectResult.thisYearBeforePeriodTotalResult]),\n    thisYearTotalResult: mergeProjectResult([projectResult.thisYearTotalResult]),\n    lastYearBeforePeriodResult: mergeProjectResult([projectResult.lastYearBeforePeriodResult]),\n    lastYearBeforePeriodTotalResult: mergeProjectResult([projectResult.lastYearBeforePeriodTotalResult]),\n    beforePeriodNeedHandleResult: mergeProjectResult([projectResult.beforePeriodNeedHandleResult]),\n    periodTotalResult: mergeProjectResult([projectResult.periodTotalResult])\n  };\n  let cityRateResult = {}\n  statisticCityRate(cityResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, cityRateResult);\n  statisticCityRate(cityResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, cityRateResult);\n  statisticCityRate(cityResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, cityRateResult);\n  cityResult.rateResult = cityRateResult;\n\n  let result = {\n    stageResult,\n    projectResult,\n    cityResult\n  };\n  return result;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityData: {\n        periodNewAddedData: [],\n        thisYearBeforePeriodData: [],\n        thisYearBeforePeriodTotalData: [],\n        thisYearTotalData: [],\n        lastYearBeforePeriodData: [],\n        lastYearBeforePeriodTotalData: [],\n        beforePeriodNeedHandleData: [],\n        periodTotalData: [],\n        rateData: [],\n        cities: []\n      },\n      areaData: {\n        periodNewAddedData: [],\n        thisYearBeforePeriodData: [],\n        thisYearBeforePeriodTotalData: [],\n        thisYearTotalData: [],\n        lastYearBeforePeriodData: [],\n        lastYearBeforePeriodTotalData: [],\n        beforePeriodNeedHandleData: [],\n        periodTotalData: [],\n        rateData: []\n      },\n      loading: false\n    };\n  }\n\n  start = (fileList, startDate, endDate) => {\n    this.setState({ loading: true });\n    readExcels(fileList).then((data) => {\n      // clear previous data\n      this.setState({\n        cityData: {\n          periodNewAddedData: [],\n          thisYearBeforePeriodData: [],\n          thisYearBeforePeriodTotalData: [],\n          thisYearTotalData: [],\n          lastYearBeforePeriodData: [],\n          lastYearBeforePeriodTotalData: [],\n          beforePeriodNeedHandleData: [],\n          periodTotalData: [],\n          rateData: [],\n          cities: [],\n          cityOpenData: []\n        },\n        projectData: {},\n        stageResult: {}\n      });\n      let allCities = [];\n      let allCityResult = {};\n      for (let cityName in data) {\n        allCities.push(cityName);\n        let result = statisticCity(data[cityName], startDate, endDate);\n        allCityResult[cityName] = result.cityResult;\n        this.setState((state) => ({\n          cityData: {\n            periodNewAddedData:  [...state.cityData.periodNewAddedData, ...formatCityData(result.cityResult.periodNewAddedResult, cityName)],\n            thisYearBeforePeriodData: [...state.cityData.thisYearBeforePeriodData, ...formatCityData(result.cityResult.thisYearBeforePeriodResult, cityName)],\n            thisYearBeforePeriodTotalData: [...state.cityData.thisYearBeforePeriodTotalData, ...formatCityData(result.cityResult.thisYearBeforePeriodTotalResult, cityName)],\n            thisYearTotalData: [...state.cityData.thisYearTotalData, ...formatCityData(result.cityResult.thisYearTotalResult, cityName)],\n            lastYearBeforePeriodData: [...state.cityData.lastYearBeforePeriodData, ...formatCityData(result.cityResult.lastYearBeforePeriodResult, cityName)],\n            lastYearBeforePeriodTotalData: [...state.cityData.lastYearBeforePeriodTotalData, ...formatCityData(result.cityResult.lastYearBeforePeriodTotalResult, cityName)],\n            beforePeriodNeedHandleData: [...state.cityData.beforePeriodNeedHandleData, ...formatCityData(result.cityResult.beforePeriodNeedHandleResult, cityName)],\n            periodTotalData: [...state.cityData.periodTotalData, ...formatCityData(result.cityResult.periodTotalResult, cityName)],\n            rateData: [...state.cityData.rateData, ...formatToCityRateTable(result.cityResult.rateResult, cityName)],\n            cities: allCities\n          }\n        }));\n        this.setState(state => ({\n          projectData: {\n            ...state.projectData,\n            [cityName]: result.projectResult\n          }\n        }));\n        this.setState(state => ({\n          stageResult: {\n            ...state.stageResult,\n            [cityName]: result.stageResult\n          }\n        }));\n      }\n      let areaResult = {\n        periodNewAddedResult: initProject(),\n        thisYearBeforePeriodResult: initProject(),\n        thisYearBeforePeriodTotalResult: initProject(),\n        thisYearTotalResult: initProject(),\n        lastYearBeforePeriodResult: initProject(),\n        lastYearBeforePeriodTotalResult: initProject(),\n        beforePeriodNeedHandleResult: initProject(),\n        periodTotalResult: initProject()\n      };\n      // statistic area result\n      for (let table in areaResult) {\n        for (let cityName in allCityResult) {\n          for (let secondCategory in areaResult[table]) {\n            let result = allCityResult[cityName][table][secondCategory];\n            for (let item in result) {\n              if (item === TICKET_CLOSE_PROCESS_TIME) {\n                let ticketCloseCount = result[TICKET_CLOSE];\n                let ticketCloseProcessTime = result[TICKET_CLOSE_PROCESS_TIME];\n                areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME] +=\n                  ticketCloseCount * ticketCloseProcessTime;\n              } else if (item === TICKET_OPEN_PROCESS_TIME) {\n                let ticketOpenProcessTime = result[TICKET_OPEN_PROCESS_TIME];\n                let ticketOpenCount = result[TICKET_OPEN];\n                areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME] +=\n                  ticketOpenCount * ticketOpenProcessTime;\n              }\n              else {\n                areaResult[table][secondCategory][item] += result[item];\n              }\n            }\n          }\n        }\n      }\n      // get average process time\n      for (let table in areaResult) {\n        for (let secondCategory in areaResult[table]) {\n          let ticketCloseProcessTime = areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME];\n          let ticketCloseCount = areaResult[table][secondCategory][TICKET_CLOSE];\n          areaResult[table][secondCategory][TICKET_CLOSE_PROCESS_TIME] =\n            ticketCloseCount > 0 ? Number(ticketCloseProcessTime / ticketCloseCount).toFixed(2) : 0;\n\n          let ticketOpenProcessTime = areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME];\n          let ticketOpenCount = areaResult[table][secondCategory][TICKET_OPEN];\n          areaResult[table][secondCategory][TICKET_OPEN_PROCESS_TIME] =\n            ticketOpenCount > 0 ? Number(ticketOpenProcessTime / ticketOpenCount).toFixed(2) : 0;\n        }\n      }\n      let areaRateResult = {}\n      statisticCityRate(areaResult.periodNewAddedResult, NEW_ADD_CLOSE_RATE, areaRateResult);\n      statisticCityRate(areaResult.thisYearBeforePeriodResult, REMAIN_CLOSE_RATE, areaRateResult);\n      statisticCityRate(areaResult.beforePeriodNeedHandleResult, OVERALL_CLOSE_RATE, areaRateResult);\n      statisticCityRate(areaResult.periodNewAddedResult, RESPONSE_IN_30_MIN_RATE, areaRateResult);\n      statisticCityRate(areaResult.periodNewAddedResult, RESPONSE_IN_30_HOUR_RATE, areaRateResult);\n      statisticCityRate(areaResult.beforePeriodNeedHandleResult, CLOSE_ON_TIME_RATE, areaRateResult);\n      statisticCityRate(areaResult.periodTotalResult, TOTAL_OVERALL_CLOSE_RATE, areaRateResult);\n      areaResult.rateResult = areaRateResult;\n      this.setState({\n        areaData: {\n          periodNewAddedData: formatToAreaTable(areaResult.periodNewAddedResult),\n          thisYearBeforePeriodData: formatToAreaTable(areaResult.thisYearBeforePeriodResult),\n          thisYearBeforePeriodTotalData: formatToAreaTable(areaResult.thisYearBeforePeriodTotalResult),\n          thisYearTotalData: formatToAreaTable(areaResult.thisYearTotalResult),\n          lastYearBeforePeriodData: formatToAreaTable(areaResult.lastYearBeforePeriodResult),\n          lastYearBeforePeriodTotalData: formatToAreaTable(areaResult.lastYearBeforePeriodTotalResult),\n          beforePeriodNeedHandleData: formatToAreaTable(areaResult.beforePeriodNeedHandleResult),\n          periodTotalData: formatToAreaTable(areaResult.periodTotalResult),\n          rateData: formatToAreaTateTable(areaResult.rateResult)\n        }\n      });\n\n      // 画图：剩余未关城市分布饼状图\n      let cityOpenData = [];\n      for (let cityName in allCityResult) {\n        let value = allCityResult[cityName].beforePeriodNeedHandleResult[KEY_TICKET_TOTAL][TICKET_OPEN];\n        cityOpenData = [...cityOpenData, { name: cityName, value}];\n      }\n      this.setState({\n        cityOpenData\n      });\n\n      // 画图：剩余未关二级分类饼状图\n      let secondCategoryOpenData = [];\n      for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n        let value = areaResult.beforePeriodNeedHandleResult[secondCategory][TICKET_OPEN];\n        secondCategoryOpenData = [...secondCategoryOpenData, {\n          name: secondCategory,\n          value\n        }]\n      }\n      this.setState({\n        secondCategoryOpenData\n      });\n\n      // 画图：新增受理城市分布图\n      let cityNewAddedAcceptData = [];\n      for (let cityName in allCityResult) {\n        let value = allCityResult[cityName].periodNewAddedResult[KEY_TICKET_TOTAL][TICKET_ACCEPT];\n        cityNewAddedAcceptData = [\n          ...cityNewAddedAcceptData, {\n            name: cityName,\n            value\n          }\n        ]\n      }\n      this.setState({\n        cityNewAddedAcceptData\n      })\n\n      // 画图：新增受理二级分类分布图\n      let secondCategoryNewAddedAcceptData = [];\n      for (let secondCategory of DEFAULT_SECOND_CATEGORIES) {\n        let value = areaResult.periodNewAddedResult[secondCategory][TICKET_ACCEPT];\n        secondCategoryNewAddedAcceptData = [...secondCategoryNewAddedAcceptData, {\n          name: secondCategory,\n          value\n        }]\n      }\n      this.setState({\n        secondCategoryNewAddedAcceptData\n      });\n\n      // 画图：截至本年度统计周期受理累计\n      let cityAcceptTotalData = [];\n      let cityCloseRateData = [];\n      console.log(allCityResult);\n      for (let cityName in allCityResult) {\n        let value = allCityResult[cityName].periodTotalResult[KEY_TICKET_TOTAL][TICKET_ACCEPT];\n        cityAcceptTotalData = [\n          ...cityAcceptTotalData,\n          { name: cityName, value }\n        ];\n        let closeRate = allCityResult[cityName].rateResult[KEY_TICKET_TOTAL][NEW_ADD_CLOSE_RATE];\n        cityCloseRateData = [\n          ...cityCloseRateData,\n          { name: cityName, value: closeRate }\n        ];\n      }\n      this.setState({\n        cityAcceptTotalData,\n        cityCloseRateData\n      });\n\n      // 画图：城市已关闭平均处理时长\n      let cityCloseAverageHandleTimeData = [];\n      for (let cityName in allCityResult) {\n        let value = allCityResult[cityName].periodNewAddedResult[KEY_TICKET_TOTAL][TICKET_CLOSE_PROCESS_TIME];\n        cityCloseAverageHandleTimeData = [\n          ...cityCloseAverageHandleTimeData,\n          { name: cityName, value }\n        ];\n      }\n      this.setState({\n        cityCloseAverageHandleTimeData\n      });\n\n      // 画图：二级分类已关闭平均处理时长\n      let categoryCloseAverageHandleTimeData = [];\n      for (let cityName in allCityResult) {\n        let value = allCityResult[cityName].periodNewAddedResult[KEY_TICKET_TOTAL][TICKET_CLOSE_PROCESS_TIME];\n        cityCloseAverageHandleTimeData = [\n          ...cityCloseAverageHandleTimeData,\n          { name: cityName, value }\n        ];\n      }\n      this.setState({\n        cityCloseAverageHandleTimeData\n      });\n\n      // 画图：城市剩余未关平均处理时长\n      let cityOpenAverageHandleTimeData = [];\n      for (let cityName in allCityResult) {\n        let value = allCityResult[cityName].beforePeriodNeedHandleResult[KEY_TICKET_TOTAL][TICKET_OPEN_PROCESS_TIME];\n        cityOpenAverageHandleTimeData = [\n          ...cityOpenAverageHandleTimeData,\n          { name: cityName, value }\n        ];\n      }\n      this.setState({\n        cityOpenAverageHandleTimeData\n      });\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  exportExcel = () => {\n    let header = [KEY_PROJECT_NAME, KEY_STATISTIC_ITEM, ...DEFAULT_SECOND_CATEGORIES, KEY_TICKET_TOTAL];\n    if (this.state.newAddedData.length > 0 || this.state.thisYearBeforeStartData.length > 0 ||\n      this.state.thisYearBeforePeriodTotalData.length > 0 || this.state.thisYearTotalData.length > 0 ||\n      this.state.lastYearBeforePeriodData.length > 0 ||\n      this.state.lastYearBeforePeriodTotalData.length > 0 ||\n      this.state.beforePeriodNeedHandleData.length > 0 ||\n      this.state.periodTotalData.length > 0) {\n      let sheet1 = XLSX.utils.json_to_sheet(this.state.periodNewAddedData, {\n        header: header\n      });\n      let sheet2 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodData, {\n        header: header\n      });\n      let sheet3 = XLSX.utils.json_to_sheet(this.state.thisYearBeforePeriodTotalData, {\n        header: header\n      });\n      let sheet4 = XLSX.utils.json_to_sheet(this.state.thisYearTotalData, {\n        header: header\n      });\n      let sheet5 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodData, {\n        header: header\n      });\n      let sheet6 = XLSX.utils.json_to_sheet(this.state.lastYearBeforePeriodTotalData, {\n        header: header\n      });\n      let sheet7 = XLSX.utils.json_to_sheet(this.state.beforePeriodNeedHandleData, {\n        header: header\n      });\n      let sheet8 = XLSX.utils.json_to_sheet(this.state.periodTotalData, {\n        header: header\n      });\n      let sheet9 = XLSX.utils.json_to_sheet(this.state.rateData, {\n        header: header\n      });\n      let workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, sheet1, STATISTIC_PERIOD_ADD);\n      XLSX.utils.book_append_sheet(workbook, sheet2, STATISTIC_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet3, STATISTIC_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet4, STATISTIC_THIS_YEAR_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet5, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN);\n      XLSX.utils.book_append_sheet(workbook, sheet6, STATISTIC_LAST_YEAR_BEFORE_PERIOD_REMAIN_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet7, STATISTIC_BEFORE_PERIOD_NEED_HANDLE);\n      XLSX.utils.book_append_sheet(workbook, sheet8, STATISTIC_BEFORE_PERIOD_TOTAL);\n      XLSX.utils.book_append_sheet(workbook, sheet9, STATISTIC_PERIOD_RATE)\n      XLSX.writeFile(workbook, 'statistic-' + moment(Date.now()).format('YYYY-MM-DD-HH-MM-SS') + '.xlsx')\n    } else {\n      message.error('请先点击“开始统计”按钮进行统计！');\n    }\n  }\n\n  render() {\n    const tabChart = (\n      <ChartView\n        cityOpenData={this.state.cityOpenData}\n        secondCategoryOpenData={this.state.secondCategoryOpenData}\n        cityNewAddedAcceptData={this.state.cityNewAddedAcceptData}\n        secondCategoryNewAddedAcceptData={this.state.secondCategoryNewAddedAcceptData}\n        cityAcceptTotalData={this.state.cityAcceptTotalData}\n        cityCloseRateData={this.state.cityCloseRateData}\n        cityCloseAverageHandleTimeData={this.state.cityCloseAverageHandleTimeData}\n        cityOpenAverageHandleTimeData={this.state.cityOpenAverageHandleTimeData}\n        cities={this.state.cityData.cities}\n      />\n    );\n\n    const tabArea = (\n      <AreaView\n        periodNewAddedData={this.state.areaData.periodNewAddedData}\n        thisYearBeforePeriodData={this.state.areaData.thisYearBeforePeriodData}\n        thisYearBeforePeriodTotalData={this.state.areaData.thisYearBeforePeriodTotalData}\n        thisYearTotalData={this.state.areaData.thisYearTotalData}\n        lastYearBeforePeriodData={this.state.areaData.lastYearBeforePeriodData}\n        lastYearBeforePeriodTotalData={this.state.areaData.lastYearBeforePeriodTotalData}\n        beforePeriodNeedHandleData={this.state.areaData.beforePeriodNeedHandleData}\n        periodTotalData={this.state.areaData.periodTotalData}\n        rateData={this.state.areaData.rateData}\n      />\n    );\n\n    const tabCity = (\n      <CityView\n        periodNewAddedData={this.state.cityData.periodNewAddedData}\n        thisYearBeforePeriodData={this.state.cityData.thisYearBeforePeriodData}\n        thisYearBeforePeriodTotalData={this.state.cityData.thisYearBeforePeriodTotalData}\n        thisYearTotalData={this.state.cityData.thisYearTotalData}\n        lastYearBeforePeriodData={this.state.cityData.lastYearBeforePeriodData}\n        lastYearBeforePeriodTotalData={this.state.cityData.lastYearBeforePeriodTotalData}\n        beforePeriodNeedHandleData={this.state.cityData.beforePeriodNeedHandleData}\n        periodTotalData={this.state.cityData.periodTotalData}\n        rateData={this.state.cityData.rateData}\n        cities={this.state.cityData.cities}\n        cityOpenData={this.state.cityData.cityOpenData}\n        secondCategoryOpenData={this.state.secondCategoryOpenData}\n      />\n    );\n\n    const tabProject = (\n      <ProjectView\n        cities={this.state.cityData.cities}\n        projectData={this.state.projectData}\n      />\n    );\n\n    const tabStage = (\n      <ProjectView\n        cities={this.state.cityData.cities}\n        projectData={this.state.stageResult}\n      />\n    );\n \n    return (\n      <LocaleProvider locale={zh_CN}>\n        <div>\n          <h2 className=\"text--center heading\">统计辅助工具</h2>\n          <DataForm\n            onStart={this.start}\n            onExport={this.exportExcel}\n            loading={this.state.loading}\n          />\n          <Row style={{ margin: '40px 0' }}>\n            <Col span={22} offset={1}>\n              <Tabs type=\"card\">\n                <Tabs.TabPane tab=\"统计图\" key=\"统计图\">{tabChart}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"大区\" key=\"大区\">{tabArea}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"城市\" key=\"城市\">{tabCity}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"项目\" key=\"项目\">{tabProject}</Tabs.TabPane>\n                <Tabs.TabPane tab=\"分期\" key=\"分期\">{tabStage}</Tabs.TabPane>\n              </Tabs>\n            </Col>\n          </Row>\n        </div>\n      </LocaleProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}